{
  "info": {
    "authors": [
      "Mark Hepple"
    ],
    "book": "International Conference on Computational Linguistics",
    "id": "acl-C96-1091",
    "title": "A Compilation-Chart Method for Linear Categorial Deduction",
    "url": "https://aclweb.org/anthology/C96-1091",
    "year": 1996
  },
  "references": [
    "acl-C90-2030",
    "acl-C90-2041",
    "acl-C92-1024",
    "acl-E95-1018",
    "acl-E95-1019",
    "acl-P89-1033"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "Recent work in categorial grammar has seen proposals for a wide range of systems, differing in their 'resource sensitivity' and hence, implicitly, their under-• lying notion of 'linguistic structure'.",
        "A common framework for parsing such systems is emerging, whereby some method of linear logic theorem proving is used in combination with a system of labelling that ensures that only deductions appropriate to the relevant categorial formalism are allowed.",
        "Tins paper presents a deduction method for impli-cational linear logic that brings with it the benefit that chart parsing provides for CFG parsing, namely avoiding the need to recompute intermediate results when searching exhaustively for all possible analyses.",
        "The method involves corn-piling possibly higher-order linear fornnilae to indexed first-order formulae, over which deduction is made using just a single inference rule."
      ]
    },
    {
      "heading": "1 introduction",
      "text": [
        "This paper presents a method applicable to parsing a range of categorial grammar formalisms, in particular ones that fall within the 'type-logical' tradition, of winch the (associative) Lambek calculus L is the most familiar representative (Lambek, 1958).",
        "Recent work has seen proposals for a range of such systems, differing in their resource sensitivity (and hence, implicitly, their underlying notion of `linguistic structure'), in some cases combining differing resource sensitivities within a single system.'",
        "Some of these proposals employ a 'labelled deduction' methodology (Gabbay, 1994), whereby the types in a proof are associated with labels under a specified discipline, the labels !See, for example, the formalisms developed in Moortgat Sr. Morrill (1991), Moortgat Oehrle (1.994), Morrill (1994), Hem& (1995).",
        "recording proof information as a basis for ensuring correct inferencing.",
        "Alongside such developments, various work has addressed the associated parsing problem.",
        "2 0 C particular interest here are systems that employ a theorem proving method that is (perhaps implicitly) appropriate for use with linear logic, and combine it with a labelling system that restricts admitted deductions to be those of some weaker logic.",
        "Moortgat (1992) shows how a linear proof net method may be combined with a range of lit-bellurg disciplines to provide deduction for a range of categorial systems.",
        "Morrill (1995) shows how types may be translated to labelled implicatiolial linear types, with deduction implemetited via a version of SLIT resolution.",
        "The crucial observation is that linear logic stands above all of the type-logical systems proposed as categorial formalisms in the hierarchy of substructural logics, and hence linear logic deduction methods can provide a common basis for parsing all of these systems.",
        "The present work contributes to this project, by providing a method of deduction for the impli-cational fragment of linear logic that, like chart parsing for l'SG, avoids recomputation of results,.",
        "i.e. where any combination of types contributes to more than one overall analysis, it need only be computed once.",
        "In what follows, 1 will first introduce deduction for implicational linear logic, and discuss its incompatibility with a chart-like deduction approach, before presenting a conipi-lation method that converts formulae to a form for which a chart-like deduction method is possible.",
        "Finally, 1 will introduce the Morrill (1995) method for translating Lambek types to labelled linear types, as a basis for illustrating how the chart, compilation method can be used as a general framework for categorial deduction, via the use of such translations.",
        "2Approaches include sentient proof normalisation methods for L (Kiinig, 1989; .flepple, 1990; flendriks, 1992), chart parsing methods for L (Kiinig, 1990; Mei,-pie, 1992), and proof net methods for a range of systems (Roorda, 1997.; Moortgat, 1992)."
      ]
    },
    {
      "heading": "2 Implicational Linear Logic",
      "text": [
        "Linear logic is an example of a \"resource-sensitive\" logic, requiring that in any deduction, every assumption (`resource') is used precisely once.",
        "We consider only the implicational fragment of (in-tuitionistic) linear logic.'",
        "The set of formulae arises by closing a (nonempty) set of atomic types A under the linear implication operator o (i.e. ::= A I Yo-,T).",
        "Various alternative formulations are possible.",
        "We here use a natural deduction formulation, requiring the following rules (o-elimination and introduction respectively):",
        "Eliminations and introductions correspond to steps of functional application and abstraction, respectively, as the lambda term labelling reveals.",
        "The introduction rule discharges precisely one assumption (B) within the proof to which it applies (ensuring linear use of resources, i.e. that each resource is used precisely once).",
        "Consider the following proof that Xo-Y, Yo--Z Xo-Z",
        "Following Prawitz (1965), a normal form for proofs can be defined using just the following (meaning preserving) contraction rule (analogous to /3-conversion).",
        "This observation is of note in that it restricts the form of proofs that we must consider in seeking to prove some possible theorem.",
        "minor premise of an elimination inference) consists of a sequence of (> 0) eliminations followed by a sequence of (> 0) introductions.",
        "The differential status of the left and right hand side formulae in a sequent may be addressed in terms of polarity, with left formulae being deemed to have positive polarity, and the right formula to have negative polarity.",
        "Polarity applies also to subformulae, i.e. in a formula Xo-Y with a given polarity p, the subformula X has the same polarity p, and Y has the opposite polarity.",
        "For example, a positively occuring higher-order type might have the following pattern of positive and negative subformulae: ( X+ 0 (Y- o Z+ )- )+ Consider the following proof involving this type:",
        "Observe that the involvement of 'hypothetical rea-soning' in this proof (i.e. the use of an additional assumption that is later discharged) is driven by the presence of the higher-order formula, and that the additional assumption in fact corresponds to the positive subformula occurrence Z within that higher-order formula.",
        "In the following proof that Xo- (Yo-(Yo- Z)) Xo-Z, hypothetical reasoning again arises in relation to positive subformulae, i.e. the subformula Yo Z of the higher-order formula ( X+ 0 ( Y ( Y+ 0 Z )4 ) )-I as well as the subformula Z of the (overall negative) goal formula (X- o Z+ )-",
        "The normal form proofs of this system have a straightforward structural characterisation, that their main branch (the unique path from an assumption to the proof's end-type that includes no 'It follows that the parsing method to be developed applies only to categorial systems having only implicational connectives.",
        "It is standard in categorial calculi to include also a 'product' operator, enabling matter like addition of substructures, e.g. L has a product (commonly notated as) •, with the Lambek implicationals / and \\ being its left and right residuals.",
        "Although it is appealing from a logical point of view to include such operators, their use is not motivated in grammar.",
        "More specifically, additional assumptions link to maximal positive subformulae, i.e. a subformula Y+ in a context of the form (X- 0 Y+ )- , but not in (Y+ o Z-)+.",
        "For an even more complex formula, e.g. (V+ 0-(W- 0 (X+ o (Y- 0 Z+ ) )+ )- )+ we might find that a proof would involve not only an additional assumption corresponding to the positive subformula Xo- (Yo- Z)), but that reasoning with that assumption would in turn involve a further additional assumption corresponding to its positive subformula Z."
      ]
    },
    {
      "heading": "3 A Compilation-Chart Method",
      "text": [
        "Standard chart parsing for PSG has the advantage that a simple organising principle governs the storage of results and underpins search, namely span within a linear dimension, specified by limiting left and right points.",
        "A further crucial feature is that what we derive as an item for any span is purely a function of the results derived for substretches of that span, and ultimately of the lexical categories that it dominates (assuming a given grammar).",
        "Deduction in implicational linear logic lacks both of these features, although, as we shall see shortly, some notion of 'span' can be specified.",
        "The crucial problem for developing a chart-like method is the fact that, in combining any two elements A,B C, there is an infinite number of possible results C we could derive, and that what we in fact should derive depends not just on the formulae themselves, but upon other formulae that might combine with that; result.",
        "More particularly, the reasoning needed to derive C is liable to involve hypothetical elements whose involvement is driven by the presence of some higher-order type elsewhere."
      ]
    },
    {
      "heading": "First-Order Linear Deduction",
      "text": [
        "Let us begin by avoiding this latter problem by considering the fragment involving only first-order formulae, i.e. those defined by ::= A Yo-A, and furthermore allow only atomic goals (i.e. so A is atomic in any h A).",
        "Consequently, the [o-I] rule is not required, arid hypothetical reasoning excluded.",
        "In combining types using just the remaining elimination rule, we must still ensure linear use of resources, i.e. that no resource may be used more than once in any deduction, and that in any overall deduction, every resource has been used.",
        "These requirements can be enforced using an indexation method, whereby each initial formula in our database is marked with a unique index (or strictly a singleton set containing that index), and where a formula that results from a combination is marked with the union of the index sets of the two formulae combined.4 We can ensure that no initial assumption contributes more than once to any deduction by requiring that wherever two formulae are combined, their index sets must be disjoint.",
        "Thus, we require the following modified [o-E] rule (where 0,7/),71- are index sets, and Lyi denotes union of sets that are required to be disjoint):",
        ": Ao-Ii: a 11) :13: b 71 : A : (ab) 7i =%U+/)",
        "In proving I' =.›- A, a successful overall analysis is recognised by the presence of a database formula",
        "A whose index set is the full set of indices assigned to the initial formulae in F. For example, to prove Xo-X, Xo-X, Xo-Y, Y X, we might start with a database containing entries as follows (the numbering of entries is purely for exposition):",
        "1. : Xo-X : v 2. j : Xo-X: w 3. k : Xo-Y : 4. l :Y : y",
        "Use of the modified elimination rule gives additional formulae as follows:",
        "5.",
        "{k, : X : xy [3+4] 6. : X : v(xy) [1+5] 7. fj k, : X : w (xy) [2+5] 8. fi, j, k, : X :v(w(xy)) [1+7] 9. fi, j, k, : X : w(v(xy)) [2+6]",
        "There are two successful analyses, numbered 8 and 9, which we recognise by the fact that they have the intended goal type (X), and are indexed with the full set of the indices assigned to the initial left hand side formulae.",
        "Note that the formula numbered 5 contributes to both of the sucessful overall analyses, without needing to be recomputed.",
        "Hence we can see that we have already gained the key benefit of a chart approach for PSG parsing, namely avoiding the need to recompute partial results.",
        "It can be seen that indexing in the above method plays a role similar to that of `spans' within standard chart parsing.",
        "An adequate algorithm for use with the above approach is easily stated.",
        "Given a possible theorem B1,...,B7z A, the left hand side formulae are each assigned unique indices and semantic variables, and put on an agenda.",
        "Then, a loop is followed in which a formula is taken from the agenda and added to the database, and then the next formula is taken from the agenda and so on until the agenda is empty.",
        "Whenever a formula is added to the database, a check is made to see if it can combine with formulae already there, in which case new formulae are generated, which are added to the agenda.",
        "When the agenda is empty, a check is made for any successful overall analsy-ses, identified as described above.",
        "Note that since the result of a combination always bears an index set larger than either of its parent formulae, and since the maximal index set that any formula can carry includes all and only the indices assigned to the original left hand side formulae, the above process must terminate."
      ]
    },
    {
      "heading": "Higher-Order Linear Deduction",
      "text": [
        "Let us turn now to the general case, where higher-order formulae are allowed.",
        "The method to be described involves compiling the initial formulae (which may be higher-order) to give a new, possibly larger, set of formulae which are all first order.",
        "We observed above how hypothetical reasoning in a proof is driven by the presence within higher-order formulae of positively occurring subformu",
        "lae.",
        "The compilation method involves identifying and excising such subformulae (thereby simplifying the containing formulae) and including them as additional assumptions.",
        "For example, this method will simplify the higher-order formula Xo (Yo–Z) to become Xo–Y, generating an additional assumption of Z.",
        "The two key challenges for such an approach are firstly ensuring that the additional assumptions are appropriately used (otherwise invalid reasoning will follow), and secondly ensuring that a proof term appropriate to the original type combination is returned.",
        "Consider an attempt to prove the (invalid) type combination: X0–Z0–(Yo–Z), Y X. Compilation of the formula Xo–Zo–(Yo–Z) yields two formulae Xo–Zo–Y and Z, so the initial query be-conies Xo–Zo–Y, Z, Y X, which is provable.",
        "The problem arises due to inappropriate use of the additional formula Z, which should only be used to prove the argument Y (just as Z's role would be to contribute to proving the argument Yo–Z in a standard proof involving the original formula Xo–Zo–(Yo–Z)).",
        "The solution to this problem relies upon the indexing method adopted above.",
        "The additional assumption generated in compiling a higher-order formula such as Xo– (Yo– Z) will itself be marked with a unique index.",
        "By recording this index on the argument position from which the additional assumption was generated, we can enforce the requirement that the assumption contributes to the derivation of that argument.",
        "Note that a single argument position may give rise to more than one additional assumption, and so in fact an index set that should be recorded.",
        "For example, The (indexed) formula i : X0– (Yo–Zo–W) will compile to give three indexed formulae:",
        "We require a modified elimination rule that will enforce appropriate usage:5",
        "Note that the compilation process must also generate additional assumptions corresponding to the positive subformulae of the right hand side of a query, e.g. compilation of Xo–Y, Yo–Z Xo–Z simplifies the right hand side formula to atomic X, giving and additional assumption Z.",
        "The second challenge we noted for such an approach is ensuring that a proof term (loosely, the 5 Note the requirement that cr is a proper subset of 7/), which will have the consequence that other assumptions must also contribute to deriving the argument B.",
        "This will block a derivation of the linear logically valid Xo – (Yo – Y) X.",
        "However, this move accords with general categorial practice, where it is standard to require that each deduction rests on at least one assumption.",
        "The alternative regime is easily achieved, by making the condition a C //).",
        "`semantic recipe' of the combination) appropriate to the original type combination is returned.",
        "Let, us illustrate how this can be achieved with a simple example.",
        "Consider the following proof:",
        "Deriving the argument Yo–Z of the higher-order formula involves a final introduction step, which, semantically, corresponds to an abstraction step that binds the variable semantics of the additional assumption Z.",
        "The possibility arises that compilation might insert the abstraction into the semantics of the compiled formula, so that it later binds the variable of the additional formula.",
        "For example, compilation of X0– (Yo – Z) might yield Xo–Y with term Ay.x(Az.y) and Z with variable term z, so that combining the former with some formula derived from the latter (i.e. whose term included z) would cause the free occurrence of z to become bound, giving a result such as x(Az.",
        "f (z)).",
        "In that case, we can see that although compilation has eliminated the need for an explicit introduction step in the proof, the step still occurs implicitly in the semantics.",
        "Of course, anyone familiar with lambda calculus will immediately spot the flaw in the preceding proposal, namely that the substitution process that is used in 0-conversion is carefully stated to avoid such 'accidental binding' of variables (by renaming bound variables, wherever required).",
        "We will instead use a special variant of substition which specifically does not act to avoid accidental binding, notated// ] (e.g. Os II v] to indicate substitution of s for v in t).",
        "Note that the assignment of term variables in the approach in general is such that other cases of 'accidental binding' (i.e. beyond those that; we want) will not occur.",
        "incorporating this idea, we arrive at the following (final) version of the elimination rule",
        "Note that the form of the rule requires the MI-plicational formula that it operates upon to be of a certain form, i.e. involving an abstraction (Av.a).",
        "This requirement is met by all implicationals, (as a side effect of the compilation process.",
        "A precise statement of the compilation procedure ('r) is given in Figure 1.",
        "This takes a sequent F A:x.as input, where every left and right hand side formula is labelled with a unique variable, and returns a structure (A, (0 : G : u)), where A is a set of indexed first order formulae, 0 is the full",
        "'r(Xi : , .X„ : xr, -=-> X0 : x0) (A , (0 : C : T)) where io, , i„ fresh indices",
        "where neg(i :11 : : Y2 :",
        "where n ,v.x (v, x fresh variables)",
        "set of indices, G is an atomic goal type, and n a variable.",
        "Let A* denote the result of closing A under the elitnination rule.",
        "The sequent is proven iff ((l) : C : u) C A* for some assignment of a value to it.",
        "Under that; assignment, the original right hand side variable X will return a complete proof term for the implicit proof of the original sequent.",
        "Note that the proof terms so produced have a form which corresponds, tinder the Curry-!Howard isomorphism, to normal form deductions (as defined earlier).",
        "A shnple example.",
        "Compilation of the sequent: X0--(Yo–Z) :x, Yo–W: y, Wo •=> X : v yields the goal specification (t j, k, : X : v) and formulae 1-A, with formulae 5-7 arising under combination.",
        "Formula 7 meets the goal specification, so the initial sequent is proven, with proof term 1:(Az.y(roz)) returned.",
        "1. i : X0--(Y:{j}) : Alt.3:(Az.u) 2. :Z: z 3.",
        "A; : Yo–W : AU.yu 4.",
        "1: Wo–Z : A'11:1071, 5.",
        "{j, : : 7112; [2+4] 6. j , k , : : y (LUZ) [3+5] 7. j, k , : X : x(Az.y(tvz)) [1+6]",
        "The indexed first-order formulae generated by the compilation procedure can be processed using precisely the same algorithm as that described above for handling formulae of the first-order fragment, with precisely the same benefit,, i.e. avoiding recomputation of partial results.",
        "Some efficiency questions arise.",
        "Imagine a Pro-log implementation of the method, with indexed formulae being stored as facts (`edges') in the Pro-log database.",
        "An important overhead will arise when adding an agenda item to the database from locating those formula already there that the current formula can combine with, i.e. if we must separately access every formula already stored to evaluate if indexation requirements are satisfied, and combination possible.",
        "Note firstly that, since compiled fOrmulao are all first-order, if we are adding an atomic formula we need only look to stored implicational formulae for possible comlyi-nations, and vice versa.",
        "Tins is easily achieved.",
        "'the problem of evaluating indexation requirements can be eased by using a bit-vector encoding of index sets.",
        "The compilation process will return a. full set I of the unique indices assigned 1,o any huntulae.",
        "If we impose an arbitrary order over the elements of this set, we can then encode the extension of any index set we encounter using an n,-place bit-vector, where 71, is the cardinality of I, i.e. if some index set contains the ith element of (ordered) 1, then the ith element of its bit-vector is 1, otherwise O.",
        "It is useful to store fully specified bit-vectors with atonlic formulae, specifying their index set.",
        "For implicational formula, however, it is useful to store a bit-vector encoding its requirrrnents for an appropriately indexed argument, i.e. with Os instantiated for the elements of the implicationars own index set (to enforce disjointness of index sets), and with is appearing for those indices that it requires have been involved in deriving the argument.",
        "Other positions will be filled with anonymous variables.",
        "The bit-vectors for an implicational and an atomic formula will match just, in case they are permitted to combine, according to indexation requirements.",
        "(The one shortfall here is that the method allows the implicational to specify that certain indices are a subset; of those of the argument, but not, that they are a proper' subset thereof.)",
        "13y storing such vectors with formulae in the database, indexation requirements can be checked by the process of inatching to the database, so that; only appropriate entries are brought out; for further examination,"
      ]
    },
    {
      "heading": "4 Labelling and Lambek Calculus",
      "text": [
        "As discussed in the introduction, the above method is proposed as a general method for parsing catcgorial systems, via a. tranformation of formulae from the relevant, system to linear formulae.",
        "Such translation should induce labelling that imports the constraints of the original weaker logic.",
        "In that case, although we employ a general method for implicational linear deduction, the results we derive will be all and only those that reflect validity of the weaker system.",
        "I will illustrate this idea by considering one of two such translation methods described by Morrill (1995).",
        "'this method is based on a relational algebraic model for L (van I3enthem, 1991), which interprets types as relations on some set, V (intuitively, pointal",
        "string positions), i.e. sets of ordered pairs from V x V (intuitively, strings identified by delimiting points):",
        "Morrill specifies polar translation functions, which convert Larnbek types that are marked for position (`span') to labelled linear formulae.",
        "The translation functions are identity functions on atomic formulae, and for complex formulae are defined mutually as follows (where each superscript p stands for one of the functions, with 75 indicating the complementary function to p):",
        "A sequent B1, ... , B„ A is translated as: 0 - 1 : , (n - 1) - n : 0 - n : A-For example, X/ (Y/Z), Y/W, W/Z X translates to give the following linear formulae (where j, / are variables, and k a constant):",
        "Such linear formulae can be used with any linear deduction method, given the (trivial) additional task of unifying variables and constants in the string position labels.",
        "Note that for cases that are not L valid, but where the translation is linear logically valid, deduction will fail due to unification failure for string position labels.",
        "A minor complication arises for using this approach with the compilation-chart method described above.",
        "For example, the higher-order formula would compile to two indexed formulae: a:(0 - i :X) 0 (2 - k :Y) :Ay .x (Az .y ) b:(i - k:Z):z Note that the string position variable i appears in both resulting formulae.",
        "For an overall deduction employing these two formulae to be correct, the binding of the two instances of i must be consistent.",
        "However, we cannot simply employ a global binding context since the chart method should be able to return alternative proofs of the same theorem, and such alternative proofs will typically induce distinct (but internally consistent) bindings over string position variables.",
        "Variable bindings must instead be handled locally, i.e. each formula in the database will carry with it a context indicating bindings that have been made in its derivation.",
        "Where two formula are combined, their contexts are merged (and must be consistent)."
      ]
    }
  ]
}
