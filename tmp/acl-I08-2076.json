{
  "info": {
    "authors": [
      "Amir Azim Sharifloo",
      "Mehrnoush Shamsfard"
    ],
    "book": "Proceedings of the Third International Joint Conference on Natural Language Processing",
    "id": "acl-I08-2076",
    "title": "A Bottom Up approach to Persian Stemming",
    "url": "https://aclweb.org/anthology/I08-2076",
    "year": 2008
  },
  "references": [],
  "sections": [
    {
      "text": [
        "A Bottom up Approach to Persian Stemming",
        "NLP Research Lab, Department of Electrical &",
        "Computer Engineering, Shahid Beheshti University, Tehran, Iran",
        "a.sharifloo@mail.sbu.ac.ir",
        "Stemmers have many applications in natural language processing and some fields such as information retrieval.",
        "Many algorithms have been proposed for stemming.",
        "In this paper, we propose a new algorithm for Persian language.",
        "Our algorithm is a bottom up algorithm that is capable to reorganize without changing the implementation.",
        "Our experiments show that the proposed algorithm has a suitable result in stemming and flexibility."
      ]
    },
    {
      "heading": "1. Introduction",
      "text": [
        "In linguistics, stem is a form that unifies the elements in a set of morphologically similar words (Frakes and Yates, 1992), therefore stemming is the operation which determines the stem of a given word.",
        "In other words, the goal of a stemming algorithm is to reduce variant word forms to a common morphological root, called \"stem\" (Bacchin et al., 2002).",
        "There are three common approaches that are used in stemming: affix stripping, lookup table and statistical methods (Bento et al., 2005).",
        "Affix stripping dependends on the morphological structure of the language.",
        "The stem is obtained by removing some morphemes from the one or both sides of the word.",
        "Porter algorithm (Porter, 1980) is an example of this kind of algorithms.",
        "This stemmer is made up of five steps, during which certain rules are applied to the words and the most common suffixes are removed.",
        "In lookup table approach, each word and its related stem are stored in some kind of structured",
        "Mehrnoush Shamsfard",
        "Computer Engineering, Shahid Beheshti University,",
        "Tehran, Iran m-shams@sbu.ac.ir form.",
        "Consequently, for each stored word, we find its stem.",
        "However, the approach needs more space.",
        "Also, for each new word, table must be updated manually.",
        "In statistical methods, through a process of inference and based on a corpus, rules are formulated regarding word formation.",
        "Some of the methodologies adopted are: frequency counts, n-gram (Mayfield and McNamee, 2003), link analysis (Bacchin et al., 2002), and Hidden Markov Models (Melucci and Orio, 2003).",
        "This approach does not require any linguistic knowledge whatsoever, being totally independent of the morphological structure of the target language.",
        "In this paper, we propose a new algorithm for stemming in Persian.",
        "Our algorithm is rule based and in contrast with affix stripping approach, it is a stem based approach.",
        "That means, at first we find possible stems in the word, after that we check which stems are matched with rules.",
        "Our algorithm is bottom up while affix stripping methods are top down.",
        "In other words, we try to generate the word using candidate stems of the word which we call cores of the word.",
        "If the word is generated, the stem is correct.",
        "On the other hand, affix stripping approaches try to removing affixes until reaching to any stem in the word.",
        "Some stemming methods have been presented for Persian (Taghva et al., 2005) which use affix stripping approach.",
        "Our proposed method tries to reach better precision rather than previous methods.",
        "Also, this method tokenizes the word to morphemes which could employ in other morphological methods.",
        "The paper is organized as follows: section 2 presents a brief review of Persian from morphological perspective; in section 3, we describe the proposed algorithm in details; section 4 is about our experiments."
      ]
    },
    {
      "heading": "2. Persian from a Morphological Perspective",
      "text": [
        "Persian is an Indo-European language, spoken and written primarily in Iran, Afghanistan, and a part of Tajikistan.",
        "It is written from right to left in the Arabic-like alphabet.",
        "In Persian, verbs involve tense, number and person.",
        "For example, the verb ' \"I j tj\" (mi-xan-am: I read) is a present tense verb consisting of three morphemes. '",
        "\"\" (am) is a suffix denoting first single person ' (xan) is the present tense root of the verb and ' (mi) is a prefix that expresses continuity.",
        "If a verb has any object pronoun, it can be attached to the end of the verb such as ' \"Mj^\" (mi-xan-am-as: I read it) in which ' (as: it) is an object pronoun.",
        "Also, negative form of verbs is produced with adding ' (ne) to the first of them.",
        "For example, '\"Ij^-j\" (ne-mi-xan-am - I don't read) i s the negative form of the verb ' \"I j^\" (mixanam - I read).",
        "We have gathered 43 rules for verbs, some of them are shown in Table .",
        "1.",
        "Rule__example",
        "Nouns are more challengeable than others in Persian.",
        "We have gathered many rules for nouns that in following, we describe one of them.",
        "The plural forms of nouns are formed by adding the suffixes ( jl, ^I, uj , j).",
        "\"L\" (ha) is used for all words. '",
        "\"I\" (an) is used for humans, animals and every thing that is alive.",
        "Also, ' \"jl, uj , j\" (at ,un , in) is used for some words borrowed from Arabic and some Persian words.",
        "We have another kind of plural form in Persian that is called Mokassar which is a derivational plural form (irregulars in Persian).",
        "Some examples of plural form are shown in Table 2.",
        "Also, there are some orthographic rules which show the effects of joining affixes to the word.",
        "For example, consider that we have two parts of a word: A and B for joining as BA (Consider, Persian is written right to left).",
        "If the last letter of A and the first letter of B are ' ' l\"(a), one letter ' (y) is added between them.",
        "Assume A i s ' \"L\" (dana -wise) and B i s ' \"l\"(an), the joining result i s ' uL.Lb\" (dana-yan: wise people)."
      ]
    },
    {
      "heading": "3. The Proposed Algorithm",
      "text": [
        "Our algorithm is rule based and bottom up.",
        "At first, it tries to find substrings of the word that are stems or morphemes which are derived from any stem, we call them cores.",
        "After that, it joins each of cores with other elements of word for generating that word according to available rules.",
        "Finally, each core with at least one correct generation is a correct core and its stem is correct stem of the word.",
        "The algorithm includes three phases: 1.",
        "Substring tagging 2.",
        "Rule matching 3.",
        "Anti rule matching (Figure 1).",
        "Joining",
        "Result noun",
        "La + jjü£",
        "La j jü£",
        "(hä + kesvar)",
        "(kesvar-hä)",
        "(hä + country)",
        "(countries)",
        "jl + (JjijJ",
        "(hä + deraxt)",
        "(deraxt-än)",
        "(hä + tree)",
        "(trees)",
        "(Mokassar fbrm)^",
        "(kotob)",
        "(kotob)",
        "(books)",
        "(books)",
        "jl + lS + li",
        "(än + y + äghä)",
        "(äghä-yän)",
        "(än + y + mister)",
        "(men)",
        "(present person identifier + present root + mi)",
        "(mi-xän-am) (I read)",
        "(past person identifier + bud +eh + past root)",
        "(raft-e bud-am) (I had gone)",
        "(present root + b)",
        "(be-gozar) (Pass)",
        "All + ft + j-JaLa (JJ",
        "(shod + h + past root)",
        "(xand-e sod) (it was read)",
        "(present person identifier + present root + mi)",
        "In substring tagging phase, we extract morphological information for all possible substrings of the word.",
        "At the end of this phase, we know which substrings of the word are morphemes and which ones are not.",
        "Also, we know clusters that each morpheme is their member.",
        "We use clusters for rule matching phase.",
        "Accordingly, we know cores in the word before beginning the second phase.",
        "We describe substring tagging details in section 3.1.",
        "Input Word",
        "Substring Tagging",
        "Cores List ^_",
        "Rule Matching Anti Rule Matching",
        "Figure1.",
        "Three phases of the proposed algorithm.",
        "In rule matching phase, for each core that has been known in previous phase, we extract related rules.",
        "For example, ' \"I j\" (xan) is one core of the word \"\"I jtf\" tmi-xan-am: I read) and \" \"JL\" j\" bbone mozare: present root) is one of clusters that \" \"I j\" (xan) is its member.",
        "Also, (am) is a member of cluster jLa* (senase mozare: present perwhere it is matched with the word \"Ijf\" (mi-xan-am: I read).",
        "Therefore, we find a matched rule for \" \"I j\" (xan).",
        "At the end of second phase, each core that has extracted any possible rule for the word, remains in cores list and other cores are removed from it.",
        "In anti-rule matching phase, we extract anti rules from anti rules repository for each core in the list.",
        "Each core which has any matched anti rule with the word morphemes, is removed from the cores list.",
        "At the end of the third phase, each stem of any core in the cores list is the correct stem for the word.",
        "Every word with length N has N*(N+1)/2 substrings.",
        "Therefore, we need N*(N+1)/2 string matching for finding them in morphemes repository.",
        "We employ a Trie tree for storing morphemes and present an algorithm for retrieving morphological information from it that reduces the number of string matching.",
        "This algorithm needs N(N+1)/2 character matching (instead of string matching) at most.",
        "A simplified part of tree is shown in Figure 2.",
        "The algorithm is described in the following:",
        "We initiate N pointers (N is the word length) that they point to the tree root.",
        "Also, we use a counter C that i s an index on the word.",
        "At first, C 's value is one that means its related letter is first letter of the word.",
        "At the end of each step, C is increased by one.",
        "Therefore, in each step, C points to one letter of the word that we call this letter L.",
        "At first step, first pointer P1 finds one edge between root edges that its letter is equal with L. P1 goes down on tree by that edge.",
        "Here, P1 extract morphological information from its new position (a node of the tree) and fills morphological information for substring (1, 2).",
        "At the second step, L is the second letter of the word, second pointer P2 finds one edge between root edges that its letter is equal with L. P2 goes down on tree by that edge, extract morphological information from its new position (a node of the tree) and fills morphological information for substring (2, 3).",
        "Also, P1 goes down on tree by an edge contained L, from its position that it is one of root children and fills morphological information for substring (1, 3).At third step, L is third letter of the word.",
        "Third pointer P3 starts from root and goes down on tree by an edge that its letter is equal with L and fills morphological information for substring (3, 4).",
        "P1, P2 repeat this work from their positions and fill morphological information for substring (1, 4) and (2, 4) respectively.",
        "Next steps are done like these steps.",
        "Finally, we have obtained morphological information for all substrings of the word.",
        "Also, if one pointer could not find any edge with value L, it is blocked until the end of algorithm.",
        "Figure 3 shows pseudo code of this algorithm.",
        "We use many rules to generate correct words by morphemes in Persian.",
        "We store these rules in rules repository.",
        "Some gathered rules are shown in",
        "Table 3.",
        "(past person identifier + past root simple past) (present root + b imperative) (ân + alive noun alive plural noun)",
        "Each rule is a sequence of clusters.",
        "A cluster represents a set of morphemes that affects role of them in the word.",
        "In other words, each morpheme could be applied as one or more roles for generating words.",
        "So, each role can be a cluster membership.",
        "For example, in English, \" 'book\" i s a verb and a noun.",
        "But, As a noun, it has a plural form (books) and as a verb, it has a past form (booked).",
        "Similarly, in Persian, the word \"j-\" (mord: die) is a verb root and \"\"^j-\" (mord-and: They died) is a verb, too.",
        "Also, \" \"j-\" (mard: man) is a noun and \"Lj-\" (mard-ha: men) is one of its plural forms.",
        "In consequence, we put \" \"j\" in both of cluster \" \"J\" (esm: noun) and \" \"J- j\" (bone mazi: past root).",
        "We create a new cluster when a rule needs it and that cluster is not in clusters repository.",
        "As we discussed about it, in Persian, we have several suffixes for plural form that every one is used for a set of nouns.",
        "The suffix \" (ha) is used for every noun and the suffix \"jI\" (an) is special for everything that is alive.",
        "Other suffixes are ap-",
        "Word: string;",
        "P: array of pointer with word.length size; // mInfo is morphological Information plied for some words borrowed from Arabic and some Persian words.",
        "A noun such as \"j\".\"",
        "(pesar: boy) has several plural forms (e.g. \"Lj^'/pesar-ha, \"jlj\".\"\"pesar-an).",
        "Therefore, we employ clusters for organizing this situation.",
        "For example, we put the morpheme \"j\" (pesar: boy) in cluster \"\"jI\" (esm: noun) and \"jlAjL\" (andar: alive).",
        "Also, we have two rules in rules repository:",
        "The morpheme \"j\"/ ' (pesar: boy) is a member of both clusters \"\"-\"I \" ' (esm: noun) and \"jI-^jlL-\"' bandar: alive).",
        "Accordingly, these words \"Lj\"/' tpesar-ha: boys) and \"jlj\"/' (jpesar-an: boys) are correct form and their stem is \"j\"/ ' tpesar: boy).",
        "But about the morpheme \"^V ' (ketab: book), it is a noun and a member of cluster \"\"J\" ' (esm: noun) but it is not a member of cluster \"jI^V ' (jandar: alive).",
        "So, \"_lV ' (ketab-ha: books) is a correct form and its stem is \"\"V ' (ketab: book).",
        "In contrast, \"jL-V ' (ketab-an) is a wrong form and \"\"V ' (ketab: book) is not its stem.",
        "Also, we organize suffixes in similar cluster such as cluster \"\"jV* AuV' (senase mozare: present person identifier), \"J*a j Uj ' (harfe nafye fel).",
        "Table 4 shows some clusters.",
        "Cluster Cluster",
        "At the end of this phase, each core must have a rule that it can generate the word.",
        "Otherwise, it is removed from cores list.",
        "This phase is similar previous phase with a small difference.",
        "Like previous phase, we have a rules repository, but these rules are not applied in Persian.",
        "In fact, these rules are exceptions of previous phase rules.",
        "For example, we have a rule in rules repository:",
        "On the other hand, there is an exception for this rule.",
        "Every noun with the final letter \"ft \" ' (he) can not use this rule.",
        "For example, \"^j\" (parand-e: bird) is a kind of animals with the finaltletert\"t (he) and the word \"jlft^j\" (parand-e-an) is a wrong word in Persian.",
        "We call these exceptional rules \"Antitrules .",
        "The details of this phase: Each core from cores list retrieves the anti rules that they involve it.",
        "After that, each retrieved anti rule is checked with the morphemes in the word for possibility of word generation.",
        "Until now, all things were similar previous phase, but the difference is here.",
        "If there is any anti rule related to a rule of any core, that rule is removed from candidate rule list of that core.",
        "At the end of this phase, each core must have at least one rule that it can generate the word.",
        "Otherwise, it is removed from cores list.",
        "Finally, remained cores in cores list have correct stems of the word.",
        "We have gathered a set of anti rules in a repository that each anti rule is related to a rule in rule repository.",
        "Some of these anti rules are shown in Table 5.",
        "(an + alive noun ended with h)"
      ]
    },
    {
      "heading": "4. Experiments and Results",
      "text": [
        "The most primitive method for assessing the performance of a stemmer is to examine its behavior when applied to samples of words - especially words which have already been arranged into 'conflation groups'.",
        "This way, specific errors (e.g., failing to merge \"maintained\" with \"maintenance\", or wrongly merging \"experiment\" with \"experience\") can be identified, and the rules adjusted accordingly.",
        "(present person identifier)",
        "C j V – jj (present root)",
        "_L £-*L Aj jjjl.",
        "(plural suffix ha)",
        "(past root)",
        "(plural suffix an)",
        "(noun)",
        "We evaluated the proposed algorithm with a limited corpus of Hamshahri newspaper.",
        "We started with 252 rules and 20 anti rules.",
        "The algorithm retrieved 90.1 % of word stems correctly.",
        "The failed words are related to absence of some rules in rule repository or stems in Trie tree.",
        "Some of words in the corpus are shown in Table 6.",
        "One ofwords could not be handle with our algo-riihm is \"LjL\" (jä-be-jä - exchange).",
        "We discovered related rule for that and added it to rules repository.",
        "Therefore, if we evaluate the algorithm, the result will be better.",
        "Rules repository evolves and the algorithm result will be better without any change of program and code compilation."
      ]
    },
    {
      "heading": "5. Conclusion",
      "text": [
        "In this paper, we proposed a bottom up method to stem Persian words.",
        "The main purpose of this method is high precision stemming based on morphological rules.",
        "The experiments show that it has suitable results in stemming and presents possibility of evolution easily.",
        "per corpus Stem Word",
        "(mäjarä) (event)",
        "(majara-ye) (event of)",
        "(rasm) (custom)",
        "V\" j (rasm-ha) (customs)",
        "(padide) (phenomenon)",
        "(padid-e-ha-ye) (phenomenons of)",
        "(bud) (to be)",
        "(bud-and) (They were)",
        "(säat) (watch)",
        "(saat-ha-ye-san) (watch)",
        "(kesidan) (to draw)",
        "(be-kesa-and)",
        ">l (äxar) (end)",
        "(axar-in) (last)",
        "(raftan) (going)",
        "(na-raft-e budand) (They had not gone)",
        "JL, (säl) (year)",
        "(em-sal) (this year)",
        "(motäle'e) (study)",
        "CIVIL* (motale-at) (studies)",
        "(mantaghe) (area)",
        "(manategh) (areas)"
      ]
    }
  ]
}
