{
  "info": {
    "authors": [
      "Annius V. Groenink"
    ],
    "book": "Conference of the European Association for Computational Linguistics",
    "id": "acl-E95-1013",
    "title": "Literal Movement Grammars",
    "url": "https://aclweb.org/anthology/E95-1013",
    "year": 1995
  },
  "references": [
    "acl-C86-1048",
    "acl-J81-4003"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "Literal movement grammars (LMGs) provide a general account of extraposition phenomena through an attribute mechanism allowing top-down displacement of syntactical information.",
        "LMGs provide a simple and efficient treatment of complex linguistic phenomena such as cross-serial dependencies in German and Dutch – separating the treatment of natural language into a parsing phase closely resembling traditional context-free treatment, and a disambiguation phase which can be carried out using matching, as opposed to full unification employed in most current grammar formalisms of linguistical relevance."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "The motivation for the introduction of the literal movement grammars presented in this paper is twofold.",
        "The first motivation is to examine whether, and in which ways, the use of unification is essential to automated treatment of natural language.",
        "Unification is an expensive operation, and pinpointing its precise role in NLP may give access to more efficient treatment of language than in most (Prolog-based) scientific applications known today.",
        "The second motivation is the desire to apply popular computer-science paradigms, such as the theory of attribute grammars and modular equational specification, to problems in linguistics.",
        "These formal specification techniques, far exceeding the popular Prolog in declarativity, may give new insight into the formal properties of natural language, and facilitate prototyping for large language applications in the same way as they are currently being used to facilitate prototyping of programming language tools.",
        "For an extensive illustration of how formal specification techniques can be made useful in the treatment of natural language, see (Newton, 1993) which describes the abstract specification of several accounts of phrase structure, features, movement, modularity and *This work is supported by SION grant 612-317-420 of the Netherlands Organization for Scientific Research (NWO).",
        "parametrization so as to abstract away from the exact language being modelled.",
        "The specification language (ASL) used by Newton is a very powerful formalism.",
        "The class of specification formalisms we have in mind includes less complex, equational techniques such as ASF+SDF (Bergstra et al., 1989) (van Deursen, 1992) which can be applied in practice by very efficient execution as a term rewriting system.",
        "Literal movement grammars are a straightforward extension of context-free grammars.",
        "The derivation trees of an LMG analysis can be easily transformed into trees belonging to a context-free backbone which gives way to treatment by formal specification systems.",
        "In order to obtain an efficient implementation, some restrictions on the general form of the formalism are necessary."
      ]
    },
    {
      "heading": "1.1 Structural Context Sensitivity in Natural Language",
      "text": [
        "Equational specification systems such as the ASF+SDF system operate through sets of equations over signatures that correspond to arbitrary forms of context-free grammar.",
        "An attempt at an equational specification of a grammar based on context-free phrase structure rules augmented with feature constraints may be to use the context-free backbone as a signature, and then implement further analysis through equations over this signature.",
        "This seems entirely ana-loguous to the static semantics of a programming language: the language itself is context-free, and the static semantics are defined in terms of functions over the constructs of the language.",
        "In computer-science applications it is irrelevant whether the evaluation of these functions is carried out during the parsing phase (1-pass treatment), or afterwards (2-pass treatment).",
        "This is not a trivial property of computer languages: a computer language with static semantics restrictions is a context-sensitive sublanguage of a context-free language that is either unambiguous or has the finite ambiguity property: for any input sentence, there is only a finite number of possible context-free analyses.",
        "In section 1.3 we will show that due to phenomena of extraposition or discontinuous constituency exhibited by natural languages, a context-free backbone for a sufficiently rich fragment of natural language no",
        "longer has the property of finite ambiguity.",
        "Hence an initial stage of sentence processing cannot be based on a purely context-free analysis.",
        "The LMG formalism presented in this paper attempts to eliminate infinite ambiguity by providing an elementary, but adequate treatment of movement.",
        "Experience in practice suggests that after relocating displaced constituents, a further analysis based on feature unification no longer exploits unbounded structural embedding.",
        "Therefore it seems that after LMG-analysis, there is no need for unification, and further analysis can be carried out through functional matching techniques."
      ]
    },
    {
      "heading": "1.2 Aims",
      "text": [
        "We aim to present a grammar formalism that r> is sufficiently powerful to model relevant fragments of natural language, at least large enough for simple applications such as an interface to a database system over a limited domain.",
        "r> is sufficiently elementary to act as a front-end to computer-scientific tools that operate on context-free languages.",
        "t> has a (sufficiently large) subclass that allows efficient implementation through standard (Earleybased) left-to-right parsing techniques."
      ]
    },
    {
      "heading": "1.3 Requirements",
      "text": [
        "Three forms of movement in Dutch will be a leading thread throughout this paper.",
        "We will measure the adequacy of a grammar formalism in terms of its ability to give a unified account of these three phenomena.",
        "Topicalization The (leftward) movement of the objects of the verb phrase, as in [Which book] i did John forget to return ei to the library?",
        "Dutch sentence structure The surface order of sentences in Dutch takes three different forms: the finite verb appears inside the verb phrase in relative clauses; before the verb phrase in declarative clauses, and before the subject in questions:",
        "(2) .",
        ".",
        ".",
        "dat Jan [Vp Marie kuste ] (3) Jan kustei [vp Marie ei] (4) kustei Jan [Vp Marie ei j?",
        "We think of these three (surface) forms as merely being different representations of the same (deep) structure, and will take this deep structure to be the form (2) that does not show movement.",
        "Cross-serial dependencies In Dutch and German, it is possible to construct sentences containing arbitrary numbers of crossed dependencies, such as in",
        ".",
        "dat Marie Jani Freda Annek (5) that hoordei helpen overtuigen k",
        "heard help convince (that Mary heard John help Fred convince Anne).",
        "Here the i, j, k denote which noun is the first object of which verb.",
        "The analysis we have in mind for this is dat Marie Jani Freda Annek [VP hoorde ei helpen ei overtuigen ek.]",
        "Note that this analysis (after relocation of the extra-posed objects) is structurally equal to the corresponding English VP.",
        "The accounts of Dutch in this paper will consistently assign \"deep structures\" to sentences of Dutch which correspond to the underlying structure as it appears in English.",
        "Similar accounts can be given for other languages – so as to get a uniform treatment of a group of similar (European) languages such as German, French and Italian.",
        "If we combine the above three analyses, the final analysis of (3) will become Jan kustei Marie j [vp ei e j] Although this may look like an overcomplication, this abundant use of movement is essential in any uniform treatment of Dutch verb constructions.",
        "Hence it turns out to occur in practice that a verb phrase has no lexical expansion at all, when a sentence shows both object and verb extraposition.",
        "Therefore, as conjectured in the introduction, a 2-pass treatment of natural language based on a context-free backbone will in general fail – as there are infinitely many ways of building an empty verb phrase from a number of empty constituents."
      ]
    },
    {
      "heading": "2 Definition and Examples",
      "text": [
        "There is evidence that suggests that the typical human processing of movement is to first locate displaced information (the filler), and then find the logical location (the trace), to substitute that information.",
        "It also seems that by and large, displaced information appears earlier than (or left of) its logical position, as in all examples given in the previous section.",
        "The typical unification-based approach to such movement is to structurally analyse the displaced constituent, and use this analysed information in the treatment of the rest of the sentence.",
        "This method is called gap-threading; see (Alshawi, 1992).",
        "If we bear in mind that a filler is usually found to the left of the corresponding trace, it is worth taking into consideration to develop a way of deferring treatment of syntactical data.",
        "E.g. for example sentence 1 this means that upon finding the displaced constituent which book, we will not evaluate that constituent, but rather remember during the treatment of the remaining part of the sentence, that this data is still to be fitted into a logical place.",
        "This is not a new idea.",
        "A number of non-concatenative grammar formalisms has been put forward, such as head-wrapping grammars (HG) (Pollard, 1984), extraposition grammars (XG) (Pereira, 1981).",
        "and tree adjoining grammars (TAG) (Kroch and Joshi, 1986).",
        "A discussion of these formalisms as alternatives to the LMG formalism is given in section 4.",
        "Lessons in parsing by hand in high school (e.g. in English or Latin classes) informally illustrate the purpose of literal movement grammars: as opposed to the traditional linguistic point of view that there is only one head which dominates a phrase, constituents of a sentence have several key components.",
        "A verb phrase for example not only has its finite verb, but also one or more objects.",
        "It is precisely these key components that can be subject to movement.",
        "Now when such a key component is found outside the consitituent it belongs to, the LMG formalism implements a simple mechanism to pass the component down the derivation tree, where it is picked up by the constituent that contains its trace.",
        "It is best to think of LMGs versus context-free grammars as a predicate version of the (propositional) paradigm of context-free grammars, in that nonterminals can have arguments.",
        "If we call the general class of such grammars predicate grammars, the distinguishing feature of LMG with respect to other predicate grammar formalisms such as indexed grammars' (Weir, 1988) (Aho, 1968) is the ability of binding or quantification in the right hand side of a phrase structure rule.",
        "12.1 Definition We fix disjoint sets N, T, V of non-terminal symbols, terminal symbols and variables.",
        "We will write A, B, C .",
        ".",
        ".",
        "to denote nonterminal symbols, a, b, c .",
        ".",
        ".",
        "to denote terminal symbols, and x, y, z for variables.",
        "A sequence a a2 • • an or a E T* is called a (terminal) word or string.",
        "We will use the symbols a, b, c for terminal words.",
        "(Note the use of bold face for sequences.)",
        "12.2 Definition (term) A sequence t it2 • • • tn or t E (V U T)* is called a term.",
        "If a term consists of variables only, we call it a vector and usually write x.",
        "12.3 Definition (similarity type) A (partial) function A mapping N to the natural numbers is called a similarity type.",
        "12.4 Definition (predicate) Let A be a similarity type, A E N and n 12(A), and for 1 < i < let ti be a term.",
        "Then a predicate cp of type A is a terminal a (a terminal predicate) or a syntactical unit of the form A(t1, t2, , tn), called a nonterminal predicate.",
        "If all ti = xi are vectors, we say that = A(x 1, x2, , x,) is a pattern.",
        "Informally, we think of the arguments of a nonterminal as terminal words.",
        "A predicate A(x) then stands for a constituent A where certain information with terminal yield x has been extraposed (i.e. found outside the constituent), and must hence be left out of the A constituent itself.",
        "12.5 Definition (item) Let A be a similarity type, (i) a predicate of type A, and t a term.",
        "Then an item of type A is a syntactical unit of one of the following forms: 1. co (a nonterminal or terminal predicate) 2. x:co (a quantifier item) 3. co It (a slash item)",
        "We will use 4), IP to denote items, and a, /3,1, to denote sequences of items.",
        "I 2.6 Definition Let 1.1 be a similarity type.",
        "A rewrite rule R of type A is a syntactical unit co – 4 cp1 '132 • • • 4)7, where co is a pattern of type A, and for 1 < i < n, 4), is an item of type A.",
        "A literal movement grammar is a triple S, P) where p. is a similarity type, S E N, R(S) = 0 and P is a set of rewrite rules of type A.",
        "Items on the right hand side of a rule can either refer to variables, as in the following rule:",
        "A slash item such as B()/x means that x should be used instead of the actual \"input\" to recognize the nonterminal predicate BO.",
        "I.e. the terminal word x should be recognized as BO, and the item BOIx itself will recognize the empty string.",
        "A quantifier item x:B() means that a constituent B() is recognized from the input, and the variable x, when used elsewhere in the rule, will stand for the part of the input recognized.",
        "12.7 Definition (rewrite semantics) Let R = A(x xn) 4)102 • • • Om be a rewrite rule, then an instantiation of R is the syntactical entity obtained by substituting for each i and for each variable x E a terminal word ax.",
        "A grammar derives the string a iff S() a where is a relation between predicates and sequences of items defined inductively by the following axioms and inference rules:2 aka co a• when cia a is an instantiation of a rule in G",
        "illustrates more intuitively how displaced information (the two a symbols in this case) is 'moved back down' into the tree, until it gets 'consumed' by a slash item.",
        "It also shows how we can extract a context-free 'deep structure' for further analysis by, for example, formal specification tools: if we transform the tree, as shown in figure 3, by removing quantified (extraposed) data, and abstracting away from the parameters, we see that the grammar, in a sense, works by transforming the language an bnCn to the context-free language (ab)nCn.",
        "Figure 4 shows how we can derive a context free 'backbone grammar' from the original grammar.",
        "12.9 Example (cross-serial dependencies in Dutch) The following LMG captures precisely the three basic types of extraposition defined in section 1.3: the three Dutch verb orders, topicalization and cross-serial verb-object dependencies.",
        "A sentence S' has one argument which is used, if nonempty, to fill a noun phrase trace.",
        "A VP has two",
        "arguments: the first is used to fill verb traces, the second is treated as a list of noun phrases to which more noun phrases can be appended.",
        "A 1, is similar to a VP except that it uses the list of noun phrases in its second argument to fill noun phrase traces rather than adding to it.",
        "Figure 5 shows how this grammar accepts the sentence Marie zag Fred Anne kussen.",
        "We see that it is analyzed as",
        "[v' ei ei [v, kussen ek 11 which as anticipated in section 1.3 has precisely the basic, context-free underlying structure of the corresponding English sentence Mary saw Fred kiss Anne indicated in figure 5 by terminal words in bold face.",
        "Note that arbitrary verbs are recognized by a quanti",
        "fier item v:V, and only when, further down the tree, a trace is filled with such a verb in items such as VR/v, its subcategorization types VI, VT and VR start playing a role."
      ]
    },
    {
      "heading": "3 Formal Properties",
      "text": [
        "The LMG formalism in its unrestricted form is shown to be Turing complete in (Groenink, 1995a).",
        "But the grammars presented in this paper satisfy a number of vital properties that allow for efficient parsing techniques.",
        "Before building up material for a complexity result, notice the following proposition, which shows, using only part of the strength of the formalism, that the literal movement grammars are closed under intersection.",
        "13.1 Proposition (intersection) Given two literal movement grammars G1 = Si, Pi) and G2 = (/12, S2, P2) such that dom(Ai) fl dom(A2) = 0,",
        "Clearly, GI recognizes precisely those sentences which are recognized by both G1 and G2.",
        "We can use this knowledge in example 2.9 to restrict movement of verbs to verbs of finite morphology, by adding a nonterminal VFIN, replacing the quantifier items v:V that locate verb fillers with v:VFIN, where VFIN generates all finite verbs.",
        "Any extraposed verb will then be required to be in the intersection of VFIN and one of the verb types VI, VT or VR, reducing possible ambiguity and improving the efficiency of left-to-right recognition.",
        "The following properties allow us to define restrictions of the LMG formalism whose recognition problem has a polynomial time complexity.",
        "13.2 Definition (non-combinatorial) An LMG is non-combinatorial if every argument of a nonterminal on the RHS of a rule is a single variable (i.e. we do not allow composite terms within predicates).",
        "If G is a non-combinatorial LMG, then any terminal string occurring (either as a sequence of items or inside a predicate) in a full G-derivation is a substring of the derived string.",
        "The grammar of example 2.8 is non-combinatorial; the grammar of example 2.9 is not (the offending rule is the first VP production).",
        "13.3 Definition (left-binding) An LMG G is left-binding when",
        "1.",
        "W.r.t.",
        "argument positions, an item in the RHS of a rule only depends on variables bound in items to its left.",
        "2.",
        "For any vector xi • • • xn of n > 1 variables on the",
        "LHS, each of x1 upto 1 occurs in exactly one item, which is of the form c o I xi.",
        "Furthermore, for each 1 < 1 < k < n the item referring to xi appears left of any item referring to xk.",
        "For example, the following rule is left binding: A(xyz, v) u:B(v) C(v)/x DO y E(u, z) but these ones are not:",
        "because in (a), x is bound right of its use; in (b), the item A(x) is not of the form cp 1 x and in (c), the variables in the vector xyz occur in the wrong order (zxy)• If a grammar satisfies condition 1, then for any derivable string, there is a derivation such that the modus ponens and elimination rules are always applied to the leftmost item that is not a terminal.",
        "Furthermore, the :E rule can be simplified to , G p a :E co J3 a (y[a/ x]) The proof tree in example 2.8 (figure 1) is an example of such a derivation.",
        "Condition 2 eliminates the nondeterminism in finding the right instantiation for rules with multiple variable patterns in their LHS.",
        "Both grammars from section 2 are left-binding.",
        "I 3.4 Definition (left-recursive) An LMG G is left-recursive if there exists an instantiated nonterminal predicate cp such that there is a derivation of cocoa for any sequence of items a.",
        "The following two rules show that left-recursion in LMG is not always immediately apparent:",
        "We now show that the recognition problem for an arbitrary left-binding, non-combinatorial LMG has a polynomial worst-case time complexity.",
        "13.5 Theorem (polynomial complexity) Let G be a LMG of similarity type it that is non-combinatorial, left binding and not left-recursive.",
        "Let m be the maximum number of items on the right hand side of rules in G, and let p be the greatest arity of predicates occurring in G. Then the worst case time complexity of the recognition problem for G does not exceed 0(JGIm(1 + p)nl+m+2P), where n is the size of the input string al a2 • • • an.",
        "Proof (sketch) We adopt the memoizing recursive descent algorithm presented in (Leermakers, 1993).",
        "As G is not left-binding, the terminal words associated with variables occurring in the grammar rules can be fully determined while proceeding through sentence and rules from left to right.",
        "Because the grammar is non-combinatorial, the terminal words substituted in the argument positions of a nonterminal are always substrings of the input sentence, and can hence be represented as a pair of integers.",
        "The recursive descent algorithm recursively computes set-valued recognition functions of the form: ['MO = I ai+1 • • 65} where instead of a nonterminal as in the context-free case, so is any instantiated nonterminal predicate A(bi, , ba).",
        "As b1, , b, are continuous substrings of the input sentence a1a2.",
        "• • an, we can reformulate this as",
        "Where II = 11(A) < p. The arguments i, /1, , and r1, , r are integer numbers ranging from 0 to n – 1 and 1 to n respectively.",
        "Once a result of such a recognition function has been computed, it is stored in a place where it can be retrieved in one atomic operation.",
        "The number of such results to be stored is 0(n) for each possible nonterminal and each possible combination of, at most 1 + 2p, arguments; so the total space complexity is 0(1Gin2+2P).",
        "Much of the extra complication w.r.t.",
        "the context-free case is coped with at compile time; for example, if there is one rule for nonterminal A:",
        "add k2 to result return result The extra effort remaining at parse time is in copying arguments and an occasional extra comparison (the if statement in the example), taking m(1 + p) steps everytime the innermost for statement is reached, and the fact that not 0(n), but 0(n1+2P) argument-value pairs need to be memoized.",
        "Merging the results in a RHS sequence of m items can be done in 0(m(1 + p)nm-1) time.",
        "The result is a set of 0(n) size.",
        "As there are at most 0(IG)n1+2P) results to be computed, the overall time complexity of the algorithm is 0(1G1 m(1 + p)nl+m+2P) ❑ 13.6 Remark If all nonterminals in the grammar are nullary (p = 0), then the complexity result coincides with the values found for the context-free recursive descent algorithm (Leermakers, 1993).",
        "Nullary LMG includes the context-free case, but still allows movement local to a rule; the closure result 3.1 still holds for this class of grammars.",
        "As all we can do with binding and slashing local to a rule is intersection, the nullary LMGs must be precisely the closure of the context-free grammars under finite intersection.",
        "These results can be extended to more efficient algorithms which can cope with left-recursive grammars such as memoizing recursive ascent (Leermakers, 1993).",
        "A very simple improvement is obtained by bilinearizing the grammar (which is possible if it",
        "is left binding), giving a worst case complexity of 0(IG1(1 p)n3+2P)."
      ]
    },
    {
      "heading": "4 Other Approaches to Separation of Movement",
      "text": [
        "A natural question to ask is whether the LMG formalism (for the purpose of embedding in equational specification systems, or eliminating unification as a stage of sentence processing) really has an advantage over existing mildly context-sensitive approaches to movement.",
        "Other non-concatenative formalisms are head-wrapping grammars (HG) (Pollard, 1984), extraposition grammars (XG) (Pereira, 1981) and various exotic forms of tree adjoining grammar (Kroch and Joshi, 1986).",
        "For overviews see (Weir, 1988), (Vijay-Shanker et al., 1986) and (van Noord, 1993).",
        "The most applicable of these formalisms for our purposes seem to be HG and XG, as both of these show good results in modeling movement phenomena, and both are similar in appearance to context-free grammars; as in LMG, a context-free grammar has literally the same representation when expressed in HG or XG.",
        "Hence it is to be expected that incorporating these approaches into a system based on a context-.free front-end will not require a radical change of perspective."
      ]
    },
    {
      "heading": "4.1 Head Grammars",
      "text": [
        "A notion that plays an important role in various forms of Linguistic theory is that of a head.",
        "Although there is a great variation in the form and function of heads in different theories, in general we might say that the head of a constituent is the key component of that constituent.",
        "The head grammar formalism, introduced by Pollard in (Pollard, 1984) divides a constituent into three components: a left context, a terminal head and a right context.",
        "In a HG rewrite rule these parts of a constituent can be addressed separately when building a constituent from a number of subconstituents.",
        "An accurate and elegant account of Dutch cross-serial dependencies using HG is sketched in (Pollard, 1984).",
        "However, we have not been able to construct head grammars that are able to model verb movement, cross-serial dependencies and topicalization at the same time.",
        "For every type of constituent, there is only one head, and hence only one element of the constituent that can be the subject to movement.3"
      ]
    },
    {
      "heading": "4.2 Extraposition Grammars",
      "text": [
        "Whereas head grammars provide for an account of verb fronting and cross-serial dependencies, Pereira, 3However, a straightforward extension of head grammars defined in (Groenink, 1995a) which makes use of arbitrary tu-ples, rather than dividing constituents into three components, is (1) capable of representing the three target phenomena of Dutch all at once and (2) weakly equivalent to a (strongly limiting) restriction of literal movement grammars.",
        "Head grammars and their generalizations, being linear context-free rewriting systems (Weir, 1988), have been shown to have polynomial complexity.",
        "introducing extraposition grammars in (Pereira, 1981), is focused on displacement of noun phrases in English.",
        "Extraposition grammars are in appearance very similar to context-free grammars, but allow for larger patterns on the left hand side of PS rules.",
        "This makes it possible to allow a topicalized NP only if somewhere to its right there is an unfilled trace:",
        "While XG allows for elegant accounts of cross-serial dependencies and topicalization, it seems again hard to simultaneously account for verb and noun movement, especially if the bracketing constraint introduced in (Pereira, 1981), which requires that XG derivation graphs have a planar representation, is not relaxed.4 Furthermore, the practical application of XG seems to be a problem.",
        "First, it is not obvious how we should interpret XG derivation graphs for further analysis.",
        "Second, as Pereira points out, it is nontrivial to make the connection between the XG formalism and standard (e.g. Earley-based) parsing strategies so as to obtain truly efficient implementations."
      ]
    },
    {
      "heading": "5 Conclusions",
      "text": [
        "We have presented the LMG formalism, examples of its application, and a complexity result for a constrained subclass of the formalism.",
        "Example 2.9 shows that an LMG can give an elegant account of movement phenomena.",
        "The complexity result 3.5 is primarily intended to give an indication of how the recognition problem for LMG relates to that for arbitrary context free grammars.",
        "It should be noted that the result in this paper only applies to non-combinatorial LMGs, excluding for instance the grammar of example 2.9 as presented here.",
        "There are other formalisms (HG and XG) which provide sensible accounts of the three movement phenomena sketched in section 1.3, but altogether do not seem to be able to model all phenomena at once.",
        "In (Groenink, 1995b) we give a more detailed analysis of what is and is not possible in these formalisms."
      ]
    },
    {
      "heading": "Future Work",
      "text": [
        "1.",
        "The present proof of polynomial complexity does not cover a very large class of literal movement grammars.",
        "It is to be expected that larger, Turing complete, classes will be formally intractable but behave reasonably in practice.",
        "It is worthwile to look at possible practical implementations for larger classes of LMGs, and investigate the (theoretical and practical) performance of these systems on various representative grammars.",
        "2.",
        "Efficient treatment of LMG strongly depends on the left-binding property of the grammars, which",
        "seems to restrict grammars to treatment of leftward extraposition.",
        "In reality, a smaller class of rightward movement phenomena will also need to be treated.",
        "It is shown in (Groenink, 1995b) that these can easily be circumvented in left-binding LMG, by introducing artificial, \"parasitic\" extraposition."
      ]
    },
    {
      "heading": "Acknowledgements",
      "text": [
        "I would like to thank Jasper Kamperman, Rene Leermakers, Jan van Eijck and Eelco Visser for their en-thousiasm, for carefully reading this paper, and for many general and technical comments that have contributed a great deal to its consistency and readability."
      ]
    }
  ]
}
