{
  "info": {
    "authors": [
      "Annie Foret",
      "Yannick Le Nir"
    ],
    "book": "International Conference on Computational Linguistics",
    "id": "acl-C02-1111",
    "title": "Rigid Lambek Grammars Are Not Learnable from Strings",
    "url": "https://aclweb.org/anthology/C02-1111",
    "year": 2002
  },
  "references": [],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "This paper is concerned with learning catego-rial grammars in Gold's model (Gold, 1967).",
        "Recently, learning algorithms in this model have been proposed for some particular classes of classical categorial grammars (Kanazawa, 1998).",
        "We show that in contrast to classical categori-al grammars, rigid and k-valued Lambek grammars are not learnable from strings.",
        "This result holds for variants of Lambek calculus ; our proof consists in the construction of limit points in each class.",
        "Such a result aims at clarifying the possible directions for future learning algorithms."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "Categorial grammars have been studied in the field of natural language processing, classical (or basic) categorial grammars were introduced in (Bar-Hillel, 1953) ; here we focus on Lambek categorial grammars (Lambek, 1958) to which linear logic introduced by Girard (Girard, 1995) is closely connected.",
        "These grammars are lex-icalized grammars that assign types (or categories) to the lexicon; they are called k-valued, when each symbol in the lexicon is assigned to at most k types; they are also called rigid when 1-valued.",
        "Such k-valued grammars are of particular interest in recent works on learnability (Kanazawa, 1998) (Nicolas, 1999).",
        "The issue of extending Kanazawa's work to other categorial grammars has been raised and has become an active area of research.",
        "In this context, it is important to acquire a good understanding of the properties of the class of grammars in question.",
        "In this paper we consider the following problem, is the class of rigid Lambek grammars learnable from strings.",
        "Learning (in the sense of Gold (Gold, 1967)) in our context is a symbolic issue that may be described as follows.",
        "Let g be a class of grammars, that we wish to learn from examples.",
        "The issue is to define an algorithm, that when applied to a finite set of sentences, yields a grammar in the class that generates the examples; the algorithm is also required to converge.",
        "Formally, let G(G) denote the language associated with grammar G, and let V be a given alphabet, a learning algorithm is a function 0 from finite sets of words in V* to g, such that for G E 9 with G(G) _ (ei)iEN there exists a grammar G' E g and there exists no E N such that : Vn > no G' E 9 with G(G') = G(G).",
        "One good reason to use categorial grammars in a learning perspective is that they are fully lexicalized : the rules are already known, only types assigned to words have to be derived from examples.",
        "The paper is organized as follows.",
        "Section 2 addresses background definition and known results.",
        "We then proceed from one version of Lambek calculus to the other.",
        "Section 3 gives the initial construction and proof for Lambek calculus allowing empty sequences.",
        "Section 4 adresses the construction for Lambek calculus without empty sequence including products.",
        "Section 5 concludes."
      ]
    },
    {
      "heading": "2 Background",
      "text": []
    },
    {
      "heading": "2.1 Categorial grammars",
      "text": [
        "In this section, we introduce basic definitions concerning categorial grammars.",
        "The interested reader may also consult (Casadio, 1988; Retore, 2000; Buszkowski, 1997; Moortgat, 1997) for an introduction or for further details.",
        "Let Y, be a fixed alphabet.",
        "Types.",
        "Types are constructed from Pr (set of primitive types) and three binary connectives / , \\ and • for products.",
        "Tp denotes the set of types.",
        "Pr contains a distinguished type, written S, also called the principal type.",
        "Categorial grammar.",
        "A categorial grammar over Y, is a finite relation G between Y, and Tp.",
        "If < c, A >E G, we say that G assigns A to c, and we write G : c H A.",
        "We give a formulation of Lambek calculus, written L, including products consisting in introduction rules on the left and on the right of a sequent.",
        "For Lambek calculus without products, one simply drops the rules for •.",
        "Lambek Derivation �_ L. The relation �_L is the smallest relation between Tp+ and Tp, such that for all F, F' E Tp+, A, A' E Tp* and for all A,BETp:"
      ]
    },
    {
      "heading": "AI A A,FF- B",
      "text": [
        "A, A, B,A'F- C F[- A I''[-B •l •r A, (A.",
        "B), A' F C I', I'' F (A.",
        "B) When we replace Tp+ by Tp* in F E Tp+ in the definition above, we get another version of Lambek calculus, without the non-empty left hand-side requirement, which we refer to as Lo with derivation relation �_Lm.",
        "Note.",
        "We recall that the cut rule is satisfied by �_L and �_Lm .",
        "Note also that F �-L C implies"
      ]
    },
    {
      "heading": "F �_Lm C",
      "text": [
        "Language.",
        "Let G be a categorial grammar over Y. G generates a string cl ... c,,, E Y,+ ifF there are types A1, ... , A,,, E Tp such that : G : ci H Ai (1 <i < n) and A1i ... , An _ L S. The language of G, written LL(G) is the set of strings generated by G. We define similarly LLm (G) replacing �_ L with �_ Lm .",
        "Notation.",
        "In some sections, we may write simply �- instead of �_L or �_Lm .",
        "We may simply write L(9) accordingly.",
        "Rigid and k-valued grammars.",
        "Categorial grammars that assign at most k types to each symbol in the alphabet are called k-valued grammars; 1-valued grammars are also called rigid grammars.",
        "Example 1 Let Y1 = {John, Mary, likes} and let Pr = {S, N} for sentences and nouns respectively.",
        "Let G1 = {John H N, Mary H N, likes H N \\ (S / N)}.",
        "We get (John likes Mary) E LL(GI) since (N, N \\ (S / N), N �_L S).",
        "G1 is a rigid (or I-valued) grammar.",
        "2.2 Some useful models For ease of proof, in next section we use models of L (or LO) that we now recall : powerset residuated semi-groups (or monoids), a special case of residuated semi-groups (see (Buszkowski, 1997) for details).",
        "Powerset residuated semi-groups and monoids.",
        "Let (M,.)",
        "be a semi-group (.",
        "is associative).",
        "Let P(M) denote the powerset of M. A powerset residuated semi-group over (M'.)",
        "is the structure (P(M), o, �C) such that for",
        "If (M, o) is a monoid (.",
        "is associative, I is a unit that is : Vx E M : Lx = x.I = x), then the above structure is a powerset residuated monoid (it has {I} as unit).",
        "Interpretation.",
        "Given a powerset residuated semi-group OP(M) , o, = , C), an interpretation is a map from primitive types p to elements [[p]] in P(M) that is extended to types and sequences in the natural way",
        "The following known property states that such structures are models for L if F �_L C then [[r]] C [[C]] If (M,.)",
        "is a monoid with an identity I, we add [[A]] = {I} for the empty sequence A and get a similar property for Lo : if F �_Lm C then"
      ]
    },
    {
      "heading": "2.3 Learning and limit points",
      "text": [
        "We now recall some useful definitions and known properties on learning.",
        "Limit points.",
        "A class CL of languages has a limit point ifF there exists an infinite sequence < L,,, >,,,EN of languages in CL and a language L E CL such that : LoCL,... C... CL,,,C... and L = UnEN L,,, (L is a limit point of CL).",
        "Limit points imply unlearnability.",
        "The following property is important for our purpose.",
        "If the languages of the grammars in a class 9 have a limit point then the class g is unlearnable.",
        "1"
      ]
    },
    {
      "heading": "3 Rigid limit points for Lo",
      "text": []
    },
    {
      "heading": "3.1 Construction overview",
      "text": [
        "Definition.",
        "We define the following grammars where p and q are primitive types :",
        "where Del �o) = S and D(l,n) _ (D(l,n-1) / (p / p)) / (q / q)",
        "Language.",
        "We get (see proof) L(G�,,n)) _ c(b*a*)n and L(G�1 �*)) = c(b*a*)* = c{ a, b}*.",
        "Notation.",
        "Let T(1 �n) (and T(1 �*)) denote the type assignment by G�,,n) (by G�1,*) respectively) on {a, b, c} extended on {a, b, c}* to sequences of types in the natural way; we write -r= T(1 �n) on {a, b}* (independant of n > 0)."
      ]
    },
    {
      "heading": "3.2 Corollaries",
      "text": [
        "For the class of rigid Lo-grammars.",
        "- This yields a strictly increasing chain of language of rigid grammars.",
        "- This shows that the class of rigid grammars has infinite elasticity (cf (Kanazawa, 1998) for details).",
        "- This class also has a limit point as follows c{ a, b}* which entails that this class is not learnable from strings.",
        "Other restricted subclasses - The same results hold if we restrict to a bounded order, where the order o(A) is o(p) = 0 when p is/ a/ primitive /type",
        "- this also holds for unidirectional grammars (we do not use \\ )."
      ]
    },
    {
      "heading": "3.3 Details of proofs",
      "text": [
        "Our proof is based both on a syntactic reasoning on derivations, and on models.",
        "Proposition 1 (Language description) L(G�,,n)) = c(b*a*)n and L(G�1,*)) = c{a,b}*.",
        "proof of c(b*a*)n C L(G�I,n)) For n = 0 this is an axiom T(1 �o) (c) = S �- S. Suppose n > 0 and w' = cm E L(G�I,n_1))I - we first show that c.b.a.w E L(G�I,n)) : � Key points.",
        "We use two main key ideas : tautologies of the Lambek calculus allowing empty sequences that ensure one way of type-derivability (D�,,n) �- D(l,n_1)) ; an alternation of two such tautologies that are unrelated (non-interderivable : r (a), -r(b) V -r(a) or r (a), -r(b) V -r(b) although we have r (a), -r(a) �- r (a)), this alternation prevents derivabilities in the other direction (D�j,n_1) V D(,,,,)).",
        "We thus provide a strictly infinite chain of types.",
        "Note that n denotes a bound of these alternations.",
        "'This implies that the class has infinite elasticity.",
        "A class CC of languages has infinite elasticity iff 3 < ei >iEN sentences 3 < L >iEN languages in CC Vi E N .",
        "e; � Li and fell ... ,en} C Lm,+l (see (Kanazawa, 1998) for this notion and a use of it).",
        "q/q�-q/q /l",
        "- we easily get cm E L(G�I,n)) from D(l,n) D(l,n_1) in Lo for n > 0 (more generally C1/(G2/G2)�-G1inL0); - we also get c.a.w E L(G�I,n)) from D(1,n),p / p �- D(l,n-1 (since (D�I,n) � DS1,n-1) / 1p / p) and D(l,n-1) / (p / p),p / p D(l,n-1)) - we then get c.b.w E L(G�i �n)) since",
        "- finally, this is extended to repetitions of each letter a or b separately since -r(a), -r(a) �- -r(a)",
        "and r (b), -r(b) �- -r(b) (if we replace each occurrence of a with a repetition of a or each occurrence of b with a repetition of b we still get an element of the language of G�1,,,)).",
        "proof of L(G�1,,,)) C c(b*a*)n (main part) We consider the standard linguistic interpretation (Buszkowski, 1997) : the powerset residuated monoid (P(V*), o, , C) over the free monoid (V*,.)",
        "where .",
        "is the concatenation operation and V* is the set of strings over the alphabet V = {a, b, c}.",
        "Let us fix n (arbitrary), we define an interpretation as follows : [[S]] = c(b*a*)', [[p]] = a*, [[q]] = b*.",
        "Let us suppose T(1 n) (w) � S. By models, we have [[T�1 n) (w)]] C [[S]].",
        "We first remark that [[p / p]] = a* and [[q / q]] = b* (since",
        "We have thus shown that [[D�1 �n)]] = c. Therefore if [[T�1 �n) (w)]] C_ [[S]] this also means that w = cw' with w' E {a, b}* ; we get c.[[T�1 n) (w')]] C c(b*a*)n = [[S]], that is [[T(l,n) (w')]] C (b*a*)n that corresponds to w' E (b*a*)n as well (since [[T�1 �n) (a)]] _ [[p / p]] = a* and [[T(l,n)(b)]] = [[q / q]] = b*)• proof of c{a, b}* C L(G�1 �*)) - We have c E L(G�1 �*)) since S / (P / P) �_Lm S We now get ca E L(G�1 �*)), since"
      ]
    },
    {
      "heading": "P/PAP/P SAS",
      "text": [
        "proof of L(G�1 �*)) C c{ a, b}* We consider the powerset residuated monoid (P(V*), o, ==>, �C) as above but with the following (similar) interpretation : [[S]] = c{a,b}*, [[P]] = a*, ([[q]] = b*)• Let us suppose T(1 �*) (w) �- S. By models, we have [[raj �*) (w)]] C [[S]].",
        "We have : [[p / p]] = a* We here get : [[S / (p / p)]] = c.{ a, b}* (_ {z E",
        "this also means that w = cw' with w' E {a, b}* as desired ■"
      ]
    },
    {
      "heading": "4 Rigid limit points for L",
      "text": [
        "Key points: We have D(l,n) �_Lm D(l,n-1) but D(1 �n) VL D(1 �n-1).",
        "We then transform the type Of c from T(1 �n) and construct a limit point for L (with products)."
      ]
    },
    {
      "heading": "Construction for L",
      "text": [
        "We define the following types and assignments T(2 �n), where A = p / p, B = q / q and p, q are primitive types : a - -�A; b--�B D�2,n) where D(2 �0) = S and D(2,n) = (((D(2,n-1) / A) .",
        "A) / B) .",
        "B if n>0 Let G(2 �n) denote the grammar defined by T�2,n) with alphabet {a, b, c}.",
        "Let G(2'*) denote the grammar, with type assignment _F(2,*) defined by :",
        "proof of c(b*a*)n C L(G�2,n)) For n = 07 _F(2,0) (c) = S � S. Suppose n > 0 and w' = cm E L(G�2,n_1)) - we first show that c.b.a.w E L(G�2,n)) � �",
        "are straightforward since - we easily get c.w E L(G(2,,,)) since D(2 �n) �- D(2 �n_1) in L for n > 0.",
        "- we also get c.a.w E L(G(2,,,)) from",
        "(since D/2 'n) �- (D(2,n-1) / A) • A and (D(2,n-1) / A) • A, A �- D(2,n-1) ) - we then get cAw E L(G�2 �n)) since",
        "- finally, this is extended to repetitions of each letter a or b separately since r (a), � � � ��- T(a) and r (b), � � � ��- T(b) proof of L(G�2 n)) C c(b*a*)n We first show that D(1,n) �_Lm D(2,n) by induction on n :",
        "- case n = 0 is obvious since D(1,o) = D(2,o) = S - case n > 0 : we recall that A = p / p, B = q / q are tautologies of LO; by induction : D(1,n-1) �_Lm D(2,n-1) we then get in Lo :",
        "previous property, therefore w E c(b*a*)n from proposition 1 as desired.",
        "proof of c{a, b}* C L(G�2,*)) - We have c E L(G�2 �*)) since (S / A) • A �_L S We also get ca E L(G�2 *)), and similarly for ca* or c{ a, b}* since A, A �_L A (where A = P/P)• proof of L(G�2 �*)) C c{ a, b}* This part follows from the construction for Lo since T(1 �*) (c) �_Lm T(2 *) (c) as follows :",
        "S/A�_LO (S/A).A hence -r(1 �*) (w) �_Lm T(2 *) (w) and T(2 *) (w) �L S implies T�1 *) (w) �Lm S ■"
      ]
    },
    {
      "heading": "5 Conclusion and remarks 5.1 Non-learnability for subclasses.",
      "text": [
        "From the constructions in previous sections we get the following proposition as a corollary : Proposition 3 (non-learnability) The class of languages of rigid (or k-valued for an arbitrary k) Lambek grammars admits a limit point ; the class of rigid (or k-valued for an arbitrary k) Lambek grammars is not learnable from strings.",
        "Note.",
        "Our result has shown that in contrast to classical categorial grammars, rigid and k-valued Lambek grammars are not learnable from strings.",
        "This result holds for variants of Lambek calculus : (i) rigid Lambek grammars for Lo (allowing empty sequence) using only / (unidirectional) ; (ii) rigid Lambek grammars for L (with the non-empty left requirement) using ( / , •) .",
        "Our proof consists in the construction of limit points in each class : for (i) and (ii) we have c{ a, b}* as limit point that are indeed rigid lambek grammars as already shown.",
        "In the first construction, we may also consider grammars of a bounded order."
      ]
    },
    {
      "heading": "5.2 Further remarks.",
      "text": [
        "A stricly infinite chain of types.",
        "In each construction, the types Dn = DMZ �n) for c are such that : ... �- Dn �- Dn-1 �- ... �- Do.",
        "This is the key point for the inclusion of languages.",
        "Moreover Dn-1 V Dn, which is reflected by the strictness of inclusion of languages.",
        "Our construction has thus exhibited a stricly infinite chain of types with respect to deduction for each version of Lambek calculus.",
        "Future work.",
        "We are also interested in other variants of categorial grammars, such as the non-associative version of Lambek calculus or Multi-modal categorial grammars for which the construction of rigid limit points could be extended.",
        "We also plan to consider not only the string languages but some structure languages in a grammatical inference perspective.",
        "In (Bona-to and Retore, 2001), it has been shown that rigid Lambek grammars are learnable in the limit from stuctured sentences.",
        "Such structures, that are studied in (Tiede, 1999), are complete proof tree structures in normal forms.",
        "In our result, we show that, without any structure, some classes of Lambek grammars are not learnable in the limit from positive examples.",
        "It will now be very interesting to find an intermediate structure, that is more linguistically realistic than complete proof tree structures but that preserves the learnability in the limit of Lambek grammars."
      ]
    }
  ]
}
