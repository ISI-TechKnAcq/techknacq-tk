{
  "info": {
    "authors": [
      "William C. Rounds"
    ],
    "book": "Computational Linguistics",
    "id": "acl-J88-4001",
    "title": "LFP: A Logic for Linguistic Descriptions and an Analysis of Its Complexity",
    "url": "https://aclweb.org/anthology/J88-4001",
    "year": 1988
  },
  "references": [
    "acl-P85-1011",
    "acl-P85-1015"
  ],
  "sections": [
    {
      "heading": "LFP: A LOGIC FOR LINGUISTIC DESCRIPTIONS AND AN ANALYSIS OF ITS COMPLEXITY",
      "text": [
        "We investigate the weak expressive power of a notation using first-order logic, augmented with a facility for recursion, to give linguistic descriptions.",
        "The notation is precise and easy to read, using ordinary conventions of logic.",
        "Two versions of the notation are presented.",
        "One, called CLFP, speaks about strings and concatenation, and generates the class EXPTIME of languages accepted by Turing machines in time rn for some c> 0.",
        "The other, called ILFP, speaks about integer positions in strings, and generates the class PTIME of languages recognizable in polynomial time.",
        "An application is given, showing how to code Head Grammars in ILFP, showing why these grammars generate only polynomial time languages."
      ]
    },
    {
      "heading": "1 FIRST-ORDER LOGIC AS A TOOL FOR SYNTACTIC DESCRIPTION",
      "text": [
        "In this paper we investigate the properties of a new notation for specifying syntax for natural languages.",
        "It is based on the simple idea that first-order logic, though inadequate as a semantics for natural language, is quite adequate to express relations between syntactic constituents.",
        "This is the insight behind definite clause grammars (DCGs) (Pereira and Warren 1980) and, in fact, our notation is in some ways a generalization of that notation.",
        "However, we have tried to keep our formalism as much as possible like that of standard textbook first order logic.",
        "There are actually two versions of our notation.",
        "The first works with strings of symbols and uses concatenation as a primitive operation.",
        "The second works with integers and takes the standard arithmetic operations as primitive.",
        "These integers can be regarded as indexing positions of morphemes in a sentence, but the sentence itself is not explicitly referenced.",
        "Both versions allow the recursive definition of predicates over strings and integers.",
        "This capacity for recursive definition is what gives our grammars their generative ability, and our notation has this feature in common with DCGs.",
        "However, we liberate DCGs from the Horn clause format, and we do not base the semantics of our notation on the semantics for Prolog or for logic programs.",
        "We hope that making the logic more familiar and readable will encourage more people to use logic as a means for specifying desired syntactic relations between sentential constituents in grammars.",
        "Anyone knowing the standard conventions of first-order logic should be able to read or to specify a grammar in our notation.",
        "We also provide a precise semantics for our two notations.",
        "This involves using the least-fixed-point operator from denotational semantics for programming languages to explain the recursive definition of predicates.",
        "It involves as well using restricted universal and existential quantification to restrict the class of definable predicates (sets of strings).",
        "We prove a complexity theoretic characterization for both grammar formalisms: (1) the formalism using strings and concatenation defines exactly the class EXPTIME of formal languages recognizable by deterministic Turing machines within time T(n) = 2\" for some positive c; and (2) the formalism using integers defines exactly the class PTIME of languages recognizable in time T(n) = nk for some integer k. As an application of the second notation we sketch a natural way to write Head Grammars (Pollard 1984).",
        "Because these grammars can be expressed in this way, we immediately obtain the result that head languages can be recognized in polynomial time.",
        "We even obtain an estimate of the degree of the polynomial that is required, derived directly from the form of the grammatical description.",
        "Unfortunately, the estimated degree is at least twice as large as is actually necessary if one uses the algorithm of Pollard (1984), or Vija-Copyright 1988 by the Association for Computational Linguistics.",
        "Permission to copy without fee all or part of this material is granted provided that the copies are not made for direct commercial advantage and the CL reference and this copyright notice are included on the first page.",
        "To copy otherwise, or to republish, requires a fee and/or specific permission.",
        "0362-613X1 88 /01001-9$03.00 Computational Linguistics, Volume 14, Number 4, December 19881 William C. RoundsLFP: A Logic for Linguistic Descriptions and an Analysis of its Complexity yashanker and Joshi (1985).",
        "We conjecture that in fact, this factor of (2) can be removed.",
        "Our complexity theoretic characterizations are versions of theorems already appearing in the literature.",
        "Shapiro (1984) characterizes the class of languages definable by logic programs with a linear space restriction as the class EXPTIME.",
        "The proof of our first theorem is very much like his.",
        "Our second theorem characterizing PTIME can be viewed as a specialization of the results of Chandra and Harel (1982), Immerman (1982), and Vardi (1982), who show that the class of sets of finite mathematical structures definable by formulas of first-order logic augmented with a least-fixed-point operator is just the class of sets of structures recognizable in polynomial time.",
        "We prove both of our results in the same way, and thus show how these apparently unconnected theorems are related.",
        "The proof uses the notion of alternating Turing machines, and thereby explains the significance of this idea for the science of formal linguistics.",
        "We should also note that our notation will not find immediate application in current linguistic theory, because it does not allow structural descriptions to be described.",
        "We are in the process of extending and modifying the notation for this purpose.",
        "However, we think it is important to explicate the properties of the individual operations used in building strings and structures.",
        "Our first attempt is therefore to understand how concatenation of strings can be expressed in a restricted logic.",
        "We can then consider other predicates or functions on both strings and treelike structures in the same uniform way."
      ]
    },
    {
      "heading": "2 CLFP GRAMMARS: GRAMMARS BASED ON CONCATENATION THEORY 2.1 SYNTAX OF CLFP",
      "text": [
        "We present a standard version of the first-order theory of concatenation, augmented with the least-fixed-point operator.",
        "Before proceeding with the formal description, we give an example to illustrate the scheme we have in mind.",
        "Consider the following context-free fragment, adapted directly from Johnson (1985).",
        "Here is the corresponding CLFP fragment:",
        "In this formulation, x,y, and z range over strings of symbols (morphemes) and NP,VP, etc.",
        "are predicates over strings.",
        "The second clause is here an abbreviation for two clauses, where case can take two values, namely +Gen and Gen. At present we do not treat the problem of calculating complex feature structures, but there seems to be no reason that the notation cannot be suitably extended.",
        "This example illustrates the most complex case of a CLFP formula.",
        "It is a recursion scheme, which assigns to predicate variables, S,NP, etc.",
        "certain formulas (the right-hand sides of the corresponding clauses in the definition).",
        "The whole scheme is understood as the simultaneous recursive definition of the predicate variables in the left sides of the definition.",
        "To handle the fact that string variables occur on the left-hand side of each clause, we will understand each clause as a function assigning both the formula on its right and the set of individual variables mentioned on the left to the given predicate symbol.",
        "We now proceed with the formal definition of CLFP.",
        "Let Ivar be a set {x0,x1, .",
        ".",
        ".}",
        "of individual variables ranging over strings.",
        "Let Z be a finite set of terminal symbols.",
        "These are the constants of our theory.",
        "A is another constant denoting the null string.",
        "Terms are built from variables and constants using the binary operation of concatenation.",
        "We also require a set Pvar of predicate variables, listed as the set {PI,P2, .",
        ".1.",
        "Each predicate variable P is equipped with an arity ar(P), indicating the number of individual arguments that a relation assigned to this variable will have.",
        "(The example CLFP scheme given above employs only unary predicate variables S,NP,VP, and Det.)",
        "The set of CLFP formulas is given by the following inductive clauses.",
        "1.",
        "If P E Pvar and (x1, .",
        ".",
        ".,x,z) is a sequence of Ivar with length n = ar(P) then P(xl, .",
        ".",
        ".,xn) is in CLFP; 2.",
        "If t1 and t2 are terms, then t1 = t2 is in CLFP; 3.",
        "If x E Ivar and is in CLFP then 3x4) and Vx4) are in C:LFP;",
        "William C. RoundsLFP: A Logic for Linguistic Descriptions and an Analysis of its Complexity S(x) <=> 3y((x = ay A (S(y)) V (x = by A 7'(y))) V x = a T(v) .4#) 3w(v = cw A S(w)).",
        "In this example, a = {S, 7}, /34)(S) = {x}, and",
        "Similarly, 13(1)(T) = {v}, and C4)(T) is the second formula in the scheme.",
        "In the example, we have written our recursion scheme in a conventional style to emphasize its direct connection to the usual grammatical presentations.",
        "Thus the variable x is bound by the left-hand side of (1), so this clause has been written with S(x) on the left to make this fact apparent.",
        "Also, the use of the .",
        ":=> sign is conventional in writing out 4).",
        "In our example, the first clause is taken as defining the distinguished predicate S of our scheme.",
        "Finally, there are no occurrences of free predicate variables in this example, but there are in our first example (e.g., noun).",
        "The usual rules for calculating free individual variables apply; if Fvar(0) is the set of free variables of (I), then FIvar(P(xi, .",
        ".",
        ".,x))= {x1, .",
        ".",
        ".,x,J.",
        "The quantifier and Boolean cases are handled as in standard text presentations.",
        "However, if 4) is a recursion scheme then Flvar(ASO) will be calculated as follows.",
        "For each R E Wt., find Fvar(OP(R)).",
        "Remove from this set any variables in 13(1)(R).",
        "The union of the resulting sets for each R E gt is defined to be the set Fivar(AS4)).",
        "The rules for free predicate variables are a bit simpler.",
        "In the atomic formula P(xi, .",
        ".",
        ".,x,,), P is a free predicate variable.",
        "In a recursion scheme 4) with domain a, the set FPvar(i.tS4))) is the union of the sets FPvar(kLS4)(R))), minus the set a.",
        "A final remark on notation: we will use the notation .,t,i) to stand for the formula 3x1 .",
        ".",
        ".",
        "3x(4)(x1, .",
        ".",
        ".,x,,) A xi = t1 A .",
        ".",
        ".",
        "A x,, = tn) where the ti are terms, and the xi are individual variables not appearing in any ts.",
        "This will not affect our complexity results in any way."
      ]
    },
    {
      "heading": "2.2 SEMANTICS FOR CLFP",
      "text": [
        "We borrow some notation from the Oxford school of denotational semantics to help us explain the meaning of our logic grammars.",
        "If X and Y are sets, then [X > Y] is the set of functions from X to Y.",
        "Let A = [Ivar be the set of assignments of values to individual variables.",
        "We wish to define when a given assignment, say a, satisfies a given CLFP formula 4).",
        "This will depend on the meaning assigned to the free predicate variables in 0, so we need to consider such assignments.",
        "Let PA be the set of maps p from Pvar to the class of relations on I,* such that the arity of p(P) is ar(P).",
        "We are now ready to define for each formula 4, and predicate assignment p, the set Aticfillp C A of individual assignments satisfying with respect to p.",
        "1.",
        "AtIP(xi, .",
        ".= {a I (a(x1), .",
        ".",
        ".,a(x)) E p(P)}; 2.",
        "Atit, = t2lIp = {a I tia = t2a}, where ta is the evaluation of t with variables assigned values by a; 3.",
        ".A43x4)1p = {a I 3u E /* : a(x1u) E NON, and similarly for universal quantification; 4.",
        ".MIOVIMP = Atid&U.R[Iap, and similarly for other Boolean connectives.",
        "5.",
        "Atip,S4)1p = {a I (3k)( E Atl[C4)k(S)1p)}",
        "where, for each k, 4)1( is a recursion scheme with the same domain k as 4), and is defined as follows by induction on k. First, we stipulate that for each P E 91, the set BV(P) = 13(1)(P).",
        "Then we set",
        "where the notation (KRO(R) : R E a] denotes the simultaneous replacement of atomic subformulas R(wi, .",
        ".",
        ".,wk) in A (where R is a free occurrence) by the formula 0(R)(w1, .",
        ".",
        ".04/k), in such a way that no free occurrences of other variables in O(R) are captured by a quantifier or a woperator in 1/.. (We may always change the bound variables of tp first, to accomplish this.)",
        "This definition appears much more clumsy than it really is, and we continue our example to illustrate it.",
        "Refer to the example of a regular grammar in the previous section.",
        "In the clause for S we are required to substitute the formula FALSE for occurrences of both S and T. This gives, after simplification,",
        "It is easy to see that continuing this process will simulate all possible derivations in the grammar, and also that it explains the meaning of the scheme 4) in terms of the meaning of subformulas.",
        "Some remarks are in order to explain why we use the term \"least-fixed-point\", and to explain why, in a recursion scheme, all occurrences of recursively called predicates are required to be positive.",
        "Let 4) : 9k > CLFP be a recursion scheme.",
        "Define the map nil PA > PA as follows.",
        "If R E a, then",
        "where (xl,.,x) is the sequence of variables in 111(1)(R), listed in increasing order of subscripts.",
        "If R 01, then 714)11p(R) = p(R).",
        "Next, let ThAROlp = U 7[[0]](k)(p[R 0 : R E 1 Computational Linguistics, Volume 14, Number 4, December 19883 William C. RoundsLFP: A Logic for Linguistic Descriptions and an Analysis of its Complexity where unions are coordinatewise, Pk) is the k-th iterate of F, and p[R 0 : R E 2/ti is p with the empty relation assigned to each predicate variable in R. This formula is just the familiar least-fixed-point formula Lk>, Pk)(1) from denotational semantics.",
        "Then we can check that 11i.LS(1)1p is in PA, and is the least fixed point of the continuous map It is then possible to prove that AAFASOlp = (71[AS(11p)(S) where S is the distinguished predicate variable in R. If we had no conditions on negative formulas in recursion schemes, then we could entertain schemes like",
        "which, although they would receive an interpretation in our first definition, would give a T which was not continuous, or even monotonic.",
        "We therefore exclude such cases for reasons of smoothness.",
        "Next we come to the definition of the language or relation denoted by a formula.",
        "A k-ary relation P on 1* is said to be definable in CLFP if there is a CLFP formula 4) with no free predicate variables such that (u1, .",
        ".",
        "E P <=> 3 E .A4401:(a(x1), .",
        ".",
        ".,a(x k)) = (u1, .",
        ".",
        ".,uk), where x1, .",
        ".",
        "Xi, is the list of free variables in arranged in increasing order of subscript.",
        "(Notice that the parameter p has been omitted since there are no free predicate variables in 4).)",
        "So far, we have not restricted quantification in our formulas, and every r.e.",
        "predicate is definable.",
        "We need to add one other parameter to the definition of A, which will limit the range of quantification.",
        "This will be an integer n, which will be the length of an input sentence to be recognized.",
        "The occurrences of the formula .114[44p will thus be changed everywhere in the above clauses to .M[M]pn.",
        "The only change in the substance of the clauses is in the rule for existential and universal quantification.",
        "A predicate P is said to be boundedly definable iff for some 4): 011, .",
        ".",
        "E P <=> 3a E At[Min : (a(x1), .",
        ".",
        ".,a(xd) = (u1, .",
        ".",
        ".,uk) where n = max(luil).",
        "(To abbreviate the right-hand condition, we write (u1, .",
        ".",
        ".",
        ",uk) 0).",
        "Our first theorem can now be stated.",
        "Theorem 1.",
        "A language (unary predicate) is boundedly definable in CLFP if it is in EXPTIME.",
        "We defer the proof to the next section."
      ]
    },
    {
      "heading": "3 EXPTIME AND CLFP",
      "text": []
    },
    {
      "heading": "3.1 ALTERNATION",
      "text": [
        "Before proving Theorem 1, we need to discuss the method of proof both for this result and for the Integer LFP characterization of PTIME in the next section.",
        "This material is repeated from the fundamental article of Chandra, Kozen, and Stockmeyer (1981).",
        "Their paper should be consulted for the full details of what we state here.",
        "An alternating Turing machine can be regarded as a Turing machine with unbounded parallelism.",
        "In a given state, and with given tape contents, the machine can spawn a finite number of successor configurations according to its transition rules.",
        "These configurations are thought of as separate processes, each of which runs to completion in the same way.",
        "A completed process is one which is in a special accepting state with no successors.",
        "The results of the spawned processes are reported back to the parent, which combines the results to pass on to its own parent, and so forth.",
        "How the parent does this depends on the state of the finite control.",
        "These states are classified as being either existential (OR), universal (AND), negating (Nor), or accepting.",
        "If the parent is in an existential state, it reports back the logical OR of the results of its offspring.",
        "If it is in a universal state, it reports back the logical AND; if the state is negating, the parent reports the negation of its one offspring.",
        "An accepting state generates a logical 1 (TRUE) to be reported back.",
        "Thus a nondeterministic TM can be regarded as an alternating TM with purely existential states.",
        "An alternating TM is defined as a tuple in a standard way.",
        "It has a read-only input tape with a head capable of two-way motion.",
        "It also has a fixed number of work tapes.",
        "The input tape contains a string u E 1*, while the work tapes can use a tape alphabet F. The transition relation 8 is defined as for ordinary nondeterministic TMs.",
        "The state set is partitioned as described above into universal, existential, negating, and accepting states.",
        "The relation 6 is constrained so that existential and universal states have at least one successor, negating states have exactly one successor, and accepting states have no successors.",
        "A configuration is then just a tuple describing the current state, positions of the heads, and tape contents as is familiar.",
        "The initial configuration is the one with the machine in its initial state, all the work tapes empty, and the input head at the left end of the input u.",
        "The successor relation '- between configurations is defined again as usual.",
        "To determine whether or not a configuration is accepting, we proceed as follows.",
        "Imagine the configurations that succeed the given one arranged in a tree, with the given configuration at the root.",
        "At each node, the immediate descendants of the configuration are the successors given by F. The tree is truncated at a level determined by the length of the input tape (this truncation is not part of the general definition but will suffice for our results.)",
        "The leaf nodes of this tree are labeled with (0) if the configuration at that node is not accepting, and with (1) if the configuration is accepting.",
        "The tree is then evaluated according to the description given above.",
        "The configuration at the root is accepting iff it is labeled (1) by this method.",
        "Thus an input is accepted by 4Computational Linguistics, Volume 14, Number 4, December 1988 William C. RoundsLFP: A Logic for Linguistic Descriptions and an Analysis of its Complexity the machine iff the initial configuration with that input is accepting.",
        "In our application, it will always suffice to cut off the tree at level 2c\", where n is the length of the input string, and c is a positive constant depending only on the description of the machine.",
        "We say that an alternating TM is S(n) space bounded iff in the above tree, for any initial configuration labeling the root, no auxiliary tape length ever exceeds S(n) where n is the length of the input.",
        "We are concerned only with the functions S(n) = log n and S(n) = n in this paper.",
        "We let the class ASPACE(S(n)) be the class of languages accepted by space-bounded ATMs in this way.",
        "We then have the following theorem (Chandra, Kozen, Stockmeyer 1987):",
        "where DTIME(T(n)) is the class of languages accepted deterministically by ordinary Turing machines within T(n) steps.",
        "Our problem in the rest of this section is to show how linear space bounded ATMs and CLFP grammars simulate each other.",
        "To facilitate the construction of the next section, it is convenient to add one feature to the definition of alternating Turing machines.",
        "Let U be the name of a k-ary relation on I.",
        "We allow machines to have oracle states of the form U?",
        "(il, .",
        ".",
        ",ik), where the if are tape numbers.",
        "If now the predicate U is interpreted by an actual relation on I*, then when M executes such an instruction, it will accept or reject according to whether the strings on the specified tapes are in the relation U.",
        "We will need such states to simulate recursive invocations of recursion schemes.",
        "It is not hard to modify the definition of acceptance for ordinary ATMs to that for oracle ATMs.",
        "The language or relation accepted by the ATM will now of course be relative to an assignment p of relations to the predicate names U.",
        "The next subsections contain our constructions for the CLFP characterizations.",
        "Then, in Section 4 we will treat Integer LFP grammars and show how these grammars and logspace bounded ATMs simulate each other.",
        "As a consequence of the above lemma, we will then have our main results."
      ]
    },
    {
      "heading": "3.2 PROOF OF THEOREM 1",
      "text": [
        "Our first task is to show that if a language L is (boundedly) CLFP-definable, then it can be recognized by a linear space bounded ATM.",
        "The idea is simple.",
        "Given an input string, our machine will try to execute the logical description of the grammar.",
        "Its states will correspond to the logical structure of the CLFP formula.",
        "If that formula is, for example, the logical AND of two subformulas, then the part of our machine for that formula will have an AND state.",
        "A recursion scheme will be executed with states corresponding to the predicate variables involved in the recursion, and so forth.",
        "To give an explicit construction of an ATM cone-sponding to a formula 4) of CLFP we need to be precise about the number of work tapes required.",
        "This will be the sum of the number of free individual variables of 0, and the number of \"declarations\" of bound variables in 4).",
        "A \"declaration\" is either the occurrence of a universal or existential quantifier in 4), or one of the individual variables bound on the left side of a (non-S) clause in a recursion scheme.",
        "If that clause defines the predicate R, then the number of variables declared at that point is ar(R) = IBlo(R)1.",
        "We thus define the number OW of declarations of bound variables in by induction as follows:",
        "The number yorp) counts the maximum number of tapes needed, and is defined to be 13(0) + IFivar(0)1 + 1.",
        "We can now state the inductive lemma which allows the construction of ATMs.",
        "Lemma 2.",
        "Let 4) be a CLFP formula, with IFIvar(4))1 = k, and T:Flvar(4)) > {1, .",
        ".",
        "Let m = y(4)).",
        "Then we may construct an m-tape ATM M(d),T) having the following properties: (i) M has oracle states P?",
        "for each free predicate variable of 0, and (ii) For any a:Flvar(0) > 1*, and any environment p, we have the following.",
        "Let n = max{la(x1)1}.",
        "Then M with oracle states for the p(P), started with a(x1) on tape T(x,), .",
        ".",
        "., and a(xk) on tape T(xk), and the other tapes blank, will accept without ever writing more than n symbols on any tape, if and only if <a(x,), .",
        ".",
        ".,a(x)) E Aft,k/Ajpn.",
        "Proof: This lemma formalizes the intuitive idea, stated above, that to calculate the membership of a string x in the language defined by a recursion scheme, it suffices to execute the scheme recursively.",
        "The full proof would use the formal definition of the semantics of ATMs, which themselves are given by least-fixed-point definitions.",
        "We have chosen not to give the full proof, because the amount of explanation would be overwhelming relative to the actual content of the proof.",
        "Instead we give a reasonably complete account of the inductive construction involved, and illustrate with the regular set example of the previous section.",
        "To start the induction over formulas 0, suppose that 4) is R(xi, .",
        ".",
        ".,xk).",
        "Then we may take M to be a machine with k = y(rt.)",
        "tapes, with one oracle state P, and the single instruction P?",
        "(T(x,), .",
        ".",
        ".,T(xk)).",
        "If 4) is t, = t2, then we let M be a simple machine evaluating t, and t2, using perhaps an extra tape for bookkeeping.",
        "It does a letter-by-letter comparison, so that it never has to copy more than the maximum length of any one tape.",
        "If 4) is 0, then mcp) consists of adding a negating Computational Linguistics, Volume 14, Number 4, December 19885 William C. RoundsLFP: A Logic for Linguistic Descriptions and an Analysis of its Complexity state before the initial state of MOO, and transferring control to that initial state.",
        "If ch is V 02, we construct MI and M2 by inductive hypothesis.",
        "Then M(4,) is constructed by having disjoint instruction sets corresponding to each Mi, prefixed by an OR state which transfers control to either of the two formerly initial states.",
        "The free individual 'variables of the disjunction are those occurring free in either disjunct.",
        "Let T be an assignment of tapes to the free variables of the disjunction.",
        "Then we construct MI with a T1 such that Ti(x) = T(x), and similarly for M2, where x is a free individual variable.",
        "Otherwise, any tapes referenced in MI are distinct from any tapes referenced in M2.",
        "In other words, the machine M has shared storage for the free variables, and private storage for variables bound in either disjunct.",
        "The oracle states in the two pieces of code are not made disjoint, however, because a predicate variable is free in the disjunction iff it is free in either disjunct.",
        "It is clear that the number of tapes of the 4', V tp, is just -y(01 For the case of =iii, A 4/2, we make exactly the same construction, only using an AND state as the new initial state.",
        "If 4, is 3x4', and T is a tape assignment for the free variables of 4', then we construct MOO using the extended tape assignment which assigns a new tape k + 1 to the variable x, and otherwise is the same as T. Now M is constructed to go through an initial loop of existential states, which fills tape k + 1 with a string no longer than the maximum length of any string on tapes 1 through k. It then transfers control to the initial state of M(0).",
        "The same construction is used for the universal quantifier, using an initial loop of universal states.",
        "Finally, we need to treat the case of a recursion scheme bL,S11.",
        "Suppose that (I) has domain gt, and let T be a tape assignment for /./S41).",
        "For each clause C4)(Q), where Q E It, we construct a machine M(Q) by inductive hypothesis.",
        "The global free variables of each M(Q) will have tapes assigned by T. However, we construct the M(Q) all in such a way that the local tape numbers do not overlap the tape numbers for any other M(R).",
        "This procedure will give tape numbers to all the variables in the set 134)(Q).",
        "Let this set be .",
        ".",
        ".,41 in increasing order.",
        "Define TQ(zi) to be the tape assigned to zi in M(Q).",
        "The machine M(AS(I)) will consist of the code for the M(Q), arranged as blocks; the initial state of each such block will be labeled Q.",
        "In all the blocks, recursive oracle calls to Q?",
        "will be replaced by statements transferring control to Q.",
        "Thus, consider an oracle call Q?",
        "(ii, .",
        ".",
        ".,ik), in any block M(R).",
        "Replace this call by code which copies tape i1 to tape Tazi), .",
        ".",
        "and tape ik to tape TQ(zk).",
        "Insert code that empties all other tapes local to M(Q), and insert a statement \"go to Q.\" This completes the construction, and we now illustrate it with an example.",
        "Consider the recursion scheme introduced in the first section.",
        "S(x)> 3y((z = ay A (S(y)) V (x = by A RY))) V x = a T(v) .",
        "(=> 3w(v = cw A S(w)).",
        "We construct the machine M(S) as follows:'",
        "q6: copy tape 2 to tape 3; empty tape 4; go to T. q7: check x = a and accept or reject.",
        "T: guess a w on tape 4 no longer than v on tape 3; go to (q9 and q10); q9 : Check v = cw on tapes 3 and 4, and return appropriately; q10: copy tape 4 (w) to tape 1; empty tape 2; go to S.",
        "William C. RoundsLFP: A Logic for Linguistic Descriptions and an Analysis of its Complexity As we remarked, we cannot give a full proof of the correctness of our construction.",
        "However, the construction does correspond to the formal semantics of CLFP.",
        "In particular, the semantics of recursion corresponds to the iterated schemes (bk .",
        "Iterating the scheme k times roughly corresponds to developing the computation tree of the ATM to k levels, and replacing the oracle states at the leaves of the k-level tree with rejecting states corresponds to substituting FALSE into the kth iteration.",
        "With these remarks, the proof is complete.",
        "Lemma 3.",
        "Suppose L is accepted by a S(n) = n-bounded ATM.",
        "Then there is a CLFP formula 4) such that for all u C1*, we have u C L <=> u 1 4).",
        "Proof: We may assume that M is an ATM with one work tape, if we allow M to print symbols in an auxiliary tape alphabet F. By a result in Chandra, Kozen, and Stockmeyer (1981) M has no negating states.",
        "We show how to construct a formula 4), which has constants ranging over F, but which has the property stated in the conclusion of the lemma: for each string x over /, M accepts x iff x 4).",
        "The formula 4) will be given as a recursion scheme AA).",
        "Each state q of M will become a binary predicate variable q(x,y) in gt.",
        "The meaning of q(u,v), where u and v are specific strings in F*, is that M is in state q, scanning the first symbol of v, and that u and v are the portions of the work tape to the left and the right of the head, respectively.",
        "We give a perfectly general example to illustrate the construction of (1).",
        "In this example, the tape alphabet F is fa,b1.",
        "Suppose that q is a universal state of M and that 8(q,a) = {(r,b,right),(s,a,left)}, and 8(q,b) = {(p,b,left),(q,a,right)}.",
        "Then (1)(q)(x,y) is the following formula: A vwtRx = wo- A y = at r(xb,t) A s(w 00720) alEfa,b1 A(x = wo- A y = bt p(w,crbt) A q(xa,t))] The distinguished element of gt is go, the start state of M. Notice that all predicate variables in R occur positively in (I), and that the search for w and t is limited to strings no longer than the length of the original input to M. If q is an accepting state of M, then we have a clause in (I) of the form q(x ,y) .",
        "(=> TRUE, where TRUE is some tautology.",
        "Technically speaking, the explicit substitutions r(xb,t) are not allowed in our formulas, but these can be expressed by suitable sentences like (3z)(z = xb A r(z,t)), as remarked in the first section.",
        "The cases for q(x,y) when x and y are null must also be handled separately because M fails if it tries to leave the original region.",
        "Finally, we can obtain a formula over the constant alphabet by a more complicated construction.",
        "If we encode F into / by a homomorphic mapping, then a machine N can be constructed to simulate M. N will have tape alphabet 1, but will have a number n of work tapes bounded linearly by the constant involved in the encoding.",
        "We now make a formula corresponding to N, but the predicates will have to be 2n-ary, one pair of arguments for each tape of N. With these remarks, the proof of the lemma is complete.",
        "Theorem 1 follows immediately from the above lemmas."
      ]
    },
    {
      "heading": "4 ILFP: GRAMMARS WITH INTEGER INDEXING",
      "text": []
    },
    {
      "heading": "4.1 SYNTAX OF ILFP",
      "text": [
        "Our characterization of the defining power of CLFP relied on the result EXPTIME = ASPACE(n).",
        "We also know that PTIME = ASPACE(log n).",
        "Is there a similar logical notation that gives a grammatical characterization of PTIME?",
        "This section is devoted to giving an affirmative answer to this question.",
        "As stated in the introduction, this result is already known (Immerman 1982, Vardi 1982), but the result fits well with the CLFP theorem, and may in the linguistic domain have some real applications other than ours to Head Grammars.",
        "To explain the logic, it helps to consider acceptance by a logspace bounded ATM.",
        "In this case, the machine has a read-only input tape, which can be accessed by a two-way read head.",
        "Writing is strictly disallowed on the input tape, in contrast to the linear space bounded ATMs of the previous section.",
        "There is also a number k of work tapes on which computation occurs.",
        "Suppose that these work tapes use a binary alphabet.",
        "If their size always is less than or equal to rlog2 ni, then they are always capable of representing the numbers from 0 through n 1.",
        "We thus think of the contents of the work tapes as indices of specific positions in the read-only input string, though in fact they may not serve this purpose in an arbitrary computation.",
        "Since the input is off-line, substrings of the input will not be quantified.",
        "Instead, we quantify over the integer subscripts, and the input simply becomes a global parameter appearing in the semantics.",
        "Instead of having equations between strings as atomic formulas, we will have equations between integer terms.",
        "In order to access the input, we will have, for each symbol a E 1,, an atomic predicate symbol a(i) of one argument, which will be true iff in the given input x, the symbol x(i) at position i is a.",
        "(We number the positions from 0 through n 1).",
        "We allow individual constant symbols 0,1, and last, which will be interpreted as 0, 1, and n 1, respectively, when the input has size n. As primitive arithmetic operations we allow addition and subtraction, and multiplication and integer division by 2.",
        "All of these operations are interpreted modulo n when the input is given.",
        "We need not give the formal definition of ILFP formulas, as it is the same as for CLFP, except that individual variables come from a set fio,ii , .",
        ".",
        ".1, terms are formed as above from arithmetic combinations of individual variables and constants, and the unary predicates a(i) are atomic formulas.",
        "Example 2.",
        "Consider the CFG S > aSb I bSa I SS I ab I ba Computational Linguistics, Volume 14, Number 4, December 19887 William C. RoundsLFP: A Logic for Linguistic Descriptions and an Analysis of its Complexity This is represented in ILFP as follows: S(i,j) .",
        "(=> a(i) A S(i + 1j 1) A b(j) V b(i) A + 1 j 1) A a(j)",
        "(Again, the explicit substitution of terms for variables is not officially allowed but can be introduced by definition.)",
        "The meaning of the above scheme should be clear.",
        "The predicate S(ij\") is intended to mean that node S dominates positions i through j in the input.",
        "Thus the assertion S(0,1ast), with no free variables, will be satisfied by a string x iff x is generated by the given CFG.",
        "The relation of this descriptive formalism to the CKY algorithm for context-free recognition should also suggest itself.",
        "Our definition of the meaning function 4.144 is like that in Section 2, except that the parameter n is replaced by a string x E 1* Thus",
        "1.",
        ".,idka = {a I (a(ii), .a(ik)) E P(P)}; 2.",
        "Alla(i)lpx = fa I x(a(i)) = al; 3.",
        "Ati = tApx = fa I tia = t2a1; 4.",
        "A42i4)6x = {a I (3m < lxI)(a(ilm) E AfF/Apx)}; 5.",
        "Boolean combinations are as before; 6.",
        "Ati[44:11px = {a I (3k)(a E AtiCoLok(S)lpx)).",
        "The schemes clik are defined for recursion schemes as above.",
        "If 4) is a formula of ILFP with no free individual or predicate variables then Slicapx is either A, the set of all individual assignments, or 0, independent of p, but depending on x.",
        "We say that x if SMIpx is all of A.",
        "A language L C I* is ILFP-definable if for some 4) in ILFP, L = Ix I x 44.",
        "Our objective is now Theorem 2.",
        "A language is ILFP-definable iff it is in PTIME.",
        "The proof appears in the next subsection."
      ]
    },
    {
      "heading": "4.2 PROOF OF THEOREM 2",
      "text": [
        "The idea of our proof is the same as that for Theorem 1, and only a sketch of the proof is necessary.",
        "We first restate Lemma 2 for ILFP, using the same definition for /3 and y. Lemma 4.",
        "Let 4) be an ILFP formula, with IFIvar(0)1 = k, and T: Flvar(0) > {1, .",
        ".",
        ".,14.",
        "Let m = Then we may construct an m-tape ATM M(4),7) having the following properties: (i) M has oracle states P?",
        "for each free predicate variable of 4), and (ii) For any x E X*, any a mapping Flvar(0) to natural numbers, and any environment p, we have the following: M with oracle states for the p(P), started with x on the input tape, binary representations of the integers a(ii) on tape T(ii), .",
        ".",
        "., and a(ik) on tape T(ik), and the other tapes blank, will accept without ever writing a value j > I x I on any tape, if and only if WO, .,a(i)) E A14i44Px.",
        "Proof: The proof is almost identical to that of Lemma 2.",
        "To evaluate equations M may have to use an extra tape, because otherwise the given nonblank tapes would be overwritten by the arithmetic operations.",
        "If 4) is a(i) (the only case not covered in (2), then tape 1 is used as a counter to locate the input head at the position of the contents of tape 1.",
        "Since arithmetic is modulo lxj, the machine never writes too great a value in these cases.",
        "The other cases are proved exactly as in (2), so this completes the proof.",
        "Lemma 5.",
        "If L E ASPACE(log n), then L is ILFPdefinable.",
        "Proof: We may assume that L is accepted by an ATM with p binary work tapes and one input tape.",
        "(If the tape alphabet is not binary, encode with a homomorphism and expand the number of tapes as necessary.)",
        "We may further assume that the machine M never writes a string longer than Llog2(n) 1 on any work tape (remember one bit on each tape in finite control if necessary).",
        "Each work tape, or portion thereof, is thus guaranteed to represent a binary number strictly less than n in value, where n is the length of the input string.",
        "We now proceed as in the proof of Lemma 3, but coding the contents of the work tapes as binary numbers.",
        "We need a number h, which tells the position of the input head.",
        "We also have two numbers / and r, which are the binary values of the tape contents to the left and right of the work tape head (here we describe the case of just one work tape).",
        "The number r will actually be the binary value of the reversal of the string to the right of the tape head, because this makes the operation of shifting the head a simple multiplication or division by 2.",
        "Since a string may have leading zeroes, we also need to keep two auxiliary numbers // and rr, which are the actual lengths of the strings to the left and right of the head.",
        "For each state q of the ATM we thus have a predicate q(h,1,r,11,rr) of five integer variables.",
        "The reader should have no difficulty in encoding the transition rules of M exactly as in Lemma 3.",
        "For example, a test as to whether the scanned symbol on the work tape is 0 or 1 becomes a test of the parity of r, and so on.",
        "Finally, it can be seen that the case of p work tapes requires 4p + 1-ary predicates.",
        "This completes the proof of our lemma and thus the theorem."
      ]
    },
    {
      "heading": "4.3 WHICH POLYNOMIAL?",
      "text": [
        "We can get a rough estimate of the degree of the polynomial time algorithm, which will recognize strings in the language defined by an ILFP grammar.",
        "We saw in the proof of Lemma 4 that if a scheme 4) has y(4)) = p, then an ATM with p + 1 binary work tapes can be constructed to recognize the associated language.",
        "The number of configurations of each tape is thus log n * 210g '1.",
        "If there are p + 2 tapes, this gives 0(logP+ I n * = 0(n\"2) possible tape configurations.",
        "Multiplying by n for the position of the input head gives O(n3) possible ATM configurations.",
        "From an analysis of the proof of Lemma 1 in Chandra, Kozen, and Stockmeyer 8Computational Linguistics, Volume 14, Number 4, December 1988 William C. RoundsLFP: A Logic for Linguistic Descriptions and an Analysis of its Complexity (1981), we can see that the polynomial in our deterministic TM algorithm is bounded by the square of the number of ATM configurations.",
        "This leads to an 0(n2P+6) recognition algorithm.",
        "Since this bound would give an 0(n12) algorithm for context-free language recognition, we conjecture that the general estimate can be improved.",
        "In particular, We would like to remove the factor of 2 from 2p."
      ]
    },
    {
      "heading": "5 APPLICATIONS TO HEAD GRAMMARS",
      "text": [
        "In this section we express head grammars (Pollard 1984) in ILFP, and thus show that head languages can be recognized in polynomial time.",
        "Since the class of head languages is the same as the class of tree adjunct languages (Vijayashankar, Joshi 1985), we get the same result for this class.",
        "We will actually give only a simplified version of head grammars to make our ILFP formulas easy to write.",
        "This version corresponds exactly to the Modified Head Grammars of Vijayashankar and Joshi (1985), and differs only from the original version in that it does not treat the empty string.",
        "(Roach (1988) has an extended discussion of head languages.)",
        "We define a head grammar as a tuple G = where N and are finite nonterminal and terminal alphabets, P is a finite set of productions, and S is the start nonterminal.",
        "The productions are of the form C> Op(A,B), where A,B, and C are nonterminals and Op is chosen from a fixed set of head-wrapping operations.",
        "Productions can also have the form C > (x,y), where x and y are terminal strings.",
        "We view nonterminals in N as deriving pairs of strings (u, v).",
        "In the original formulation, this meant that the head of the string uv occurred at the end of u.",
        "The wrapping operations come from the set {LL1,LL2,LCI, LC2}.",
        "We consider LL2 and LC1 as examples.",
        "We define LL2((w,x),(u,v)) = (wu, vx).",
        "Thus if A derives (w,x) and B derives (u, v), and C LL2(A,B) is a production, then C derives (wu,vx).",
        "Similarly, LCIaw,x),(u,v)) = (w,xuv), so in the corresponding case, we would have C derives (w,xuv) if C > LCi(A,B) were a production.",
        "A string t is in L(G) iff for some u and v, t = uv and S derives (u, v).",
        "Given a head grammar, we write an ILFP recursion scheme as follows.",
        "For each nonterminal C, we introduce a predicate C(ij,k,1).",
        "We think of these four integers as indexing the positions of symbols in a string, starting at the left with 0.",
        "Then C(ij,k,l) means that the nonterminal symbol C can derive the pair of substrings of the input string between i and j, and between k and 1 inclusive.",
        "Thus, if C LL2(A,B) is a production, our scheme would include a clause",
        "Finally, if C> (a, bb) were a terminating production, we would have C(i,j,k,1)<=> a(i) Ai = jAk = 1+ IA b(k) A b(k + 1) A / = k + 1 The grammar would be defined by the recursion scheme and the assertion 3jS(Ojj + 1,last), where S is the start symbol of G. It can be seen from this formulation that every head grammar can be written as an ILFP scheme with at most six total variables.",
        "Section 4 thus gives us an 0(n18) algorithm.",
        "However, the algorithm of Vijayashanker and Joshi (1985) is at most n6.",
        "It would seem that a rule of thumb for the order of the polynomial algorithm is to use the number y(4)) for the ILFP scheme 0, but we have no proof for this conjecture."
      ]
    },
    {
      "heading": "ACKNOWLEDGMENT",
      "text": [
        "Research supported by NSF Grant MCS-8301022."
      ]
    },
    {
      "heading": "REFERENCES",
      "text": []
    }
  ]
}
