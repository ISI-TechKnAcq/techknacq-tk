{
  "info": {
    "authors": [
      "Hiroyuki Seki",
      "Ryuichi Nakanishi",
      "Yuichi Kaji",
      "Sachiko Ando",
      "Tadao Kasami"
    ],
    "book": "Annual Meeting of the Association for Computational Linguistics",
    "id": "acl-P93-1018",
    "title": "Parallel Multiple Context-Free Grammars, Finite-State Translation Systems, And Polynomial-Time Recognizable Subclasses of Lexical-Functional Grammars",
    "url": "https://aclweb.org/anthology/P93-1018",
    "year": 1993
  },
  "references": [
    "acl-P87-1015",
    "acl-P92-1018"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "A number of grammatical formalisms were introduced to define the syntax of natural languages.",
        "Among them are parallel multiple context-free grammars (pmcfg's) and lexical-functional grammars (lfg's).",
        "Pmcfg's and their subclass called multiple context-free grammars (mcfg's) are natural extensions of cfg's, and pmcfg's are known to be recognizable in polynomial time.",
        "Some subclasses of lfg's have been proposed, but they were shown to generate an NP-complete language.",
        "Finite state translation systems (fts') were introduced as a computational model of transformational grammars.",
        "In this paper, three subclasses of lfg's called nc-lfg's, dc-lfg's and fc-lfg's are introduced and the generative capacities of the above mentioned grammatical formalisms are investigated.",
        "First, we show that the generative capacity of fts' is equal to that of nc-lfg's. As relations among subclasses of those formalisms, it is shown that the generative capacities of deterministic fts', dc-lfg's, and pmcfg's are equal to each other, and the generative capacity of fc-lfg's is equal to that of mcfg's. It is also shown that at least one NP-complete language is generated by fts'.",
        "Consequently, deterministic fts', dc-lfg's and fc-lfg's can be recognized in polynomial time.",
        "However, fts' (and nc-lfg's) cannot, if P A/ P."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "A number of grammatical formalisms such as lexical-functional grammars (Kaplan 1982), head grammars (Pollard 1984) and tree adjoining grammars (Joshi 1975)(Vijay-Shanker 1987) were introduced to define the syntax of natural languages.",
        "On the other hand, there has been much effort to propose well-defined computational models of transformational grammars.",
        "One of these is the one to extend devices which operate on strings, such as generalized sequential machines (gsm's) to devices which operate on trees.",
        "It is fundamentally significant to clarify the generative capacities of such grammars and devices.",
        "Parallel multiple context-free grammars (pm-cfg's) and multiple context-free grammars (mcfg's) were introduced in (Kasami 1988a)(Seki 1991) as natural extensions of cfg's. The subsystem of linear context-free rewriting systems (lcfrs') (Vijay-Shanker 1987) which deals with only strings is the same formalism as mcfg's. The class of cfl's is properly included in the class of languages generated by pmcfg's, which in turn is properly included in the one generated by mcfg's. The class of languages generated by pmcfg's is properly included in that of context-sensitive languages (Kasami 1988a).",
        "Pmcfg's have been shown to be recognized in polynomial time (Kasami 1988b)(Seki 1991).",
        "A tree transducer (Rounds 1969) takes a tree as an input, starts from the initial state with its head scanning the root node of an input.",
        "According to the current state and the label of the scanned node, it transforms an input tree into an output tree in a top-down way.",
        "A finite state translation system (fts) is a tree transducer with its input domain being the set of derivation trees of a cfg (Rounds 1969)(Thatcher 1967).",
        "A number of equivalence relations between the classes of yield languages generated by fts' and other computational models have been established (En-gelfriet 1991)(Engelfriet 1980)(Weir 1992).",
        "Especially, it has been shown that the class of yield languages generated by finite-copying fts' equals to the class of languages generated by lcfrs' (Weir 1992), hence by mcfg's. In lexical-functional grammars (lfg's) (Kaplan 1982), associated with each node v of a derivation tree is a finite set F of pairs of attribute names and their values.",
        "F is called the f-structure of v. An lfg G consists of a cfg Go called the underlying cfg of G and a finite set Pf, of equations called functional schemata which specify constraints between the f-structures of nodes in a derivation tree.",
        "Functional schemata are attached to symbols in productions of Go.",
        "It has been shown in (Nakanishi 1992) that the class of languages generated by lfg's is equal to that of re",
        "cursively enumerable languages even though the underlying cfg's are restricted to regular grammars.",
        "In (Gazdar 1985)(Kaplan 1982)(Nishino 1991), subclasses of lfg's were proposed in order to guarantee the recursiveness (and/or the efficient recognition) of languages generated by lfg's. However, these classes were shown to generate an ArP-complete language (Nakanishi 1992).",
        "In this paper, three subclasses of lfg's called nc-lfg's, dc-lfg's and fc-lfg's are proposed, two of which can be recognized in polynomial time.",
        "Moreover, this paper clarifies the relations among the generative capacities of pmcfg's, fts' and these subclasses of lfg's. In nc-lfg's, a functional schema either specifies the value of a specific attribute, say atr, immediately (iatr = vai) or specifies that the value of a specific attribute of a node v is equal to the whole f-structure of a child node of v (iatr =1).",
        "An nc-lfg is called a dc-lfg if each pair of rules P1 : A – > al and p2 : A --+ a2 whose left-hand sides are the same is inconsistent in the sense that there exists no f-structure that locally satisfies both of the functional schemata of /31 and those of p2.",
        "Intuitively, in a dc-lfg G, for each pair (t1, t2) of derivation trees in G, if the f-structure and nonterminal of the root of t1 are the same as those of t2, then t1 and t2 derive the same terminal string.",
        "Let G be an nc-lfg.",
        "A multiset M of nonterminals of G is called an SPN multiset in G if the following condition holds: Let M = A2, • • • An}} be a multiset of nonterminals where different A's are not always distinct.",
        "There exist a derivation tree t and a subset of nodes V = {vi, v2, • • • ,v,} of t such that the label of v, is Ai (1 < i < n) and the f-structures of vi's are the same with each other by functional schemata of G. If the number of SPN multisets in G is finite, then G is called an fc-lfg.",
        "Our main result is that the generative capacity of nc-lfg's is equal to that of fts'.",
        "As relations among proper subclasses of the above mentioned formalisms, it is shown that the generative capacities of dc-hg's, deterministic fts' and pmcfg's are equal to each other, and the generative capacity of fc-lfg's is equal to that of mcfg's. It is also shown that a (nondeterministic) fts generates an ATP-complete language."
      ]
    },
    {
      "heading": "2 Parallel Multiple Context-Free Grammars",
      "text": [
        "A parallel multiple context-free grammar (pmcfg is defined to be a 5-tuple G = (N,T,F,P,S which satisfies the following conditions (G1 through (G5) (Kasami 1988a)(Seki 1991).",
        "(G1) N is a finite set of nonterminal symbols.",
        "A positive integer d(A) is given for each nonterminal symbol A E N. (G2) T is a finite set of terminal symbols which is disjoint with N.",
        "(G3) F is a finite set of functions satisfying the following conditions.",
        "For a positive integer d, let (T*)' denote the set of all the d-tuples of strings over T. For each f E F with arity a(f), positive integers r(f) and di(f) (1 _< i < a(f)) are given, and f is a total function from (7)d1(f) x (T*)4(1) x • • • x (T*)d-(1)(f) to (T*)r(f) which satisfies the following condition (f1).",
        "Let xi (Xil x22) • • • )Xid.",
        "(f)) denote the ith argument of f for 1 < i < a(f).",
        "(11) For 1 < h < r(f), the hth component of f, denoted by f[h], is defined as;",
        "where ah,k E T* for 0 5 k 5_ nh, 1 5 iz(h,j) 5 a(f) and 1 5 n(h,j) 5 dy(h,j)(f) for 0 <j nh – 1.",
        "(G4) P is a finite set of productions of the form A – > f[441, A2, , Aa(n] where",
        "A, Ai, A2, , Aa(f) €N, f E F, r(f) = d(A) and d(f) = d(Ai) (1 <i 5 a(f)).",
        "If a(f) 0, i.e., f E (T*)r\"), the production is called a terminating production, otherwise it is called a nonterminating production.",
        "If all the functions of a pmcfg G satisfy the following Right Linearity condition, then G is called a multiple context-free grammar (mcfg).",
        "[Right Linearity For each x2, the total number of occurrences of xii in the right-hand sides of (2.1) from h = 1 through r(f) is at most one.",
        "The language generated by a pmcfg G = (N,T , F, P, S) is defined as follows.",
        "For A E N, let us define LG(A) as the smallest set satisfying the following two conditions:",
        "(L1.)",
        "If a terminating production A a is in P, then a E LG(A).",
        "(L2) If A – > f[Al,A2, .. • , Aa(f)] E P and at E LG(Az) _< i 5 a(f)), then f[ai, a2, • • • , -6a( nf E LG(A.",
        ").",
        "Define L(G)LG(S).",
        "L(G) is called the parallel multiple context-free language (pmcfl) generated by G. If G is an mcfg, L(G) is called the multiple context-free language (mcfl) generated by G.",
        "a, f[(x)] = XX.",
        "GExi is a pmcfg but is not an mcfg since the function f does not satisfy Right Linearity.",
        "The language generated by GExi is {a2' In > OE which cannot be generated by any mcfg (see Lemma 6 of (Kasami 1988a)).",
        "The empty string is denoted by E.",
        "Lemma 2.1(Kasami 1988b)(Seki 1991): Let G be a pmcfg.",
        "For a given string w, it is decidable whether w E L (G) or not in time polynomial of lw I, where HI denotes the length of W."
      ]
    },
    {
      "heading": "3 Finite State Translation Systems",
      "text": [
        "A set E of symbols is a ranked alphabet if, for each a E E, a unique non-negative number p(o) is associated.",
        "p(o) is the rank of cr.",
        "For a set X, we define free algebra TE(X) as the smallest set such that;",
        "• TE(X) includes X.",
        "• If p(o) = 0 for o E E, then o E TE(X).",
        "• If p(o) n (> 1) for a E E and t1,.",
        "• • tit E",
        "TE(X), then t , tn) E TE(X).",
        "cr is called the root symbol, or shortly, the root of",
        "Hereafter, a term in TE (X) is also called a tree, and we use terminology of trees such as subtree, node and so on.",
        "Let G = (N, T, P, S) be a context-free grammar (cfg) where N, T, P and S are a set of nonterminal symbols, a set of terminal symbols, a set of productions and the initial symbol, respectively.",
        "A derivation tree in cfg G is a term defined as follows.",
        "(Ti) Every a E T is a derivation tree in G. (T2) Assume that there are a production p A – > X1- • • X,.",
        "(A E N, X1,.",
        ", X,E Nu T) in P and n derivation trees tn, whose roots are labeled with ,p„,, respectively, and",
        "• ifX EN, then pi is a production X, • • •, whose left-hand side is Xi, and • if X. E T, then pi = ti = X.",
        "Then p(ti, , tn) is a derivation tree in G. (T3) There are no other derivation trees.",
        "Let 1Z(G) be the set of derivation trees in G, and 7Zs(G) C 'R(G) be the set of derivation trees whose root is labeled with a production of which left-hand side is the initial symbol S. Clearly, 'R8(G) C T(q) holds.",
        "Remark that 'Rs(G) is a multi-sorted algebra, where the nonterminals are sorts, and the terminals and the labels of productions are operators.",
        "A tree transducer (Rounds 1969) defines a mapping from trees to trees.",
        "Since we are mainly interested in the string language generated by a tree transducer, a \"tree-to-string\" version of transducer defined in (Engelfriet 1980) is used in this paper.",
        "For sets Q and X, let",
        "A tree-to-string transducer (yT-transducer or simply transducer) is defined to be a 5-tuple M (Q, E, q0, R) where (1) Q is a finite set of states, (2) E is an input ranked alphabet, (3) A is an output alphabet, (4) qo E Q is the initial state, and (5) R is a finite set of rules of the form q[cr(xi,.",
        ",xn)] v where q E Q, o E E, n = p(o-) and v E (AUQRxt, ...,xn}D*.",
        "If any different rules in R have different left-hand sides, then M is called deterministic (Engelfriet 1980).",
        "A configuration of a yT-transducer is an element in (A U Q[TE(0)])* .",
        "Derivation of M is defined as follows.",
        "Let t = tnAct2 be a configuration where c1, c2 E (A U Q[7E(0)])* , q E Q, o E E, p(o-) = n and ,t, E TE(q5).",
        "Assume that there is a rule q[cr(xi, • • • ,x,)] v in R. Let t' be obtained from v by substituting t1, , ti, for xl, , xn, respectively, then we define t zM ct1ticx2.",
        "Let be be the reflexive and transitive closure of If t•*Al t', then we say t' is derived from t. If there is no V.1 E A* such that t w, then we say no output is derived from t. A tree-to-string finite state translation system (yT-fts or fts) is defined by a yT-transducer M and a cfg G, written as (M, G) (Rounds 1969)(Thatcher 1967).",
        "We define yL(M,G), called the yield language generated by yT-fts (M, C), as y L(M , E A* I 3t E s (G) , ga[t] •*m w} where A is an output alphabet and qo is the initial state of M. An fts is called deterministic (Engelfriet 1980) if the transducer M is deterministic.",
        "Engelfriet introduced a subclass of fts' called finite-copying fts' as follows (Engelfriet 1980): Let (M, G) be an fts with output alphabet A and initial state go, t be a derivation tree in G and t' be a subtree of t. Assume that there is a derivation a : go[t] *11,1 w. Now, delete from this derivation a all the derivation steps which operates on t'.",
        "This leads to the following new derivation which keeps t' untouched; a' : go [t] wi gi, [e]w2 • • • wThg,,„ [t'lw„,±1 where wi E A for 1 <i < n + 1.",
        "The state sequence of t' in derivation a is defined to be (gi„ , Derivation a has copying-bound k if, for every subtree of t, the length of its state sequence is at most k. An Its (M, G) is a finite-copying, if there is a constant k and for each w E yL(M,G), there is a derivation tree t in G and a derivation go [t] w with copying-bound k. It is known that the determinism does not weaken the generative capacity of finite-copying fts' (Engelfriet 1980).",
        "We note that an fts (M, G) can be considered to be a model of a transformational grammar: A deep-structure of a sentence is represented by a derivation tree of G, and M can be considered to transform the deep-structure into a sentence (or its surface structure)."
      ]
    },
    {
      "heading": "4 Subclasses of Lexical-functional grammars",
      "text": [
        "A simple subclass of lfg's, called r-lfg's, is introduced in (Nishino 1992), which is shown to generate all the recursively enumerable languages (Nakanishi 1992).",
        "Here, we define a nondeterministic copying lfg (nc-lfg) as a proper subclass of r-lfg's. An nc-lfg is defined to be a 6-tuple G = (N, T, P, S, Nat, Aat,a) where: (1) N is a finite set of nonterminal symbols, (2) T is a finite set of terminal symbols, and (3) P is a finite set of annotated productions.",
        "Sometimes, a nonterminal symbol, a terminal symbol and an annotated production are abbreviated as a nonterminal, a terminal and a production, respectively.",
        "(4) S E N is the initial symbol, (5) Nat,.",
        "is a finite set of attributes, and (6) Aatm is a finite set of atoms.",
        "An equation of the form I atr =j, (atr E Nap) is called an S (structure synthesizing) schema, and an equation of the form I atr = val (atr E Natr, val E Aatm) is called a V (immediate value) schema.",
        "A functional schema is either an S schema or a V schema.",
        "Each production p E P has the following form:",
        "where A E N, B1, B2, • • • , Bq E N u T. Ev is a finite set of V schemata and E53 (1 < j < q) is a singleton of an S schema.",
        "A – > B1./32 - • • Bq in (4.2) is called the underlying production of p. Let Po be the set of all the underlying productions of P. Cfg Go = (N, T, Po, S) is called the underlying cfg of G. An f-structure of G is recursively defined as a set F = {(atri, v , (atr2 , v al2) , • • • , (atrk, valk)} where atri, atr2, • • •, and atrk are distinct attributes, and each of va/i, va/2, • •, and va/k is an atom or an f-structure.",
        "We say that va/i (1 < i < k) is the value of atr, in F and write F. atr, = val.",
        "For a cfg G' = (N' ,T' , P', S'), derivation relations in G', denoted by A G, a and A a (A E ,a e (N' U r)*) are defined in the usual way.",
        "Suppose Go = (N, T, Po, S) is the underlying cfg of an nc-lfg G = (N,T, P, Natr)Aatm).",
        "Let t be a derivation tree in Go.",
        "(In 4.,7. and 8., the label of a leaf of a derivation tree is allowed to be a nonterminal.)",
        "Every internal node v in t has an f-structure, which is called the f-structure of v and written as F„.",
        "If an underlying production Po : A – + Bi • • • Bq E Po is applied at v, then v is labeled with either po itself, or p (E P) of which Po is the underlying production, if necessary.",
        "Let vibe the ith child of v (1 < i < q).",
        "We define the values of both sides of a functional schema attached to the symbol in p (on v) as follows:",
        "• the value of I atr(atr E Nat,.)",
        "is Fo.",
        "atr, • the value of 1. in an S schema is F„, if the S schema is attached to the i(1 < i < g)th symbol in the right-hand side of p, and • the value of atom atm in a V schema is atm itself.",
        "We say that v satisfies functional schemata if for each functional schema ifs = r5 of p, the values of ifs and rf, on v are defined and equals with each other.",
        "In this case, it is also said that F„ locally satisfies the functional schemata of p. NOTE: Because the meaning of a V schema is independent of the position where it is annotated, ✓ schemata are attached to the left-hand side in this paper.",
        "For a nonterminal A E N and a sentential form a E (N U T)*, let t be a derivation tree of a derivation A a.",
        "If all internal nodes in t satisfy functional schemata, then a is said to be derived from A and written as A .",
        "In this case, the tree t is called a derivation tree of A '6 a.",
        "We also call t a derivation tree (of a) in G simply.",
        "The language generated by an nc-lfg G, denoted by L(G), is defined as L(G) = {w E T*I S w}.",
        "NOTE: In the definition of nc-lfg, even if \"Esi (1 5_ j 5_ q) is a singleton of an S schema\" is replaced with",
        "The language generated by G Ex3 is L (G EX3) = {anbncndn ii > 0}.",
        "Figure 1 shows a derivation tree of SEx3 aabbccdd in GExs.",
        "The language generated by GEx4 is L(GEx4) = {a2\" In 0}.",
        "LI",
        "Aatm) be an nc-lfg where N = {S,S',A,B}, T = {the, woman, men, and, drinks, smoke, respectively}, Nor = {num, list}, Aatm = {sg,pl,nil}, and productions in P are;",
        "G Ex5 generates \"respectively\" sentences such as \"the woman and the men drinks and smoke re-spectively\".",
        "For a set X of functional schemata, X is consistent ill' neither the following (1) nor (2) holds.",
        "for some atr E Nat,.",
        "and some va/i, va/2 E Aatm such that vadi vad2.",
        "(2) {I atr = val,i atr =1} cx for some atr E Nair and some vat E Aatm-Productions pi, • • • ,pn are consistent if U1<i<n E(i) is consistent where E(i) is the set of functional schemata of pi.",
        "If productions are not consistent then they are called inconsistent.",
        "An nc-lfg G is called a deterministically copying lfg (dc-hg), if any two productions A al and A a2 whoes left-hand sides are the same are inconsistent.",
        "Suppose G = (N,T, P, S, Nab\" Actim) is an nc-lfg.",
        "Let {{el, e2,•• • , en}} denote the multiset which consists of elements el, e2, • • • , en that are not necessarily distinct.",
        "An SPN (SubPhrase Nonterminal) multiset in G is recursively defined as the following 1 through 3:",
        "1.",
        "{{S}} is an SPN multiset.",
        "2.",
        "Suppose that {{A1, A2, • • • , Ah}} (A1, A2, • •",
        "• Ah oth be consistent productions.",
        "For each air E Natr, let MSat, be the multiset consisting of all the nonterminals which appear in ai, • • • , ah and have an S schema air =J.",
        "If MS,.",
        "is not empty, then MSat, is also an SPN multiset.",
        "3.",
        "There is no other SPN multiset.",
        "An nc-lfg such that the number of SPN multisets in G is finite is called a finite-copying lfg (fc-lfg).",
        "Example 4.4: Consider GEx3 in Example 4.1.",
        "Productions p12 and pH are inconsistent with each other and so are p13 and pi5.",
        "SPN multisets in GEx3 are {{S}} and {{A, B}}.",
        "Hence GEX3 is a dc-lfg and is an fc-lfg.",
        "GEx5 is also a dc-lfg and is an fc-lfg by the similar reason.",
        "Similarly, GEx4 in Example 4.2 is a dc-lfg.",
        "SPN multisets in GEx4 are {{S}}, {{S, S}}, IIS, S, S, SD, • • • .",
        "Hence GEx4 is not an fc-lfg.",
        "NOTE: L (G Ex5) is generated by a tree adjoining grammar.",
        "Suppose that a sentence has three or more phrases which have co-occurrence relation like the one between the subject phrase and the verb phrase in the \"respectively\" sentence.",
        "Tree adjoining grammars can not generate such syntax while fc-lfg's or dc-lfg's can, although the authors do not know a natural language which has such syntax so far.",
        "By Lemma 2.1 and Theorem 8.1, fc-lfg's are polynomial-time recognizable.",
        "Hence, it is desirable that whether a given lfg G is an fc-lfg or not is decidable.",
        "Fortunately, it is decidable by the following lemma.",
        "Lemma 4.1: For a given nc-lfg G, it is decidable whether the number of SPN multisets in G is finite or infinite.",
        "Proof.",
        "The problem can be reduced to the boundedness problem of Petri nets, which is known to be decidable (Peterson 1981)."
      ]
    },
    {
      "heading": "5 Overview of the Results",
      "text": [
        "Let rn,_kfg, rdc-lfg and Lfc-Ifg denote the classes of languages generated by nc-lfg's, dc-lfg's and fc-lfg's, respectively, and let y.C.ft,, yrd_ft, and yGfe_fts denote the classes of yield languages generated by Its', deterministic fts' and finite-copying fts', respectively.",
        "Let Lp,,,fg and rrhcfg be the classes of languages generated by pmcfg's and mcfg's, respectively.",
        "Also let Ltag be the class of language generated by tree adjoining grammars.",
        "Inclusion relations among these classes of languages are summarized in Figure 2.",
        "An equivalence relation *1 is shown in (Weir 1992).",
        "Relations *2 are new results which we prove in this paper.",
        "We also note that all the inclusion rela",
        "A relation B A is shown in (Engelfriet 1980).",
        "By Lemma 2.1, all languages in the region enclosed with the bold line are recognizable in polynomial time.",
        "On the other hand, it is shown in this paper that Unary-3SAT, which is known to be ./VP-complete (Nakanishi 1992), is in A.",
        "Hence, if P ./VP, then Unary-3SAT E A – B and the languages generated by Its' (or equivalently, nc-lfg's) are not recognizable in polynomial time in general."
      ]
    },
    {
      "heading": "6 Generative Capacity of fts'",
      "text": []
    },
    {
      "heading": "6.1 Deterministic fts'",
      "text": [
        "Here, the proof of an inclusion relation yrd_ft, C Lpmcfg is sketched.",
        "Let (M, G) be a deterministic yT-fts where",
        "and P = {pi, ,Pm}.",
        "Since the input for M is the set of derivation trees of G, we assume that = {Pi, ,Pm,ai, , an} without loss of generality.",
        "We will construct a pmcfg G' (N',T' , F', P', S') such that yL(M, G) L(G') n A*.",
        "Since Lpmcfg is closed under the intersection with a regular set (Kasami 1988a)(Seki 1991), it follows that yL(M,G) E Lprhcfg.",
        "Let T' A U {b} where b is a newly introduced symbol and let = {S' Rrn, A1, • • • An} where d(R) d(A) = for 1 < j < m and",
        "1 <j < n. Productions and functions of G' will be constructed to have the following property.",
        "Property 6.1: There is (ai, ... ,a) E LG'(Rh) (resp.",
        "LG,(Ah)) such that { each of a,... , a,.",
        "does not contain b, and every remaining at„ ..., at.",
        "contains b if and only if there is a derivation tree t of G such that the root is ph (resp.",
        "ah) and",
        "The basic idea is to simulate the move of tree transducer M which is scanning a symbol ph (resp.",
        "ah) with state qi by the ith component of the nonterminal Rh (resp.",
        "Ah) of pmcfg G'.",
        "During the move of M, it may happen that no rule is defined for a current configuration and hence no output will be derived.",
        "The symbol b is introduced to represent such an undefined move explicitly.",
        "We define RS(X) (X E N U T) as follows.",
        "{Rh I the left-hand side of phis X}",
        "Step 1: For each production ph : 170 4 Yi•-• Yk (YoEN,YuENUTfor 1 <u<k) of cfg G, construct nonterminating productions",
        "for every Za E RS(Y,2) (1 <u < k), where fph is defined as follows: For 1 < i < t,",
        "• if the transducer M has no rule whose left-hand side is qz[ph(xi, , x0], then -6,2,][xi, • .",
        "• , tkj-=%, (6.3) • if M has a rule qi[Ph(xi, • • •, xk)1 ai,o 4710,o)[xpo,o)]ai,i • • • ai,ni_ign(i,n,-1)[xpo,n,-1)]ifltj then fk,!",
        "[t-i.,.• • , -±ki cti,oxpo,o),70,0)ao (6.4) • • • cti,n, - ),70 ,ni -",
        "where ..th = (x.i, • • .",
        ",x) (1 < u < k).",
        "(Since M is deterministic, there exists at most one rule whose left-hand side is qi [ph(- • •)] and hence the above construction is well defined.)",
        "Step 2: For each ah E T, construct a terminating production Ah fah where fah is defined as follows: For 1 < i < t,",
        "• if M has no rule whose left-hand side is qi[ah], then • if M has a rule qz[ah] ai, then fit,",
        "Step 3: For each Rh E RS(S), construct 5' --+ ifirst[Rh] where ffirst,[(Xi, Xt)]L4Xi.",
        "Intuitively, the right-hand side of this production corresponds to the initial configuration, that is, M is in the initial state qi and scanning the root symbol ph of a derivation tree, where the left-hand side of phis the initial symbol S. The pmcfg G' constructed above satisfies Property 6.1.",
        "Its proof is found in (Kaji 1992) and omitted in this paper.",
        "By Property 6.1, we obtain the following lemma.",
        "Lemma 6.1: yLd-fts Lpmcfg• LI The reverse inclusion relation Cpn,th C yLd_ft, can be shown in a similar way, and the following theorem holds."
      ]
    },
    {
      "heading": "6.2 Nondeterministic fts'",
      "text": [
        "In this section, the generative capacity of nondeterministic yT-fts' is investigated, from the viewpoint of computational complexity.",
        "We have already shown that yLd_fis = rp,,,fg, and hence every language in this class can be recognized in time polynomial of the length of an input string.",
        "Our result here is: there is a nondeterministic Its that generates an ,NP-complete language.",
        "In the following, a language called Unary-3SAT, which is .VP-complete (Nakanishi 1992), is considered, and then it is shown to belong to yLfts.",
        "A Unary-3CNF is a (nonempty) 3CNF in which the subscripts of variables are represented in unary.",
        "A positive literal xi in a 3CNF is represented by l'S in a Unary-3CNF.",
        "Similarly, a negative literal is represented by 1'#.",
        "For example, a 3CNF",
        "Unary-3SAT is the set of all satisfiable Unary-3CNF's. Next, we construct a nondeterministic yT-fts (M, G) that generates Unary-3SAT.",
        "Define a cfg G = (N,T, P, S) where N {S,T, F}, T = {e} and the productions in P are as follows:",
        "Let M = (Q, E, q0, R) where",
        "Since there are many rules in R, we will use an abbreviated notation.",
        "For example, following four rules",
        "are abbreviated as \"qa[rTe(x)] =- qa[rFe(x)] 1$ or 1#\".",
        "By using this notation, the rules in R are defined as follows.",
        "go Irss (x) qe [x] A qo [x]",
        "The readers can easily verify that this yT-fts generates Unary-3SAT."
      ]
    },
    {
      "heading": "7 Equivalence of Lnc_tyg and yLtt",
      "text": []
    },
    {
      "heading": "s",
      "text": [
        "First, we show Gyjc_ug C yr. For a given nc-lfg G = (N, T, P, S, Nat, Aatm), an equivalent Its (M, G') is constructed in the following way.",
        "Let t be a derivation tree in lfg G and the f-structure of the root node of t be F = { (atri, FO, • • , (atr„, Fa)}.",
        "F is represented by a derivation tree T = pisp(Ti , • • • , Tn) in G', where Ty (1 < i < n) is a derivation tree in G' which represents Fi recursively.",
        "And sp is a set of productions such that F locally satisfies the functional schemata of all productions in sp.",
        "M transforms T into the yield of t, i.e., the terminal string obtained by concatenating the labels of leaves, in a top-down way.",
        "[TRANS 7.1] Let N = {Al,.",
        "• • , Ara}, S = A1 and Nat,.",
        "= { atri, • • , atrn}.",
        "Define SP as the set of all consistent subsets of P.",
        "For a derivation tree r in G' and a node v where 14 is applied, the subtree rooted by the ith child of v represents the value of attribute atri.",
        "Step 2: M (Q, E, T, qi, R) is defined as follows.",
        "Define Q = , q,.„}.",
        "A state q3 (1 j < m) corresponds to nonterminal A) in N. Define E = {p is p I sp E SP} U {eguess.pIsp E SP} U {piterm} u {d} where p(p) P(Pigue,..p) = P(Perm) = n and p(d) = 0.",
        "And define R by the following (i) through (iii).",
        "(i) 4314..3(x)1 4 43[x] (1 _< j m) belongs to R for each sp E SP.",
        "(ii) Let T be a derivation tree in C'.",
        "When p'sp is the production applied at the root of T and a state of M is qm,„ M chooses a production p whose left-hand side is Amo, if exists, in sp.",
        "NOTE : Since productions in spare consistent, there is an f-structure, which locally satisfies the functional schemata of all productions in sp.",
        "For each production p Espin SP p: Amo ao Aihi al ... aL-1 Apz, Ev {T atrvi =.1.}",
        "• • • { atrvr, =.1.1 where Ami E N and ai E T*(0 < 1 < L), the following rule belongs to R: ff--■°[P asi Po(qx 121 joex ceL-igAL [xvLiaL.",
        "(7.5) (iii) No other rule belongs to R. III Next, yLii, c Encg is shown.",
        "For a given fts (M, G), the following algorithm constructs an nc-lfg G' such that L(G') = yL(M,G).",
        "[TRANS 7.2] Suppose that a given fts (M, G) is G = (N,T, P, S) and M = (Q, E, qi, R) where Q = {qi, q2, • • • , qm,}.",
        "Let n be the maximum length of the right-hand side of a production in P. Define an nc-lfg G' = (N', A, , Natr, Aatm) as follows.",
        "A derivation tree t = p(ti, • • • , th) in G is represented by an f-structure {(rule,p),(atri, F1), • • ,(atrh, Fh)} of G' where Fi (1 < i < h) is an f-structure which represents the subtree te recursively.",
        "Each pair of a symbol (either nonterminal or terminal) X of G and a state qj of M is represented by a single nonterminal Xi•i1 in G'.",
        "Step 2: A move when M at state qi reads a symbol p which is the label of a production p: C 4 • • •, can be simulated by a production in GI whose left-hand side is CU] .",
        "Formally, the set P' of productions of Gi is constructed as follows.",
        "(i) Let p: C Xl• • • Xh be a production in P where C E N, X2 E NUT (1 < i < h), and let:",
        "(ii) Let q3[al 03 be a rule in R where a E T and p; E A*.",
        "Then the production a[i] Pi belongs to P'.",
        "(iii) No other production belongs to P'.",
        "By TRANS 7.1 and TRANS 7.2, the following theorem is obtained.",
        "A formal proof is found in (Nakanishi 1993).",
        "Proof.",
        "In TRANS 7.1, if G is a dc-lfg, then no sp ESP contains distinct productions whose left-hand sides are the same and hence the constructed transducer M becomes deterministic by the construction.",
        "Conversely, in TRANS 7.2, if M is deterministic, then there exist no consistent productions and p'2 in P' whose left-hand sides are the same and hence the constructed nc-lfg is a dc-lfg."
      ]
    },
    {
      "heading": "8 Equivalence of G fc_lfg and mcfg",
      "text": [
        "To prove Cfc-ifg C .Crricfg, we give an algorithm which translates a given fc-lfg G = (N, T, P, S, Nair, Aeire) into an mcfg G' such that",
        "[TRANS 8] We explain the algorithm by using the fc-lfg GEX3 in Example 4.1.",
        "An mcfg G' = (N', T, F, F', S) is constructed as follows.",
        "Step 1: N' = (the set of nonterminals which has a one-to-one correspondence with the set of SPN multisets in G) = {(S), (A, B)} (for GEX3 P' = 0, and F = 0.",
        "Step 2: For each SPN multiset Mo = {{Ai, A2)",
        "• • • , AO} of G, consider every tuple (731,P21 •",
        ",Pk) of productions in P whose left-hand sides are A1, A2, • • • , Ak respectively and which are consistent.",
        "(Suppose that, if we write an SPN multiset as {{Ai, A2, • • • then A3's are arranged according to a predefined total order < on N, that is, Ai < A2 < • • • < Ak hold.)",
        "For an SPN multiset {{A, B}} in GEx3, the following two pairs of productions have to be considered:",
        "For (pi, p2, • • • ,pk), a production p' and a function f of GI are constructed and added to P' and F, respectively as follows.",
        "The multiset M of the nonterminals appearing in the right-hand side of some p3 (1 < j < k) are partitioned into multisets MI, M2, • • • , with respect to the S schemata attached to the nonterminals in p3's. That is, (M1, M2 • • ) are the coarsest partition of M such that for each Mu (1 <u < h), the following condition holds.",
        "Each nonterminal in Mu has the same S schema.",
        "By the definition, each Mu (1 < u < h) is an SPN multiset in G. Construct a production of mcfg p' : Mo f[Mi, M2, • • • , Mh] where Mu is the nonterminal of G' which corresponds to Mu (1 <U < Add p' to /31 and f to F where f is defined as follows.",
        "Suppose p3 : A3 crioB3ia31 • • • 133L,ajL,(1< j < k) where A3 E N, B31 E N (1 < 1 < L3) and",
        "where C N(1 < v < se).",
        "Then, for 1 < j < k, the jth component PA of f is:",
        "where x-u = (xui, xu2, • • • , xus„) (1 < u < h).",
        "For j (1 < j < k) and / (1 < / < L3), if B31 = Cue then y3ixua.",
        "Note that, since Ma's are a partition of M, f satisfies Right Linearity (see 2.)",
        "and hence G' is an mcfg.",
        "For example, consider the above ( v7312,P13)• The nonterminals appearing in the right-hand in Example 4.1)",
        "sides are A and B, and their S schemata are the same.",
        "Thus, we construct the following mcfg production: (A, B) fi [(A, B)] where fi [(xi , x2)] = (axib, cx2d).",
        "Consider the following pair of productions as another example:",
        "The multiset of nonterminals in the right-hand sides are partitioned into M1 = {{A,B}} (for atr 1) and M2 = IIC, D, Dil (for atr2).",
        "For (24,112), the following mcfg production is constructed: (A, B) g [(A, B), (C, D)] where g [(xi', x3.2),",
        "TRANS 8.",
        "Conversely, for a given mcfg G, an fc-lfg G' such that L (G') = L (G) can be constructed in a similar way to TRANS 8.",
        "Details are found in (Ando 1992).",
        "LI"
      ]
    },
    {
      "heading": "9 Conclusion",
      "text": [
        "In this paper, we introduce three subclasses of lfg's, two of which can be recognized in polynomial time.",
        "Also this paper clarifies the relations between the generative capacities of those subclasses, pmcfg's and fts'."
      ]
    }
  ]
}
