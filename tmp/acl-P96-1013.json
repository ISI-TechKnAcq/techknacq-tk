{
  "info": {
    "authors": [
      "Jochen Dorre"
    ],
    "book": "Annual Meeting of the Association for Computational Linguistics",
    "id": "acl-P96-1013",
    "title": "Parsing With Semidirectional Lambek Grammar is NP-Complete",
    "url": "https://aclweb.org/anthology/P96-1013",
    "year": 1996
  },
  "references": [],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "We study the computational complexity of the parsing problem of a variant of Lambek Categorial Grammar that we call semidirectional.",
        "In semidirectional Lambek calculus SDL there is an additional non-directional abstraction rule allowing the formula abstracted over to appear anywhere in the premise sequent's left-hand side, thus permitting non-peripheral extraction.",
        "SDL grammars are able to generate each context-free language and more than that.",
        "We show that the parsing problem for semidirectional Lambek Grammar is NP-complete by a reduction of the 3 Partition problem."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "Categorial Grammar (CG) and in particular Lambek Categorial Grammar (LCG) have their well-known benefits for the formal treatment of natural language syntax and semantics.",
        "The most outstanding of these benefits is probably the fact that the specific way, how the complete grammar is encoded, namely in terms of 'combinatory potentials' of its words, gives us at the same time recipes for the construction of meanings, once the words have been combined with others to form larger linguistic entities.",
        "Although both frameworks are equivalent in weak generative capacity – both derive exactly the context-free languages – , LCG is superior to CG in that it can cope in a natural way with extraction and unbounded dependency phenomena.",
        "For instance, no special category assignments need to be stipulated to handle a relative clause containing a trace, because it is an-alyzed, via hypothetical reasoning, like a traceless clause with the trace being the hypothesis to be discharged when combined with the relative pronoun.",
        "Figure 1 illustrates this proof-logical behaviour.",
        "Notice that this natural-deduction-style proof in the type logic corresponds very closely to the phrase-structure tree one would like to adopt in an analysis with traces.",
        "We thus can derive Bill misses e as an s from the hypothesis that there is a \"phantom\" np in the place of the trace.",
        "Discharging the hypothesis, indicated by index 1, results in Bill misses being analyzed as an s 1 np from zero hypotheses.",
        "Observe, however, that such a bottom-up synthesis of a new unsaturated type is only required, if that type is to be consumed (as the antecedent of an implication) by another type.",
        "Otherwise there would be a simpler proof without this abstraction.",
        "In our example the relative pronoun has such a complex type triggering an extraction.",
        "A drawback of the pure Lambek Calculus L is that it only allows for so-called 'peripheral extraction', i.e., in our example the trace should better be initial or final in the relative clause.",
        "This inflexibility of Lambek Calculus is one of the reasons why many researchers study richer systems today.",
        "For instance, the recent work by Moortgat (Moortgat 94) gives a systematic in-depth study of mixed Lambek systems, which integrate the systems L, NI, NIP, and LP.",
        "These ingredient systems are obtained by varying the Lambek calculus along two dimensions: adding the permutation rule (P) and/or dropping the assumption that the type combinator (which forms the sequences the systems talk about) is associative (N for non-associative).",
        "Taken for themselves these variants of L are of little use in linguistic descriptions.",
        "But in Moortgat's mixed system all the different resource management modes of the different systems are left intact in the combination and can be exploited in different parts of the grammar.",
        "The relative pronoun which would, for instance, receive category (np\\np)1(np –0 s) with –o being implication in LP,1 i.e., it requires",
        "as an argument \"an s lacking an np somewhere\" .2.",
        "The present paper studies the computational complexity of a variant of the Lambek Calculus that lies between L and LP, the Semidirectional Lambek Calculus SDL.3 Since LP derivability is known to be NP-complete, it is interesting to study restrictions on the use of the LP operator – o.",
        "A restriction that leaves its proposed linguistic applications intact is to admit a type B – o A only as the argument type in functional applications, but never as the functor.",
        "Stated prove-theoretically for Gentzen-style systems, this amounts to disallowing the left rule for – o.",
        "Surprisingly, the resulting system SDL can be stated without the need for structural rules, i.e., as a monolithic system with just one structural connective, because the ability of the abstracted-over formula to permute can be directly encoded in the right rule for – 0.",
        "4 Note that our purpose for studying SDL is not that it might be in any sense better suited for a theory of grammar (except perhaps, because of its simplicity), but rather, because it exhibits a core of logical behaviour that any richer system also needs to include, at least if it should allow for non-peripheral extraction.",
        "The sources of complexity uncovered here are thus a forteriori present in all these richer systems as well.",
        "collapse."
      ]
    },
    {
      "heading": "2 Semidirectional Lambek Grammar",
      "text": []
    },
    {
      "heading": "2.1 Lambek calculus",
      "text": [
        "The semidirectional Lambek calculus (henceforth SDL) is a variant of J. Lambek's original (Lambek 58) calculus of syntactic types.",
        "We start by defining the Lambek calculus and extend it to obtain SDL.",
        "Formulae (also called \"syntactic types\") are built from a set of propositional variables (or \"primitive types\") B = {bl, b2, .}",
        "and the three binary connectives •, \\ /, called product, left implication, and right implication.",
        "We use generally capital letters A, B,C , ...to denote formulae and capitals towards the end of the alphabet T,U,V,... to denote sequences of formulae.",
        "The concatenation of sequences U and V is denoted by (U, V).",
        "The (usual) formal framework of these logics is a Gentzen-style sequent calculus.",
        "Sequents are pairs (U, A), written as U A, where A is a type and U is a sequence of types.'",
        "The claim embodied by sequent U A can be read as \"formula A is derivable from the structured database U\".",
        "Figure 2 shows Lambek's original calculus L. First of all, since we don't need products to obtain our results and since they only complicate matters, we eliminate products from consideration in the sequel.",
        "In Semidirectional Lambek Calculus we add as additional connective the LP implication – o, but equip it only with a right rule.",
        "2=- 13 – 0 A (-0 R) if T = (U,V) nonempty. '",
        "5 In contrast to Linear Logic (Girard 87) the order of types in U is essential, since the structural rule of permutation is not assumed to hold.",
        "Moreover, the fact that only a single formula may appear on the right of make the Lambek calculus an intuitionistic fragment of the multiplicative fragment of non-commutative propositional Linear Logic.",
        "Let us define the polarity of a subformula of a sequent A1, , A as follows: A has positive polarity, each of Ai have negative polarity and if BIC or C\\B has polarity p, then B also has polarity p and C has the opposite polarity of p in the sequent.",
        "A consequence of only allowing the (-o R) rule, which is easily proved by induction, is that in any derivable sequent o may only appear in positive polarity.",
        "Hence, 0 may not occur in the (cut) formula A of a (Cut) application and any subformula B o A which occurs somewhere in the prove must also occur in the final sequent.",
        "When we assume the final sequent's RHS to be primitive (or -o-less), then the (-o R) rule will be used exactly once for each (positively) occuring -o-subformula.",
        "In other words, (-o R) may only do what it is supposed to do: extraction, and we can directly read off the category assignment which extractions there will be.",
        "We can show Cut Elimination for this calculus by a straightforward adaptation of the Cut elimination proof for L. We omit the proof for reasons of space.",
        "Proposition 1 (Cut Elimination) Each SDL-derivable sequent has a cut-free proof The cut-free system enjoys, as usual for Lambek-like logics, the Subformula Property: in any proof only subformulae of the goal sequent may appear.",
        "In our considerations below we will make heavy use of the well-known count invariant for Lambek systems (Benthem 88), which is an expression of the resource-consciousness of these logics.",
        "Define #b(A) (the b-count of A), a function counting positive and negative occurrences of primitive type b in an arbitrary type A, to be",
        "if A primitive and A 0 b",
        "The invariant now states that for any primitive b, the b-count of the RHS and the LHS of any derivable sequent are the same.",
        "By noticing that this invariant is true for (Ax) and is preserved by the rules, we immediately can state: Proposition 2 (Count Invariant) IfESDL U A, then #b(U) = #b(A) for any b E B.",
        "Let us in parallel to SDL consider the fragment of it in which (/R) and (\\R) are disallowed.",
        "We call this fragment SDL-.",
        "Remarkable about this fragment is that any positive occurrence of an implication must be o and any negative one must be / or \\"
      ]
    },
    {
      "heading": "2.2 Lambek Grammar",
      "text": [
        "Definition 3 We define a Lambek grammar to be a quadruple (E, F, b5, 1) consisting of the finite alphabet of terminals E, the set .F of all Lambek formulae generated from some set of propositional variables which includes the distinguished variable s, and the lexical map 1: E 2.;* which maps each terminal to a finite subset of .F.",
        "We extend the lexical map I to nonempty strings of terminals by setting /(wiw2 wn) := d(wi) x",
        "The language generated by a Lambek grammar G =",
        "of types U E 1(wiw2 wn) and FLU bs.",
        "We denote this language by L(G).",
        "An SDL-grammar is defined exactly like a Lambek grammar, except that 1-su replaces EL.",
        "Given a grammar G and a string w = w1w2 wn, the parsing (or recognition) problem asks the question, whether w is in L(G).",
        "It is not immediately obvious, how the generative capacity of SDL-grammars relate to Lambek grammars or nondirectional Lambek grammars (based on calculus LP).",
        "Whereas Lambek grammars generate exactly the context-free languages (modulo the missing empty word) (Pentus 93), the latter generate all permutation closures of context-free languages (Benthem 88).",
        "This excludes many context-free or even regular languages, but includes some context-sensitive ones, e.g., the permutation closure of an bn en .",
        "Concerning SDL, it is straightforward to show that all context-free languages can be generated by SDL-grammars.",
        "Proposition 4 Every context-free language is generated by some SDL-grammar.",
        "Proof.",
        "We can use a the standard transformation of an arbitrary cfr.",
        "grammar G = (N ,T, P, 8) to a categorial grammar G'.",
        "Since o does not appear in G' each SDL-proof of a lexical assignment must be also an L-proof, i.e. exactly the same strings are judged grammatical by SDL as are judged by L. 0 Note that since the {(Ax), (I L),(\\L)} subset of L already accounts for the cfr.",
        "languages, this observation extends to SDL-Moreover, some languages which are not context-free can also be generated.",
        "Example.",
        "Consider the following grammar G for the language eV' c\" .",
        "We use primitive types B = {b , c, x, y, z} and define the lexical map for E =",
        "The distinguished primitive type is x.",
        "To simplify the argumentation, we abbreviate types as indicated above.",
        "Now, observe that a sequent U x, where U is the image of some string over E, only then may have balanced primitive counts, if U contains exactly one occurrence of each of A2, B2 and C2 (accounting for the one supernumerary x and balanced y and z counts) and for some number n > 0, n occurrences of each of A1, B1, and C1 (because, resource-oriented speaking, each Bi and Ci \"consume\" a b and c, resp., and each Ai \"provides\" a pair b, c).",
        "Hence, only strings containing the same number of a's, b's and c's may be produced.",
        "Furthermore, due to the Subformula Property we know that in a cut-free proof of U x, the main formula in abstractions (right rules) may only be either c o (b o X) or b o X, where X E {x,y}, since all other implication types have primitive antecedents.",
        "Hence, the LHS of any sequent in the proof must be a subsequence of U, with some additional b types and c types interspersed.",
        "But then it is easy to show that U can only be of the form Al', A2, Br, B2, Cr', C2, since any / connective in U needs to be introduced via (IL).",
        "It remains to be shown, that there is actually a proof for such a sequent.",
        "It is given in Figure 3.",
        "The sequent marked with *is easily seen to be derivable without abstractions.",
        "A remarkable point about SDL's ability to cover this language is that neither L nor LP can generate it.",
        "Hence, this example substantiates the claim made in",
        "(Moortgat 94) that the inferential capacity of mixed Lambek systems may be greater than the sum of its component parts.",
        "Moreover, the attentive reader will have noticed that our encoding also extends to languages having more groups of n symbols, i.e., to languages of the form a7a72' Finally, we note in passing that for this grammar the rules (/R) and (\\R) are irrelevant, i.e. that it is at the same time an SDL- grammar."
      ]
    },
    {
      "heading": "3 NP-Completeness of the Parsing Problem",
      "text": [
        "We show that the Parsing Problem for SDL-grammars is NP-complete by a reduction of the 3-Partition Problem to it.6 This well-known NP-complete problem is cited in (GareyJohnson 79) as follows.",
        "Instance: Set A of 3m elements, a bound N E Z+, and a size s(a) E Z+ for each a E A such that < s(a) <1+ and EnEA s(a)= mN.",
        "Question: Can A be partitioned into m disjoint",
        "exactly 3 elements from A)?",
        "Comment: NP-complete in the strong sense.",
        "Here is our reduction.",
        "Let r = (A, in, N, s) be a given 3-Partition instance.",
        "For notational convenience we abbreviate (...((A1B1)1B2)1 _VA, by A/B„ • ...• B2 • B1 and similarly B, 0 (• • • (131 0 A) .",
        "..) by Bn• ...• B2 • Bi – 0 A, but note that this is just an abbreviation in the product-free fragment.",
        "Moreover the notation Ak stands for A • A • ... • A k times We then define the SDL-grammar Gr = bs, I) as follows:",
        "The word we are interested in is v w1 w2 We do not care about other words that might be generated by Gr.",
        "Our claim now is that a given 3-Partition problem r is solvable if and only if V w3,7, is in L(Gr).",
        "We consider each direction in turn.",
        "Lemma 5 (Soundness) If a 3-Partition problem F (A,m,N,․) has a solution, then vw1...w3,, is in L(Gr)• Proof.",
        "We have to show, when given a solution to F, how to choose a type sequence U E d(vwi w3m) and construct an SDL proof for U a.",
        "Suppose A = {al, a2, , a3,}.",
        "From a given solution (set of triples) A1, A2, ,A,, we can compute in polynomial time a mapping k that sends the index of an element to the index of its solution triple, i.e., k(i) = j if ai E Ai.",
        "To obtain the required sequence U, we simply choose for the wi terminals the type",
        "Let a/B0, ... Barn, a be a shorthand for (*), and let X stand for the sequence of primitive types bk (3m) , Cs4a33,77)), bk(3m – 1 ) , Csk((a33,77:11?",
        ", • • • bk (1) Csk((aij) • Using rule (IL) only, we can obviously prove • .",
        "B3m , X d. Now, applying (-o R)3m-I-Nm times we can obtain B1, B3m, B0, since there are in total, for each i, 3 bi and N ci in X.",
        "As final step we have"
      ]
    },
    {
      "heading": "Bi,...B3mBo a a ,",
      "text": [
        "a/B0, 131,.../33/73 a \") which completes the proof.",
        "0 Lemma 6 (Completeness) Let F = (A, m, N, s) be an arbitrary 3-Partition problem and Gr the corresponding SDL-grammar as defined above.",
        "Then r has a solution, if v ...w3„, is in L(Gr)• Proof.",
        "Let v wi ...w3m E L(Gr) and a/(b33.",
        "• ... • b3m ciiv • ... • cmN o d), Bi, B3m a be a witnessing derivable sequent, i.e., for 1 < i < 3m, B, E ).",
        "Now, since the counts of this sequent must be balanced, the sequence B1,",
        "must contain for each 1 < j < m exactly 3 bi and exactly N ci as subformulae.",
        "Therefore we can read off the solution to I' from this sequent by including in Aj (for 1 < j < m) those three ai for which Bi has an occurrence of b, say these are aj(1), ni(2) and ct2(3).",
        "We verify, again via balancedness of the primitive counts, that s(aj(i)) s(a3(2))+ s(ai(3)) = N holds, because these are the numbers of positive and negative occurrences of ci in the sequent.",
        "This completes the proof.",
        "0 The reduction above proves NP-hardness of the parsing problem.",
        "We need strong NP-completeness of 3-Partition here, since our reduction uses a unary encoding.",
        "Moreover, the parsing problem also lies within NP, since for a given grammar G proofs are linearly bound by the length of the string and hence, we can simply guess a proof and check it in polynomial time.",
        "Therefore we can state the following:",
        "Finally, we observe that for this reduction the rules (/R) and (\\R) are again irrelevant and that we can extend this result to SDL"
      ]
    },
    {
      "heading": "4 Conclusion",
      "text": [
        "We have defined a variant of Lambek's original calculus of types that allows abstracted-over categories to freely permute.",
        "Grammars based on SDL can generate any context-free language and more than that.",
        "The parsing problem for SDL, however, we have shown to be NP-complete.",
        "This result indicates that efficient parsing for grammars that allow for large numbers of unbounded dependencies from within one node may be problematic, even in the categorial framework.",
        "Note that the fact, that this problematic case doesn't show up in the correct analysis of normal NL sentences, doesn't mean that a parser wouldn't have to try it, unless some arbitrary bound to that number is assumed.",
        "For practical grammar engineering one can devise the motto avoid accumulation of unbounded dependencies by whatever means.",
        "On the theoretical side we think that this result for SDL is also of some importance, since SDL exhibits a core of logical behaviour that any (Lambek-based) logic must have which accounts for non-peripheral extraction by some form of permutation.",
        "And hence, this result increases our understanding of the necessary computational properties of such richer systems.",
        "To our knowledge the question, whether the Lambek calculus itself or its associated parsing problem are NP-hard, are still open."
      ]
    }
  ]
}
