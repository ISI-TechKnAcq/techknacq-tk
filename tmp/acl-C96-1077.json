{
  "info": {
    "authors": [
      "Edmund Grimley-Evans",
      "George Anton Kiraz",
      "Stephen G. Pulman"
    ],
    "book": "International Conference on Computational Linguistics",
    "id": "acl-C96-1077",
    "title": "Compiling a Partition-Based Two-Level Formalism",
    "url": "https://aclweb.org/anthology/C96-1077",
    "year": 1996
  },
  "references": [
    "acl-C90-2064",
    "acl-C94-1029",
    "acl-C94-1066",
    "acl-E87-1003",
    "acl-E95-1028",
    "acl-J94-3001",
    "acl-P95-1004"
  ],
  "sections": [
    {
      "text": [
        "Cambridge CB2 3QG, UK and SRI International, Cambridge sgp®cam.",
        "sri .",
        "corn"
      ]
    },
    {
      "heading": "Abstract",
      "text": [
        "This paper describes an algorithm for the compilation of a two (or more) level orthographic or phonological rule notation into finite state transducers.",
        "The notation is an alternative to the standard one deriving from Koskenniemi's work: it is believed to have some practical descriptive advantages, and is quite widely used, but has a different interpretation.",
        "Efficient interpreters exist for the notation, but until now it has not been clear how to compile to equivalent automata in a transparent way.",
        "The present paper shows how to do this, using some of the conceptual tools provided by Kaplan and Kay's regular relations calculus."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "Two-level formalisms based on that introduced by (Koskenniemi, 1983) (see also (Ritchie et al., 1992) and (Kaplan and Kay, 1994)) are widely used in practical NLP systems, and are deservedly regarded as something of a standard.",
        "However, there is at least one serious rival two-level notation in existence, developed in response to practical difficulties encountered in writing large-scale morphological descriptions using Koskenniemi's notation.",
        "The formalism was first introduced in (Black et al., 1987), was adapted by (Ruessink, 1989), and an extended version of it was proposed for use in the European Commission's ALEP language engineering platform (Pulman, 1991).",
        "A further extension to the formalism was described in (Pulman and Hepple, 1993).",
        "The alternative partition formalism was motivated by several perceived practical disadvan",
        "tages to Koskenniemi's notation.",
        "These are detailed more fully in (Black et al., 1987, pp.",
        "13-15), and in (Ritchie et al., 1992, pp.",
        "181-9).",
        "In brief: (1) Koskenniemi rules are not easily interpretable (by the grammarian) locally, for the interpretation of 'feasible pairs' depends on other rules in the set.",
        "(2) There are frequently interactions between rules: whenever the lexical/surface pair affected by a rule A appears in the context of another rule B, the grammarian must check that its appearance in rule B will not conflict with the requirements of rule A.",
        "(3) Contexts may conflict: the same lexical character may obligatorily have multiple realisations in different contexts, but it may be impossible to state the contexts in ways that do not block a desired application.",
        "(4) Restriction to single character changes: whenever a change affecting more than one adjacent character occurs, multiple rules must be written.",
        "At best this prompts the interaction problem, and at worst can require the rules to be formulated with under-restrictive contexts to avoid mutual blocking.",
        "(5) There is no mechanism for relating particular rules to specific classes of morpheme.",
        "This has to be achieved indirectly by introducing special abstract triggering characters in lexical representations.",
        "This is clumsy, and sometimes descriptively inadequate (Trost, 1990).",
        "Some of these problems can be alleviated by the use of a rule compiler that detects conflicts such as that described in (Karttunen and Beesley, 1992).",
        "Others could be overcome by simple extensions to the formalism.",
        "But several of these problems arise from the interpretation of Koskenniemi rules: each rule corresponds to a transducer, and the two-level description of a language consists of the intersection of these transducers.",
        "Thus somehow or other it must be arranged that every rule accepts every two-level correspondence.",
        "We refer to this class of formalisms as 'parallel': every rule, in effect, is applied in parallel at each point in the input.",
        "The partition formalism consists of two types of rules (defined in more detail below) which enforce optional or obligatory changes.",
        "The notion of well-formedness is defined via the notion of a `partition' of a sequence of lexical/surface cone-spondences.",
        "Informally, a partition is a valid analysis if (i) every element of the partition is licensed by an optional rule, and (ii) no element of the partition violates an obligatory rule.",
        "We have found that this formalism has some practical advantages: (1) The rules are relatively independent of each other.",
        "(2) Their interpretation is more familiar for linguists: each rule copes with a single correspondence: in general you don't have to worry about all other rules having to be compatible with it.",
        "(3) Multiple character changes are permitted (with some restrictions discussed below).",
        "(4) A category or term associated with each rule is required to unify with the affected morpheme, allowing for morpho-syntactic effects to be cleanly described.",
        "(5) There is a simple and efficient direct interpreter for the rule formalism.",
        "The partition formalism has been implemented in the European Commission's ALEP system for natural language engineering, distributed to over 30 sites.",
        "Descriptions of 9 EU languages are being developed.",
        "A version has also been implemented within SRI'S Core Language Engine (Carter, 1995) and has been used to develop descriptions of English, French, Spanish, Polish, Swedish, and Korean morphology.",
        "An N-level extension of the formalism has also been developed by (Kiraz, 1994; Kiraz, 1996b) and used to de scribe the morphology of Syriac and other Semitic languages, and by (Bowden and Kiraz, 1995) for error detection in nonconcatenative strings.",
        "This partition-based two-level formalism is thus a serious rival to the standard Koskenniemi notation.",
        "However, until now, the Koskennietni notation has had one clear advantage in that it was clear how to compile it into transducers, with all the consequent gains in efficiency and portability and with the ability to construct lexical transducers as in (Karttunen, 1994).",
        "This paper sets out to remedy that defect by describing a compilation algorithm for the partition-based two-level notation."
      ]
    },
    {
      "heading": "2 Definition of the Formalism",
      "text": []
    },
    {
      "heading": "2.1 Formal Definition",
      "text": [
        "We use a tapes, where the first N tapes are lexical and the remaining M are surface, it = N + M. hi practice, M. 1.",
        "We write for the alphabet of symbols used on tape i, and •=: (211 U {c}) x x U so that 2]* is the set of string-tuples representing possible contents of the a tapes.",
        "A proper subset of regular n-relations have the property that they are expressible as the Cartesian product of a regular languages, 11 = R1 x ... x .ilit; we call such relations 'orthogonal'.",
        "(We present our definitions along the lines of (Kaplan and Kay, 1994)).",
        "We use two regular operators: Intro and Sub.",
        "IntrosL denotes the set of strings in L into which elements of S may be arbitrarily inserted, and Subn,nL denotes the set of strings in L in which substrings that; are in B may be replaced by strings from A.",
        "Both operators map regular languages into regular languages, because they can be characterised by regular relations: over the alphabet X, Intros = (Idx; U (10 x S))*, Subs 73 = (Id> U (B x A))*, where Id1, = {(s, s) s E L}, the identity relation over L. There are two kinds of two-level rules.",
        "The context restriction, or optional, rules, consist of a left context 1, a centre c, and a right context r. Surface coercion, or obligatory, rules require the centre to be split into lexical c1 and surface es components.",
        "rule is a quadruple (1, 0, cs,r) where 1 and r are 'orthogonal' regular relations of the form 1 = x x r = rl x x r„, and eland cs are 'orthogonal' regular relations restricting only the lexical and surface tapes, respectively, of the form GI = c1 x x CN x x x E*N+A4 and Cs = x x Y,N* X eN.1.1 X... X eN4.m.",
        "❑ We usually use the following notation for rules:",
        "where LLC (left lexical context) = (4, , IN) Lux (lexical form) = , • • • , eN) RFC (right lexical context) = (rt , •77W) LSC (left surface context) = (1N-v17 • • • ) 1N+M) Sulu' (surface form) (c/v+i , • • •7 C N -1-114) RSC (right surface context) = (rN+-1, , Since in practice all the left contexts ti start with and all the right contexts ri end with Ki*, we omit writing it and assume it by default.",
        "'The operators are: ,=> for CR rules, <= for SC rules and -<_> for composite rules.",
        "A proposed morphological analysis P is an a-tuple of strings, and the rules are interpreted as applying to a section of this analysis in context:",
        "P (n-way concatenation of a left context, centre, and right context).",
        "Formally:",
        "a pair (1?–., R.<_), where is a set of N:M context restriction rules and is a set of N:M surface coercion rules.",
        "❑ Definition 2.6 A two-level grammar (R,, 1:?,<„) accepts the string-tuple P, partitioned as",
        "nation) and (1) for each i there is a CR rule A such that A contextually allows , Pi+i ...Pk) and (2) there are no i < j such that there is an SC rule B E R such that B coercively disallows (P , P j Pj ...Pk) • There are some alternatives to condition (2): (2i) there is no i such that there is an SC rule B C such that B coercively disallows , Pi, .Pk): tins is (2) with the restriction j = i + 1; since SC rules can only apply to the partitions Pi, epenthetic rules such as (E*(k, k), e x x a, (k, k)E* ) (`insert an a between lexical and surface ks') can not be enforced: the rule would disallow adjacent (k, k)s only if they were separated by an empty partition: ... (k, k), €, (k, k)... would be disallowed, but ...(k, k), (k, k)... would be accepted.",
        "(2ii) there is no i such that there is an SC rule B such that B coercively disallows (Pi...Pi_ Pi+1...Pk) or B coercively disallows , Pi...Pk): this is (2) with the restriction j + 1 or j = i; this allows epenthetic rules to be used but may in certain cases be counterintuitive for the user when insertion rules are used.",
        "For example, the rule (E* (g, g) , u x >74, Ei x v, E*) (`change u to v after a g') would not disallow a string-tuple partitioned as ...(g, g), (c, e), (u, u)... assuming some CR rule allows (c, e).",
        "Earlier versions of the partition formalism could not (in practice) cope with multiple lexical characters in SC rules see (Carter, 1995, §4.1).",
        "This is not the case here.",
        "The following rules illustrate the formalism:",
        "RA and R2 illustrate the iterative application of rules on strings: they sanction the lexical-surface strings (VBBB, Vbbb), where the second (B,b) pair serves as the centre of the first application of 11,2 and as the left context of the second application of the same rule.",
        "11,3 is an epenthetic rule which also demonstrates centres of unequal length.",
        "(We assume that (V,V), (c,c) and (d,d) are sanctioned by other identity rules.)",
        "The conditions in Definitions 2.1 and 2.2 that restrict the regular relations in the rules to being 'orthogonal' are required in order for the final language to be regular, because Definition 2.6 involves an implicit intersection of rule contexts, and we know that the intersection of regular relations is riot in general regular."
      ]
    },
    {
      "heading": "2.2 Regular Expressions for Compilation",
      "text": [
        "To compile a two-level grammar into an automaton we use a calculus of regular languages.",
        "We first use the standard technique of converting regular n-relations into same-length regular relations by padding them with a space symbol 0.",
        "Unlike arbitrary regular n-relations, same-length regular relations are closed under intersection and complementation, because a theorem tells us that they correspond to regular languages over (c-free) n-tuples of symbols (Kaplan and Kay, 1994, p. 342).",
        "A proposed morphological analysis P can be represented as a same-length string-tuple",
        "to a same-length string-tuple by padding with Os, and co = ..., con) , where the ILO are new symbols to indicate the partition boundaries, wi EZ U {O}.",
        "Since in a partitioned string-tuple accepted by the grammar (.1?„,., R.,,) each Pi E c for some CR rule (1, c, r) E Rte,we can make this representation unique by defining a canonical way of converting each such possible centre C into a same-length string-tuple C. A simple way of doing this is to pad with Os at the right making each string as long as the longest string in C: if C (p1, , a = (7740*, PnO*) n E*(0, 0) (1) However, since we know the set of possible partitions - it is life I 91, r (1, c, r) E .11„›.1 - we can reduce the number of elements of E in use, and hence simplify the calculations, by inserting the Os in a more flexible manner: e.g., if C (ab, b), let (ab, Ob) rather than (ab, b0): assuming another rule requires us to use (b, b) anyway, we only have to add (a, 0) rather than (a, b) and (5, 0).",
        "The preprocessor could use simple heuristics to make such decisions.",
        "In any case, the padding of possible partitions carries over to the centres c of CR rules: if (1, c, r) E {C C E c}.",
        "Henceforth let 71 be the set of elements of > that appear in some 0-padded rule centre.",
        "The contexts of all rules and the lexical and surface centres of SC rules must be converted into same-length regular n-relations by inserting Os at all possible positions on each tape independently: if x x x „, o f, x , x x Introw) n 71* (2) Note the difference between this insertion of 0 everywhere, denoted 3:°, and the canonical padding a.",
        "Boil require the 'orthogonality' condition in order for the intersection with 71-* to yield a regular language: inserting Os into (a, b)* at all possible positions on each tape independently would give a non-regular relation, for example.",
        "Now we derive a formula for the set of 0-padded and partitioned analysis strings accepted by the grammar (R , 1?",
        "): The set of 0-padded centres of context, restriction rules is given by:",
        "Here we assume that these centres are disjoint, (Vc, d C .D.c = d V c d = 0), because in practice each c is a singleton set, however there is an alternative derivation that does not require this.",
        "We proceed subtractively, starting as an initial approximation with an arbitrary concatenation of the possible partitions, i.e. the centres of CR, rules:",
        "From this we wish to subtract the set of strings containing a partition that is not allowed by any CB, rule: We introduce a new placeholder symbol T, T V7rUlwl, to represent the centre of a rule, so the set of possible contexts for a given centre",
        "Now we can introduce the partition separator w throughout, then substitute the centre itself, wh,), for its placeholder T irr order to derive an expression for the set of partitioned strings in which an instance of the centre c appears in a context in which it is not allowed: [o denotes composition] (Sub,,&,,,, 0 Introm 7r*-r7r* -- U10,7T°",
        "If we subtract a term like this for each 1.: E D from our initial approximation (eq.",
        "4), then we have an expression for the set of strings allowed by the CB, rules of the grammar:",
        "It remains to enforce the surface coercion rules For a given SC rule (1, cs , E R<_:, a first approximation to the set of strings in which tins rule is violated is given by:",
        "Here – ) is the set of strings that match the lexical centre but do not match the surface centre.",
        "For part (2) of Definition 2.6 to apply this must equal the concatenation of 0 or more adjacent partitions, hence it has on each side of it the partition separator w, and the operator Intro introduces additional partition separators into the contexts and the centre.",
        "The only case not yet covered is where the centre matches 0 adjacent partitions j in part (2) of Definition 2.6).",
        "This can be dealt with by prefixing with the substitution operator so the set; of strings in which one of the SC rules is violated is: 0 Introm (1° w (c?",
        "– c!,),)cur()) 10) We subtract this too from our approximation (eq.",
        "8) in order to arrive at, a formula for the set of 0-padded and partitioned strings that; are accepted by the grammar:",
        "Finally, we can replace the partition separator w and the space symbol 0 by f to convert So into a regular (but no longer same-length) relation S that maps between lexical and surface representations, as in (Kaplan and Kay, 1994, p. 368)."
      ]
    },
    {
      "heading": "3 Algorithm and Illustration",
      "text": [
        "Tins section goes through the compilation of the sample grammar in section 2.1 step by step."
      ]
    },
    {
      "heading": "3.1 Preprocessing",
      "text": [
        "Preprocessing involves making all expressions of equal-length.",
        "Let, El = {V,B,c,d,0} and E2 = {V,b,c,d,0} be the lexical and surface alphabets, respectively.",
        "We pad all centres with O's (eq.",
        "1), then compute the set of 0-padded centres (eq.",
        "3),",
        "We also compute contexts (eq.",
        "2).",
        "Uninstantiated contexts become Intro{0}(En x Intro{o}(E2*) (13) The right context of R3, for instance, becomes"
      ]
    },
    {
      "heading": "3.2 Compilation into Automata",
      "text": [
        "The algorithm consists of three phases: (1) constructing a FSA which accepts the centres, (2) applying CR rules, and (3) forcing SC constraints.",
        "The first approximation to the grammar (eq.",
        "4) produces FS Ai which accepts all centres.",
        "FS Ai Phase 2 deals with CR rules.",
        "We have two centres to process: (B,b) (R1 & R2) and (0,b) (R3).",
        "For each centre, we compute the set of invalid contexts in which the centre occurs (eq.",
        "7).",
        "Then we subtract this from FSAi (eq.",
        "8), yielding FSA2.",
        "The third phase deals with SC rules: here the portion of R3.",
        "Firstly, we compute the set of strings in which R3 is violated (eq.",
        "10).",
        "Secondly, we subtract the result from FSA2 (eq.",
        "11), resulting in an automaton which only differs from FSA2 in that the edge from q5 to qo is deleted."
      ]
    },
    {
      "heading": "4 Comparison with Previous Compilations",
      "text": [
        "This section points out the differences in compiling two-level rules in Koskenniemi's formalism on one hand, and the one presented here on the other."
      ]
    },
    {
      "heading": "4.1 Overlapping Contexts",
      "text": [
        "One of the most important requirements of two-level rules is allowing the multiple applications of a rule on the same string.",
        "It is this requirement which makes the compilation procedures in the Koskenniemi formalism – described in (Kaplan and Kay, 1994) – inconvenient.",
        "'The multiple application of a given rule', they state, 'will turn out to be the *major source of difficulty in expressing rewriting rules in terms of regular relations and finite-state transducers' (p. 346).",
        "The same difficulty applies to two-level rules.",
        "Consider R1 and R2 (§2.1), and D = {(V,V), (B,b)}.",
        "(Kaplan and Kay, 1994) express CR rules by the relation,'",
        "This expression 'does not allow for the possibility that the context substring of one application might overlap with the centre and context portions of a preceding one' (p. 371).",
        "They resolve this by using auxiliary symbols: (1) They introduce left and right context brackets, <k and >k, for each context pair lk – rk of a specific centre which take the place of the contexts.",
        "(2) Then they ensure that each <k:<k only occurs if its context 1k has occurred, and each >k:>k only occurs if followed by its context rk.",
        "The automaton which results after compiling the two rules is:",
        "B:b V:V Our algorithm produces this machine directly.",
        "Compiling Koskenniemi's formalism is complicated by its interpretation: rules apply to the entire input.",
        "A partition rule is concerned only with the part of the input that matches its centre.",
        "1 This expression is an expansion of Restrict in (Kaplan and Kay, 1994, p. 371)."
      ]
    },
    {
      "heading": "4.2 Conditional Compilation",
      "text": [
        "Compiling epenthetic rules in the Koskermiemi formalism requires special means; hence, the algorithm is conditional on the type of the rule (Kaplan and Kay, 1994, p. 374).",
        "This peculiarity, in the Koskenniemi formalism, is clue to the dual interpretation of the 0 symbol in the parallel formalism: it is a genuine symbol in the alphabet, yet it acts as the empty string € in two-level expressions.",
        "Note that it is the duty of the user to insert such symbols as appropriate (Karttunen and Beesley, 1992).",
        "This duality does not hold in the partition formalism.",
        "The user can express lexical-surface pairs of unequal lengths.",
        "It is the duty of the rule compiler to ensure that all expressions are of equal length prior to compilation.",
        "With CR rules, this is done by padding zeros.",
        "With SC rules, however, the Intro operator accomplishes tins task.",
        "There is a subtle, but important, difference here.",
        "Consider rule R3 (§2.1).",
        "The 0-padded centre of the CR portion becomes (0,b).",
        "The SC portion, however, is computed by the expression",
        "If the centre of the SC portion had been padded with O's, the centre would have been",
        "yielding the undesired automaton (b).",
        "Both are similar except that state go is final in the former.",
        "Taking (a) as the centre, eq.",
        "10 includes (cd,cd); hence, eq.",
        "11 excludes it.",
        "The compilation of our rules is not conditional; it is general enough to cope with all sorts of rules, epenthetic or not."
      ]
    },
    {
      "heading": "5 Conclusion and Future Work",
      "text": [
        "This paper showed how to compile the partition formalism into N-tape automata.",
        "Apart from increased efficiency and portability of implementations, this result also enables us to more easily relate this formalism to others in the field, using the finite-state calculus to describe the relations implemented by the rule compiler.",
        "A small-scale prototype of the algorithm has been implemented in Prolog.",
        "The rule compiler makes use of a finite-state calculus library which allows the user to compile regular expressions into automata.",
        "The regular expression language includes standard operators in addition to the operators defined here.",
        "The system has been tested with a number of hypothetical rule sets (to test the integrity of the algorithm) and linguistically motivated morphological grammars which make use of multiple tapes.",
        "Compiling realistic descriptions would need a more efficient implementation in a more suitable language such as C/C++.",
        "Future work includes an extension to simulate a restricted form of unification between categories associated with rules and morphemes."
      ]
    }
  ]
}
