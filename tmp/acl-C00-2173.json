{
  "info": {
    "authors": [
      "Derek Walker",
      "Dominique Petitpierre",
      "Susan Armstrong"
    ],
    "book": "International Conference on Computational Linguistics",
    "id": "acl-C00-2173",
    "title": "XMLTrans: A Java-Based XML Transformation Language for Structured Data",
    "url": "https://aclweb.org/anthology/C00-2173",
    "year": 2000
  },
  "references": [],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "The recently completed MLIS DicoPro project addressed the need for a uniform, platform-independent interface for accessing multiple dictionaries and other lexical resources via the Internet/intranets.",
        "Lexical data supplied by dictionary publishers for the project was in a variety of SGMI, formats.",
        "In order to transform this data to a convenient standard format (HTML), a high level transformation language was developed.",
        "This language is simple to use, yet powerful enough to perform complex transformations not possible with similar transformation tools.",
        "XMLTrans provides rooted/recursive transduc-tions, similar to transducers used for natural language translation.",
        "The tool is written in standard Java and is available to the general public."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "The MLIS DicoPro projects, which ran from April 1.998 to Sept 1.999, addressed the need for a uniform, platform-independent interface for accessing multiple dictionaries and other lexical resources via the Internet/intranets.",
        "One project deliverable was a client-server tool enabling translators and other language professionals connected to an intranet to consult dictionaries and related lexical data from multiple sources.",
        "Dictionary data was supplied by participating dictionary publishers in a variety of proprietary formats2.",
        "One important DicoPro module was a transformation language capable of 1DicoPro was a project funded within the Multilingual Information Society programme (MLIS), an EU initiative launched by the European Commission's DC-1 XIII and the Swiss Federal Office of Education and Science.",
        "standardizing the variety of lexical data.",
        "The language needed to be straightforward enough for a non-programmer to master, yet powerful enough to perform all the transformations necessary to achieve the desired output.",
        "The result of our efforts, XMLTrans, takes a.s input a well-formed XML file and a file containing a set of transformation rules and gives a.s output the application of the rules to the input file.",
        "The transducer was designed for the processing of large XML files, keeping only the minimum necessary part of the document in memory at all times.",
        "This tool should be of use for anyone wishing to transform large amounts of (particularly lexical) data from one XML representation to another.",
        "At the time XMLTrans was being developed (mid 1998), XML was only an emerging standard.",
        "As a consequence, we first looked to more established SGML resources to find a suitable transformation tool.",
        "Initial experimentation began with DSSSL (13ingha,m, 1996) as a possible solution.",
        "Some time was invested in developing a user-friendly \"front-end\" to the DSSSL engine jade developed by James Clark (Clark, 1998).",
        "This turned out to be extremely cumbersome to implement, and was abandoned.",
        "There were a number of commercial products such as Omnimark Light (Ominimark Corp; 1.998), TXL (Legasys Corp; 1.998) and Patt141 (IBM Corp; 1998) which looked promising but could not be used since we wanted our transducer to be in the public domain.",
        "We subsequently began to examine available XML transduction resources.",
        "XSL (Clark, beach, 1998) was still not mature enough to rely on as a core for the language.",
        "In addition, XSL did not (at the time) provide for rooted, recursive transductions needed to convert the complex data, structures found in DicoPro's lexical",
        "d at a .",
        "Edinbu rgh 's Language Technology Group had produced a number of useful SGML/XMl manipulation tools (LTG, 1999).",
        "Unfortunately none of these matched our specific needs.",
        "For instance, sgmlfrans does not permit matching of complex expressions involving elements, text, and attributes.",
        "Another LTG tool, sgrpq is more powerful, but its control files have (in our opinion) a non-intuitive and complex syntax3.",
        "Since a large number of standardized XML APIs had been developed for the Java programming language this appeared to be a promising direction.",
        "In addition, Java's portability was a strong drawing point.",
        "The API model which best suited our needs was the \"Document Object Model\" (D01\\4) with an underlying \"Simple API for X1\\417 (SAX) parser.",
        "The event-based SA.X parser reads into memory only the dements in the input document relevant to the transformation.",
        "In effect, XMLTrans is intended to process lexical entries which are independent of each other and that have a few basic formats.",
        "Since only one entry is ever in memory at any given point in time, extremely large files can be processed with low memory overhead.",
        "The DOM API is used in the transformation process to access the the element which is currently in memory.",
        "The element is transformed according to rules specified in a rule file.",
        "These rules are interpreted by XMLTrans as operations to perform on the data through the DOM.",
        "API.",
        "We begin with a simple example to illustrate the kinds of transformations performed by XMLTrans.",
        "Then we introduce the language concepts and structure of XMLTrans rules and rule files.",
        "A comparison of XMLTrans with XSLT will help situate our work with respect to the state-of-the-art in XML data processing.",
        "2 An example transformation A typical dictionary entry might have a surprisingly complex structure.",
        "The various components of the entry: headword, part-of-speech, pronunciation, definitions, translations, may themselves contain complex substructures.",
        "Igor DicoPro, these structures were interpreted in 017- 3'fhe LTG have since developed another interesting transformation tool called X1141,Per1.",
        "der to construct IITML output for typographical rendition and also to extract indexing information.",
        "We would like to convert this entry to extracting the headword for indexing purposes.",
        "Applying the rules which are shown in section 4, XMLTrans generates the following output:",
        "if this were an actual dictionary, the XMIXrans transducer would iterate over all the entries in the dictionary, converting each in turn to the output format above."
      ]
    },
    {
      "heading": "3 Aspects of the XMLTrans language",
      "text": [
        "Each XMLTrans rule file contains a number of rule sets as described in the next sections.",
        "The transducer attempts to match each rule in the set sequentially until either a rule matches Or there are no more rules.",
        "The document DTD is not used to check the validity of the input document.",
        "Consequently, input documents need not be valid XML, but must still be well-formed to be accepted by the parser.",
        "The rule syntax borrows heavily from that of regular expressions and in so doing it allows for very concise and compact rule specification.",
        "A.s will be seen shortly, many simple rules can be expressed in a single short line."
      ]
    },
    {
      "heading": "3.1 Rule Sets",
      "text": [
        "At the top of an X.MLTrans rule file at least one \"trigger\" is required to associate an XML element(e.g. an element containing a dictionary entry) with a collection of rules, called a \"rule set\".",
        "The syntax for a \"trigger\" is as follows:",
        "Multiple triggers can be used to allow different kinds of rules to process different kinds of elements.",
        "For example:",
        "The rule set itself is declared with the following syntax: 0 [rule set name] For example`: normalEntryRules ; the rules for this set follow ; the declaration...",
        "The rule set is terminated either by the end of the file or with the declaration of another rule set."
      ]
    },
    {
      "heading": "3.2 Variables",
      "text": [
        "In XMITI.",
        "'ram rule syntax, variables (prefaced with \"s\") are implicitly declared with their first use.",
        "There are two types of variables:",
        "• Element variables: created by an assignment of a pattern of elements to a variable.",
        "For example: $a = LI, where <1,1> is an element.",
        "Element variables can contain one or more elements.",
        "If a given variable $a contains a list of elements { A, B, C, transforming $a will apply the transformation in sequence to <A>, <13>, <C> and so on.",
        "• Attribute variables: created by an assignment of a pattern of attributes to a variable.",
        "For Example: LI [ $a=TYPE ], where TYPE is a standard XML attribute.",
        "While variables are not strongly typed (i.e. a list of elements is not distinguished from an individual element), attribute variables cannot be used in the place of element variables and vice versa."
      ]
    },
    {
      "heading": "3.3 Rules",
      "text": [
        "The basic control structure of XMI,Trans is the rule, consisting of a left-hand side (LHS) and a right-hand side (IHS) separated by an arrow (\" – >\").",
        "The MIS is a pattern of XML elem.ent(s) to match while the RHS is a specification for a transformation on those elements."
      ]
    },
    {
      "heading": "3.3.1 The Left-hand Side",
      "text": [
        "The basic building block of the LHS is the element pattern involving a single element, its attributes and children.",
        "X.MLTrans allows for complex regular expressions of elements on the LI-IS to match over the children of the element being examined.",
        "The following rule will match an element <Z> which has exactly two children, <X> and <Y> (in the examples that follow \"...\" indicates any completion of the rule):",
        "XMLTrans supports the notion of a logical NOT over an element expression.",
        "This is represented by the standard \"!\" symbol.",
        "Support for general regular expressions is built into the language grammar: \"Y*\" will match 0 or more occurences of the element <Y>, \"Y-E\" one or more occurences, and \"Y?\" 0 or I occurences.",
        "In order to create rules of greater generality, elements and attributes in the LHS of a rule can be assigned to variables.",
        "For instance, we might want to transform a given element <X> in a certain way without specifying its children.",
        "The following rule would be used in such a case: ; Match X with zero or more unspecified ; children.",
        "In the rule above, the variable $a will be either empty (if <X> has no children), a single element (if <X> has one child), or a list of elements (if <X> has a series of children.",
        "Similarly, the pattern X-{$0 matches an element <X> with exactly one child.",
        "If an expression contains complex patterns, it is often useful to assign specific parts to different variables.",
        "This allows child nodes to be processed in groups on the LHS, perhaps being reused several times or reordered.",
        "Consider the following rule:",
        "In this case $a contains a (possibly empty) list of {<X>, <Y>} element pairs.",
        "The variable $b will contain exactly one <Q>.",
        "If this pattern cannot be matched time rule will fail.",
        "Attributes may also be assigned to variables.",
        "The following three rules demonstrate some possibilities:",
        "The last type of expressions used on the HIS are string expressions.",
        "Strings are considered to be elements in their own right , but they are enclosed in quotes and cannot have attribute patterns like regular elements can.",
        "A special syntax, /.",
        "*/, is used to mean any element which is a string.",
        "The following are some sample string matching rules: ; Match any string"
      ]
    },
    {
      "heading": "3.3.2 The Right-hand Side",
      "text": [
        "The Rh IS supplies a construction pattern for the transformed tree node.",
        "A simple rule might be used to replace an element and its contents with some text:",
        "For the input <X>Text</X>, this rule yields the output string Hello world.",
        "A more useful rule might strip off the enclosing element using a variable reference on the LiIS :"
      ]
    },
    {
      "heading": "$X{$a*} -> $a",
      "text": [
        "For the input <X>Text</X>, this rule generates the output Text.",
        "Elements may also be renamed while their contents remain unmodified.",
        "The following rule demonstrates this facility:",
        "For the input <X>Text</X>, the rule yields the output <Y>Text</Y>.",
        "Note that any children of <X> will be reproduced, regardless of whether they are text elements or not.",
        "Attribute variables may also be used in XMLTrans rules.",
        "The rule below shows how this is accomplished:",
        "Given the input <X ATT=\"VAL\">Text</X>, the rule yields the output <Y OLDATT=\"VAL\">Text</Y>.",
        "Recursion is a fundamental concept used in writing XMLTrans rules.",
        "The expression @setmame (variablemame) tells the XMLTrans transformer to continue processing on the elements contained in the indicated variable.",
        "For instance, @set 1 ($a) indicates that the elements contained in the variable $a should be processed by the rules in the set sett.",
        "A special notation @(variable_name) is used to tell the transformer to continue processing with the current rule set.",
        "Thus, if the current rule set is set2, the expression @($a) indicates that processing should continue on the elements in $a using the rule set set2.",
        "the following rule demonstrates how transormations can be applied recusively to an element:",
        "For the input element <X>Text</X>, the rule generates the output <Y>txeT</Y>.",
        "Different rule sets can be accessed as in the following rule file segment:",
        "Initially, setl is invoked to process the element <X>, but then the rule set set2 is invoked to process its children.",
        "Consequently, for the input <X>Text</X>, the output is <Y>Nothing</Y>."
      ]
    },
    {
      "heading": "4 Rules for the example transformation",
      "text": [
        "The transformation of the example in section 2 can be achieved with a few XMLTrans rules.",
        "The main rule treats the <entry> element, creating a HTML document from it, and copying the headword to several places.",
        "The subsequent rules generate the HTML output from section 2:",
        "The advent of stable versions of XSLT (Clark, 2000) has dramatically changed the landscape of XML transformations, so it is interesting to compare XMLTrans with recent developments with XSLT.",
        "It is evident that the set of transformations described by the XMINran.s transformation language is a subset of those described by XSLT.",
        "In addition, XSLT is integrated with XSL allowing the style sheet author to access to the rendering aspects of XSL such as formatting objects.",
        "Unfortunately, it takes some time to learn the syntax of XSL and the various aspects of XSLT, such as XPath specifications.",
        "This task may be particularly difficult for those with no prior experience with SGML/XML documents.",
        "In contrast, one needs only have a knowledge of regular expressions to begin writing rules with XM LTrans."
      ]
    },
    {
      "heading": "6 Conclusion",
      "text": [
        "The XMLTrans transducer was used to successfully convert all the lexical data for the DicoPro project.",
        "There were 3 bilingual dictionairies and one monoligual dictionary totalling 140 Mb in total( average size of 20 MB), each requiring its own rule file (and sometimes a rule file for each language pair direction).",
        "Original SGML files were preprocessed to provide XMLTrans with pure, well-formed XML input.",
        "Inputs were in a variety of XML formats, and the output was HTML.",
        "Rule files had an average of 178 rules, and processing time per dictionary was approximately 1. hour (including pre and postprocesssing steps).",
        "This paper has presented the XMI.Trans transduction language.",
        "The code is portable and should be executable on any platform for which a Java runtime environment exists.",
        "A. free version of XMLTrans can be downloaded from': http: Hiss co-www unige .",
        "ch/proj ects /dicopro_public/XMLTrans/"
      ]
    }
  ]
}
