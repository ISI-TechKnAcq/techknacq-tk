{
  "info": {
    "authors": [
      "Aravind K. Joshi"
    ],
    "book": "Annual Meeting of the Association for Computational Linguistics",
    "id": "acl-P83-1002",
    "title": "Factoring Recursion and Dependencies: An Aspect of Tree Adjoining Grammars (TAG) And a Comparison of Some Formal Properties of TAGS, GPSGS, PLGS, And LPGS",
    "url": "https://aclweb.org/anthology/P83-1002",
    "year": 1983
  },
  "references": [
    "acl-J82-1001"
  ],
  "sections": [
    {
      "text": [
        "During the last few years there is vigorous activity in constructing highly constrained grammatical systems by eliminating the transformational component either totally or partially.",
        "There is increasing recognition of the fact that the entire range of dependencies that transformational grammars in their various incarnations have tried to account for can be satisfactorily captured by classes of rules that are non-transformational and at the same time highly constrianed in terms of the classes of grammars and languages that they define.",
        "Two types of dependencies are especially important: subcategorization and filler-gap dependencies.",
        "Moreover,these dependencies can be unbounded.",
        "One of the motivations for transformations was to account for unbounded dependencies.",
        "The so-called non-transformational grammars account for the unbounded dependencies in different ways.",
        "In a tree-adjoining grammar (TAG), which has been introduced earlier in (Joshi,1982), unboundedness is achieved by factoring the dependencies and recursion in a novel and, we believe, in a linguistically interesting manner.",
        "All dependencies are defined on a finite set of basic structures (trees) which are bounded.",
        "Unhoundedness is then a corollary of a particular composition operation called adjoining.",
        "There are thus no unbounded dependencies in a sense.",
        "In this paper, we will first briefly describe TAG's, which have the following Important properties: (1) we can represent the usual transformational relations more or less directly in TAG's, (2) the power of TAG's is only slightly more than that of context-free grammars (CFG's) in what appears to be just the right way, and (3) TAG's are powerful enough to characterize dependencies (e.g., subcategorization, as in verb subcategorization, and filler-gap dependencies, as in the case of moved constitutents in wh-questions) which might *GPSG: Generalized phrase structure grammar, PLG: Phrase linking grammar, and LFG: Lexical functional grammar.",
        "This work is partially supported by the NSF Grant MCS 81-07290. be at unbounded distance and nested or crossed.",
        "We will then compare some of the formal properties of TAG's, GPSG's,PLG's, and LFG's, in particular, concerning (1) the types of languages, reflecting different patterns of dependencies that can or cannot be generated by the different types of grammars, (2) the degree of free word ordering permitted by different grammars, and (3) parsing complexity of the different grammars."
      ]
    },
    {
      "heading": "2.TREE ADJOINING GRAMMAR(TAG)",
      "text": [
        "A tree adjoining grammar (TAG), C = (I,A) consists of two finite sets of elementary trees.",
        "The trees in I will be called the initial trees and the trees in A, the auxiliary trees.",
        "A tree g is an initial tree if the root node of is labeled S and the frontier nodes are all terminal symbols (the interior nodes are all non-terminals).",
        "A tree is an auxiliary tree if the root node of A is labeled by a non-terminal, say, X, and the frontier nodes are all terminals except one which is also labeled X, the same label as that of the root.",
        "The node labeled by X on the frontier will be called the foot node of ft .",
        "The internal nodes are non-terminals."
      ]
    },
    {
      "heading": "AN",
      "text": []
    },
    {
      "heading": "terminals",
      "text": [
        "As defined above, the initial trees and the auxiliary trees are not constrained in any manner other than as indicated above.",
        "The idea, however, is that both the initial and the auxiliary trees will be minimal in some sense.",
        "An initial tree will correspond to a minimal sentential tree (i.e., for example, without recursing on any non-terminal) and an auxiliary tree, with the root node and the foot node labeled X, will correspond to a minimal structure that must be brought into the derivation, if one recurses on X.",
        "We will now define a composition operation called adjoining (or adiunction) which composes an auxiliary tree P with a tree X .",
        "Let y be tree with a node labeled X and let /3 be an auxiliary tree with the root labeled X also.",
        "Note that P must have,by definition, a node (and only one)labeled X on the frontier.",
        "Adjoining can now be defined as follows.",
        "If is adjoining to 7I at the node n then the resulting tree e is as shown in Fig.l."
      ]
    },
    {
      "heading": "FIG, 1.",
      "text": [
        "The tree t dominated by X in X is excised, A is inserted at the node n in and the tree t is attached to the foot node (labeled X) of A , i.e., A is inserted or 'adjoined' to the node n in y pushing t downwards.",
        "Note that adjoining is not a substitution operation in the usual sense.",
        "Example 2.1: Let G = (I,A) be a TAG where /63 will be adjoined to ye at the indicated node in L .",
        "The resulting tree is then Xi",
        "We can continue the derivation by adjoining, say Al, at S as indicated in The resulting tree )(2 is then",
        "Note that Iro is an initial tree, a sentential tree.",
        "The derived trees yt and are also sentential trees.",
        "We will now define T(G): The set of all trees derived in G starting from the initial trees in I.",
        "This set will be called the tree setof G. L(G): The set of all terminal strings of the trees in T(G).",
        "This set will be called the string language(or language) of G. The relationship between TAG's CFG's and the corresponding string languages can be summarized as follows (Joshi, Levy, and Takahashi, 1975).",
        "(a)there is a cfg, G', that is both weakly and strongly equivalent to G, (b)there is a cfg,G', that is weakly equivalent to G but not strongly equivalent to G, or (3) there is no cfg, G', that is weakly equivalent to G. The root node and the foot node of each auxiliary tree is circled for convenience.",
        "Let us look at some derivations in G.",
        "Parts (a) and (c) appear in (Joshi, Levy, and Takahashi, 1975).",
        "Part (b) is implicit in that paper, but it is important to state it explicitly as we have done here.",
        "For the TAG, G, in Example 2.1, it can be shown that there is a CFG, G', such that G' is both weakly and strongly equivalent to G. Examples 2.2 and 2.3 below illustrate parts (b) and (c) respectively.",
        "Clearly, L(G)=L= Ile b\"/ n Of, which is a cfl.",
        "Thus there must exist a CFG, G', which is at least weakly equivalent to G. It can be shown however that there is no CFG, C', which is strongly equivalent to G,i.e., T(G)=T(G').",
        "This follows from the fact that T(G), the tree set of G, is 'non-recognizable',i.e., there is no finite state bottom to top automaton that can recognize precisely T(G).",
        "Thus a TAG may generate a cfl, Yet assign structural descriptions to the strings that cannot be assigned by any CFG.",
        ".",
        "Example 2.3: Let G = (I,A) be a TAG where It can be shown that L(G) = Li = w e cm/ n 01, w is a string of a's and b's such that (1) the number of a's = the number of b's and .",
        "(2) for any initial substring of w, the number of a's a the number of b's.) LI can be characterized as follows.",
        "We start with the language L ■ { (11a)me c\"/ n3 0 1.",
        "Li is then obtained by taking strings in L and moving (dislocating) some a's to the left.",
        "It can be shown that Li is a strictly context-sensitive language (csl), thus there can be no CFG that is weakly equivalent to G. TAG's have more power than CFG's, however, the extra power is quite limited.",
        "The language Li has equal number of a's ,b's nad c's; however, the a's and b's are mixed in a certain way.",
        "The Language L2 =(a\"bre cn/ n 01 is similar to LI, except that all a's come before all b's. TAG's are not powerful to generate L2.",
        "The so-called copy lnguage L3 = {w e a /w e{a,b}\" ) also cannot be generated by a TAG.",
        "The fact that TAG's cannot generate L2 and L3 is important, because it shows that TAG's are only slightly more powerful than CFG's. The way TAG's acquire this power is linguistically significant.",
        "With some modifications of TAG's or rather the operation of adjoining, which is linguistically motivated, it is possible to generate L2 and L3, but only in some special ways.",
        "(This modification consists of allowing for the possibility for checking left-right tree context(in terms of a proper analysis) as well as top-bottom tree context (in terms of domination) around the node at which adjunction is made.",
        "This is the notion of local constraints in (Joshi and Levy,1981)).",
        "Thus L2 – and 1.3 in some ways characterize the limiting cases of context-sensitivity that can be achieved by TAG's and TAG's with local ' constraints.",
        "In (Joshi,Levy, and Takahashi,1975) it is also shown that CFL's C TAL's C IL's C CSL's. where IL's denotes indexed languages.",
        "In the APPENDIX we have given some examples 3.",
        "We will now consider TAG's with links.",
        "to show how certain sentences could be deirved The elementary trees (initial and auxiliary In a TAG.",
        "trees) are the appropriate domains for characterizing certain dependencies.",
        "The domain",
        "of the dependency is defined by the elementary links where tree itself.",
        "However, the dependency can be characterized explicitly by introducing a special relationship between certain specified I : ofi z 5 pairs of nodes of an elementary tree.",
        "This 1 relationship is pictorially exhibited by an arc (a dotted line) from one node to the other.",
        "For example, in the tree below, the nodes labeled 13 and Q are linked, A ist 2 $ 02 s 1 – ",
        "We will require the following conditions to hold for a link in an elementary tree.",
        "If a node at is linked to a node n2 then (1) n2 c – commands n1 and (2) nl dominates a null string (or a terminal symbol in the non – linguistic formal grammar examples).",
        "The notion of a link introduced here is closely related to that of Peters and Ritchie (1982).",
        "A TAG with links is a TAG where some of the elementary trees may have links as defined above.",
        "Henceforth, we may often refer to a TAG with links as just a TAG.",
        "Links are defined on the elementary trees.",
        "However, the important idea is that the composition operation of adioining will preserve the links.",
        "Links defined on the elementary trees may become stretched as the derivation proceeds.",
        "In a TAG the dependencies are defined on the elementary trees(which are bounded) and these dependencies are then preserved by the adjoining(recursive) operation.",
        "This is how recursion and dependencies are factored in a TAG.",
        "This is in contrast to transformational grammars (TG) where recursion is defined in the base and the transformations essentially carry out the checking of the dependencies.",
        "The PLG's and LFG's share this aspect' of TG,i.e., recursion builds up a set of structures, some of which are filtered out by transformations in a TG, by the constraints on linking in a PLC, and by the constraints introduced via functional structures in LFG.",
        "In a GPSG on the other hand, recursion and the checking of the dependencies go hand in hand in a sense.",
        "In a TAG, dependencies are defined initially on bounded structures and recursion simply preserves them.",
        "(vieci *Ai ms 04 Cr 0 .t ftcl depinde.M.01.10",
        "At and/2 each have one link.",
        ")(land show how the linking is preserved in adjoining.",
        "In f3 one of the links is stretched.",
        "It should be clear now, how, in general, the links will be preserved during the derivation.",
        "We note in this example that in XL the dependencies between the a's and the b's as reflected in the terminal string are properly nested, while in 63 two of them are properly nested, and the third one is cross-serial and it is crossed with respect to the nested ones.",
        "The two elementary trees 01 and /112 have only one link each.",
        "The nestings and crossings in Xx and are the result of adjoining.",
        "There are two points to note here: (1) TAG's with links can characterize certain cross-serial dependencies as well as, of course, nested dependencies.",
        "(2) The cross-serial dependencies as well as the nested dependencies arise as a result of adjoining.",
        "But this is not the only way they can arise.",
        "It is possible to have two links in an elementary tree which represent crossed or nested dependencies, which will then be preserved during the derivation.",
        "It is clear from Example 2.4 that the string language of TAG with links is not affected by the links.",
        "Thus if G is a TAG with links.",
        "Then L(G).L(G') where G' is a TAG which is obtained from G by removing all the links in the elementary trees of G. The links do not affect the weak generative capacity.",
        "However, they make certain aspects of the structural description explicit, which is implicit in the TAG without the links.",
        "TAG's (or TAL's) also have the following three important properties: (1) Limited cross-serial dependencies: Although TAG's permit cross-serial dependencies, these are restricted.",
        "The restriction is that if there are two sets of crossing dependencies, then they must be either disjoint or one of them must be properly nested inside the other.",
        "Hence, languages such as the double copy language, L4 .",
        "(wewew/wE fa,bel or L5 {anbnedne4/ n 1} cannot be generated by TAG's. For details, see (Joshi,1983).",
        "(2)Constant growth property: In a TAG,G,at each step of the derivation, we have a sentential tree with the terminal string which Is a string in L(G).",
        "As we adjoin an auxiliary tree, we augment the length of the terminal string by the length of the terminal string of A (not counting the single non-terminal symbol in the frontier of A ).Thus for any string, w, of L(G), we have w I iwkl+ attweti + C12.",
        "\\ + • - + Cl,A1Wmi o s, m where wtis the terminal string of some Initial tree and wol ..„S is m, the terminal string of the i-th auxiliary tree, assuming there are m auxiliary trees.",
        "Thus w is a linear combination of the length of the terminal string of some initial tree and the lengths of the terminal strings of the auxiliary trees.",
        "Thp constant growth property severely restricts the class of languages generated by TAG's. Hence,lfnguages such as L6 = { al\" / n 3.",
        "1} or L8 ={an In 1} cannot be generated by TAG's. (3)Polynomial parsing:TAL's can be parsed in time 0(n4 )(Joshi and Yokomori, 1983).",
        "Whether or not an 0(n3 ) algorithm exists for TAL's is not known at present."
      ]
    },
    {
      "heading": "3. A COMPARISION OF GPSG's,TAG's,PFG's,and LFG's WITH RESPECT TO SOME OF THEIR FORMAL PROPERTIES",
      "text": [
        "TABLE 1 lists (i) a set of languages reflecting different patterns of dependencies that can or cannot be generated by the different types of grammars, and (ii) the three properties just mentioned above.",
        "As regards the degree of free word order permitted by each grammar, the languages 1,2,3,4,5, and 6 in TABLE 1 give some ict.",
        ":a of the degree of freedom.",
        "The language in 3 in TABLE 1 is the extreme case where the a's, b's,and c's can he any order, as long as the number of a's the number of b's=the number of c's.",
        "GPSG.",
        ";and TAG's cannot generate this language (although for TAG's a proof is not in hand yet).",
        "LFG's can generate this language.",
        "In a TAG for each elementary tree, we can add more elementary trees, systematically generated from the given tree to provide additional freedom of word order (in a somewhat similar fashion as in (Pullum,1982)).",
        "Since the adjoining operation in a TAG gives some additional power to a TAG beyond that of a CFG, this device of augmenting the set of elementary trees should give more freedom, for example, by allowing some limited scrambling of an item outside of the constituent it belongs Co.",
        "Even then a TAG does not seem to be capable of generating the language in 3 in TABLE 1.",
        "Thus there is extra freedom but it is quite limited."
      ]
    },
    {
      "heading": "REFERENCES",
      "text": []
    },
    {
      "heading": "APPENDIX",
      "text": [
        "We will give here some examples to show how certain sentences could be derived in a TAG.",
        "For further details about this TAG and its linguistic relevance, see (Joshi,1983 and Joshi and Kroch, forthcoming).",
        "Only the releva”' trees of the TAG, G,=(I,A) are shown below.",
        "The following points are worth noting: (Inn a TAG the derivation starts with an initial tree.",
        "The appropriate lexical insertions are made for the Initial tree and the corresponding constraints as specified by the lexicon can be checked (e.g., agreement and subcategorization).",
        "Then as the derivation proceeds, as each auxiliary tree is brought into the derivation, the appropriate lexical items are inserted and the constraints checked.",
        "Thus in a TAG, lexical insertion goes hand in hand with the derivation.",
        "(2) Each one of the two finite sets, I and A can be quite large, but these sets need not be explicitely listed.",
        "The trees in I roughly correspond to all the 'minimal' sentences corresponding to different subcategorization frames together with the 'transforms' of these sentences.",
        "We could , of course, provide rules for obtaining the trees in I from a given subset of I.",
        "These rules achieve the effect of conventional transformational rules, however, these rules can be formulated not as the usual transformational rules but directly as tree rewriting rules, since both the domains and the co – domains of the rules are finite.",
        "Introduction of links can be considered as a part of this rewriting.",
        "In any case, these rules will be abbreviatory in the sense that they will generate only finite sets of trees.",
        "Their adoption will be only a matter of convenience and does not affect the TAG in any essential manner.",
        "The set of auxiliary trees is also finite.",
        "Again these trees could themselves be 'derived' from the corresponding trees in I by introducing appropriate tree rewriting rules.",
        "Again these rules will be abbreviatory only as discussed above.",
        "It is in this sense that the trees in I and A capture the usual transformational relations more or less directly.",
        "- Some derivations: (1)The girl who met Bill is a senior.",
        "We start with the initial tree 0(1 with the appropriate lexical insertions."
      ]
    },
    {
      "heading": "5 „s•",
      "text": []
    },
    {
      "heading": "Stneor",
      "text": [
        "-n•e 9,V G. StriOw'",
        "Note the link in Yy is 'preserved' in Y2 it is 'stretched' resulting in the so-called unbounded dependency.",
        "(4)John tried to please Mary.",
        "On the other hand (5)John seems to like Mary.",
        "could be derived as follows.",
        "We will start with 44."
      ]
    }
  ]
}
