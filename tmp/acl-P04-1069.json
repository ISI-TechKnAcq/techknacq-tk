{
  "info": {
    "authors": [
      "Mark-Jan Nederhof",
      "Giorgio Satta"
    ],
    "book": "Annual Meeting of the Association for Computational Linguistics",
    "id": "acl-P04-1069",
    "title": "Probabilistic Parsing Strategies",
    "url": "https://aclweb.org/anthology/P04-1069",
    "year": 2004
  },
  "references": [
    "acl-H90-1053",
    "acl-J93-1002",
    "acl-J95-2002",
    "acl-J98-2005",
    "acl-J99-1004",
    "acl-P89-1017",
    "acl-P89-1018",
    "acl-P94-1017",
    "acl-P99-1054",
    "acl-P99-1070"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "We present new results on the relation between context-free parsing strategies and their probabilistic counterparts.",
        "We provide a necessary condition and a sufficient condition for the probabilistic extension of parsing strategies.",
        "These results generalize existing results in the literature that were obtained by considering parsing strategies in isolation."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "Context-free grammars (CFGs) are standardly used in computational linguistics as formal models of the syntax of natural language, associating sentences with all their possible derivations.",
        "Other computational models with the same generative capacity as CFGs are also adopted, as for instance push-down automata (PDAs).",
        "One of the advantages of the use of PDAs is that these devices provide an operational specification that determines which steps must be performed when parsing an input string, something that is not offered by CFGs.",
        "In other words, PDAs can be associated to parsing strategies for context-free languages.",
        "More precisely, parsing strategies are traditionally specified as constructions that map CFGs to language-equivalent PDAs.",
        "Popular examples of parsing strategies are the standard constructions of top-down PDAs (Harrison, 1978), left-corner PDAs (Rosenkrantz and Lewis II, 1970), shift-reduce PDAs (Aho and Ullman, 1972) and LR PDAs (Sippu and Soisalon-Soininen, 1990).",
        "CFGs and PDAs have probabilistic counterparts, called probabilistic CFGs (PCFGs) and probabilistic PDAs (PPDAs).",
        "These models are very popular in natural language processing applications, where they are used to define a probability distribution function on the domain of all derivations for sentences in the language of interest.",
        "In PCFGs and PPDAs, probabilities are assigned to rules or transitions, respectively.",
        "However, these probabilities cannot be chosen entirely arbitrarily.",
        "For example, for a given nonterminal A in a PCFG, the sum of the probabilities of all rules rewriting A must be 1.",
        "This means that, out of a total of say m rules rewriting A, only m – 1 rules represent “free” parameters.",
        "Depending on the choice of the parsing strategy, the constructed PDA may allow different probability distributions than the underlying CFG, since the set of free parameters may differ between the CFG and the PDA, both quantitatively and qualitatively.",
        "For example, (Sornlertlamvanich et al., 1999) and (Roark and Johnson, 1999) have shown that a probability distribution that can be obtained by training the probabilities of a CFG on the basis of a corpus can be less accurate than the probability distribution obtained by training the probabilities of a PDA constructed by a particular parsing strategy, on the basis of the same corpus.",
        "Also the results from (Chitrao and Grishman, 1990), (Charniak and Carroll, 1994) and (Manning and Carpenter, 2000) could be seen in this light.",
        "The question arises of whether parsing strategies can be extended probabilistically, i.e., whether a given construction of PDAs from CFGs can be “augmented” with a function defining the probabilities for the target PDA, given the probabilities associated with the input CFG, in such a way that the obtained probabilistic distributions on the CFG derivations and the corresponding PDA computations are equivalent.",
        "Some first results on this issue have been presented by (Tendeau, 1995), who shows that the already mentioned left-corner parsing strategy can be extended probabilistically, and later by (Abney et al., 1999) who show that the pure top-down parsing strategy and a specific type of shift-reduce parsing strategy can be probabilistically extended.",
        "One might think that any “practical” parsing strategy can be probabilistically extended, but this turns out not to be the case.",
        "We briefly discuss here a counter-example, in order to motivate the approach we have taken in this paper.",
        "Probabilistic LR parsing has been investigated in the literature (Wright and Wrigley, 1991; Briscoe and Carroll, 1993; Inui et al., 2000) under the assumption that it would allow more fine-grained probability distributions than the underlying PCFGs.",
        "However, this is not the case in general.",
        "Consider a PCFG with rule/probability pairs:",
        "There are two key transitions in the associated LR automaton, which represent shift actions over c and d (we denote LR states by their sets of kernel items and encode these states into stack symbols):",
        "Assume a proper assignment of probabilities to the transitions of the LR automaton, i.e., the sum of transition probabilities for a given LR state is 1.",
        "It can be easily seen that we must assign probability 1 to all transitions except τc and τd, since this is the only pair of distinct transitions that can be applied for one and the same top-of-stack symbol, viz. {C → x • c, D → x • d}.",
        "However, in the PCFG model we have",
        "whereas in the LR PPDA model we have",
        "Thus we conclude that there is no proper assignment of probabilities to the transitions of the LR automaton that would result in a distribution on the generated language that is equivalent to the one induced by the source PCFG.",
        "Therefore the LR strategy does not allow probabilistic extension.",
        "One may seemingly solve this problem by dropping the constraint of properness, letting each transition that outputs a rule have the same probability as that rule in the PCFG, and letting other transitions have probability 1.",
        "However, the properness condition for PDAs has been heavily exploited in parsing applications, in doing incremental left-to-right probability computation for beam search (Roark and Johnson, 1999; Manning and Carpenter, 2000), and more generally in integration with other linear probabilistic models.",
        "Furthermore, commonly used training algorithms for PCFGS/PPDAs always produce proper probability assignments, and many desired mathematical properties of these methods are based on such an assumption (Chi and Geman, 1998; S´anchez and Bened´ı, 1997).",
        "We may therefore discard non-proper probability assignments in the current study.",
        "However, such probability assignments are outside the reach of the usual training algorithms for PDAs, which always produce proper PDAs.",
        "Therefore, we may discard such assignments in the current study, which investigates aspects of the potential of training algorithms for CFGs and PDAs.",
        "What has been lacking in the literature is a theoretical framework to relate the parameter space of a CFG to that of a PDA constructed from the CFG by a particular parsing strategy, in terms of the set of allowable probability distributions over derivations.",
        "Note that the number of free parameters alone is not a satisfactory characterization of the parameter space.",
        "In fact, if the “nature” of the parameters is ill-chosen, then an increase in the number of parameters may lead to a deterioration of the accuracy of the model, due to sparseness of data.",
        "In this paper we extend previous results, where only a few specific parsing strategies were considered in isolation, and provide some general characterization of parsing strategies that can be probabilistically extended.",
        "Our main contribution can be stated as follows.",
        "• We define a theoretical framework to relate the parameter space defined by a CFG and that defined by a PDA constructed from the CFG by a particular parsing strategy.",
        "• We provide a necessary condition and a sufficient condition for the probabilistic extension of parsing strategies.",
        "We use the above findings to establish new results about probabilistic extensions of parsing strategies that are used in standard practice in computational linguistics, as well as to provide simpler proofs of already known results.",
        "We introduce our framework in Section 3 and report our main results in Sections 4 and 5.",
        "We discuss applications of our results in Section 6."
      ]
    },
    {
      "heading": "2 Preliminaries",
      "text": [
        "In this paper we assume some familiarity with definitions of (P)CFGs and (P)PDAs.",
        "We refer the reader to standard textbooks and publications as for instance (Harrison, 1978; Booth and Thompson, 1973; Santos, 1972).",
        "A CFG G is a tuple (Σ, N, S, R), with Σ and N the sets of terminals and nonterminals, respectively, S the start symbol and R the set of rules.",
        "In this paper we only consider leftmost derivations, represented as strings d ∈ R∗ and simply called deriva",
        "= 4 tions.",
        "For α, β ∈ (Σ ∪ N)*, we write α ⇒d β with the usual meaning.",
        "If α = S and β = w ∈ Σ*, we call d a complete derivation of w. We say a CFG is reduced if each rule in R occurs in some complete derivation.",
        "A PCFG is a pair (G, p) consisting of a CFG G and a probability function p from R to real numbers in the interval [0, 1].",
        "A PCFG is proper if Eπ=(A,α)ER p(π) = 1 for each A ∈ N. The probability of a (left-most) derivation d = π1 · · · πm, πi ∈ R for 1 ≤ i ≤ m, is p(d) = Hmi=1 p(πi).",
        "The probability of a string w ∈ Σ* is p(w) = ES�dw p(d).",
        "A PCFG is consistent if ΣwEΣ* p(w) = 1.",
        "A PCFG (G, p) is reduced if G is reduced.",
        "In this paper we will mainly consider push-down transducers rather than push-down automata.",
        "Push-down transducers not only compute derivations of the grammar while processing an input string, but they also explicitly produce output strings from which these derivations can be obtained.",
        "We use transducers for two reasons.",
        "First, constraints on the output strings allow us to restrict our attention to “reasonable” parsing strategies.",
        "Those strategies that cannot be formalized within these constraints are unlikely to be of practical interest.",
        "Secondly, mappings from input strings to derivations, such as those realized by push-down transducers, turn out to be a very powerful abstraction and allow direct proofs of several general results.",
        "Contrary to many textbooks, our push-down devices do not possess states next to stack symbols.",
        "This is without loss of generality, since states can be encoded into the stack symbols, given the types of transitions that we allow.",
        "Thus, a PDT A is a 6-tuple (Σ, Σ, Q, Xin, Xfin, Δ), with Σ and Σ the input and output alphabets, respectively, Q the set of stack symbols, including the initial and final stack symbols Xin and Xfin, respectively, and Δthe set of transitions.",
        "Each transition has one of the following three forms: X → XY, called a push transition, YX → Z, called a pop transition,",
        "sition and y ∈ Σ is the written output.",
        "Note that in our notation, stacks grow from left to right, i.e., the topmost stack symbol will be found at the right end.",
        "A configuration of a PDT is a triple (α, w, v), where α ∈ Q* is a stack, w ∈ Σ is the remaining input, and v ∈ Σ is the output generated so far.",
        "Computations are represented as strings c ∈ Δ*.",
        "For configurations (α, w, v) and (β, w', v'), we write (α, w, v) �-c (β, w', v') with the usual meaning, and write (α, w, v) �-* (β, w', v') when c is of no importance.",
        "If (Xin, w, ε) �-c (Xfin, ε, v), then c is a complete computation of w, and the output string v is denoted out(c).",
        "A PDT is reduced if each transition in Δ occurs in some complete computation.",
        "Without loss of generality, we assume that combinations of different types of transitions are not allowed for a given stack symbol.",
        "More precisely, for each stack symbol X =7' X fin, the PDA can only take transitions of a single type (push, pop or swap).",
        "A PDT can easily be brought in this form by introducing for each X three new stack symbols",
        "Xpush, Xpop and Xswap and new swap transitions X ε,ε → Xpush, X ε,ε → Xpop and X ε,ε → Xswap.",
        "In",
        "each existing transition that operates on top-of-stack X, we then replace X by one from Xpush, Xpop or X swap , depending on the type of that transition.",
        "We also assume that Xfin does not occur in the left-hand side of a transition, again without loss of generality.",
        "A PPDT is a pair (A, p) consisting of a PDT A and a probability function p from Δ to real numbers in the interval [0, 1].",
        "A PPDT is proper if",
        "• Στ=(X�--XY)EΔ p(τ) = 1 for each X ∈ Q such that there is at least one transition X → XY,Y∈Q; • Στ=(X x,_1,'Y)EΔ p(τ) = 1 for each X ∈ Q such that there is at least one transition X H Y, x∈Σ∪{ε},y∈Σ,Y∈Q;and • Στ=(YX�-Z)EΔ p(τ) = 1, for each X,Y ∈ Q such that there is at least one transition YX → Z,Z∈Q.",
        "The probability of a computation c = τ1 · · · τm, τi ∈ Δ for 1 ≤ i ≤ m, is p(c) = Hmi=1 p(τi).",
        "The probability of a string w is p(w) =",
        "r-(Xin,w,ε)-c(Xfin,ε,v) p(c).",
        "A PPDT is consistent",
        "if ΣwEΣ* p(w) = 1.",
        "A PPDT (A, p) is reduced if A is reduced."
      ]
    },
    {
      "heading": "3 Parsing Strategies",
      "text": [
        "The term “parsing strategy” is often used informally to refer to a class of parsing algorithms that behave similarly in some way.",
        "In this paper, we assign a formal meaning to this term, relying on the observation by (Lang, 1974) and (Billot and Lang, 1989) that many parsing algorithms for CFGs can be described in two steps.",
        "The first is a construction of push-down devices from CFGs, and the second is a method for handling nondeterminism (e.g. backtracking or dynamic programming).",
        "Parsing algorithms that handle nondeterminism in different ways but apply the same construction of push-down devices from CFGs are seen as realizations of the same parsing strategy.",
        "Thus, we define a parsing strategy to be a function S that maps a reduced CFG G = (Σ, N, S, R) to a pair S(G) = (A, f ) consisting of a reduced PDT A = (Σ, Σ, Q, Xin, Xfin, Δ), and a function f that maps a subset of Σ∗ to a subset of R∗, with the following properties:",
        "• R ⊆ Σ.",
        "• For each string w ∈ Σ∗ and each complete computation c on w, f (out (c)) = d is a (leftmost) derivation of w. Furthermore, each symbol from R occurs as often in out(c) as it occurs in d. • Conversely, for each string w ∈ Σ∗ and",
        "each derivation d of w, there is precisely one complete computation c on w such that f ( out(c)) = d. If c is a complete computation, we will write f (c) to denote f (out (c)).",
        "The conditions above then imply that f is a bijection from complete computations to complete derivations.",
        "Note that output strings of (complete) computations may contain symbols that are not in R, and the symbols that are in R may occur in a different order in v than in f (v) = d. The purpose of the symbols in Σ − R is to help this process of reordering of symbols from R in v, as needed for instance in the case of the left-corner parsing strategy (see (Nijholt, 1980, pp.",
        "22–23) for discussion).",
        "A probabilistic parsing strategy is defined to be a function S that maps a reduced, proper and consistent PCFG (G, pG) to a triple S(G, pG) = (A, pA, f ), where (A, pA) is a reduced, proper and consistent PPDT, with the same properties as a (non-probabilistic) parsing strategy, and in addition:",
        "• For each complete derivation d and each complete computation c such that f (c) = d, pG (d) equals pA(c).",
        "In other words, a complete computation has the same probability as the complete derivation that it is mapped to by function f. An implication of this property is that for each string w ∈ Σ∗, the probabilities assigned to that string by (G, pG) and (A, pA) are equal.",
        "We say that probabilistic parsing strategy S' is an extension of parsing strategy S if for each reduced CFG G and probability function pG we have S(G) = (A, f ) if and only if S'(G, pG) = (A, pA, f ) for some pA."
      ]
    },
    {
      "heading": "4 Correct-Prefix Property",
      "text": [
        "In this section we present a necessary condition for the probabilistic extension of a parsing strategy.",
        "For a given PDT, we say a computation c is dead if (Xin, w1, ε) �-c (α, ε, v1), for some α ∈ Q∗, w1 ∈ Σ∗ and v1 ∈ Σ∗, and there are no w2 ∈ Σ∗ and v2 ∈ Σ∗ such that (α, w2, ε) �_∗ (Xfin, ε, v2).",
        "Informally, a dead computation is a computation that cannot be continued to become a complete computation.",
        "We say that a PDT has the correct-prefix property (CPP) if it does not allow any dead computations.",
        "We also say that a parsing strategy has the CPP if it maps each reduced CFG to a PDT that has the CPP.",
        "Lemma 1 For each reduced CFG G, there is a probability function pG such that PCFG (G, pG) is proper and consistent, and pG (d) > 0 for all complete derivations d. Proof.",
        "Since G is reduced, there is a finite set D consisting of complete derivations d, such that for each rule π in G there is at least one d ∈ D in which π occurs.",
        "Let nπ,d be the number of occurrences of rule π in derivation d ∈ D, and let nπ be Σd∈D nπ,d, the total number of occurrences of π in D. Let nA be the sum of nπ for all rules π with A in the left-hand side.",
        "A probability function pG can be defined through “maximum-likelihood estimation” such that pG (π) = nAnπ for each rule π = A → α.",
        "For all nonterminals A, Σπ=A→α pG (π) = Σπ=A→α nπ= nA = 1, which means that the nA nA PCFG (G,pG) is proper.",
        "Furthermore, it has been shown in (Chi and Geman, 1998; S´anchez and Bened´ı, 1997) that a PCFG (G,pG) is consistent if pG was obtained by maximum-likelihood estimation using a set of derivations.",
        "Finally, since nπ > 0 for each π, also pG (π) > 0 for each π, and pG (d) > 0 for all complete derivations d. ■ We say a computation is a shortest dead computation if it is dead and none of its proper prefixes is dead.",
        "Note that each dead computation has a unique prefix that is a shortest dead computation.",
        "For a PDT A, let TA be the union of the set of all complete computations and the set of all shortest dead computations.",
        "Lemma 2 For each proper PPDT (A, pA), Σc∈TA pA(c) ≤ 1.",
        "Proof.",
        "The proof is a trivial variant of the proof that for a proper PCFG (G, pG), the sum of pG (d) for all derivations d cannot exceed 1, which is shown by (Booth and Thompson, 1973).",
        "■ From this, the main result of this section follows.",
        "Theorem 3 A parsing strategy that lacks the CPP cannot be extended to become a probabilistic parsing strategy.",
        "Proof.",
        "Take a parsing strategy S that does not have the CPP.",
        "Then there is a reduced CFG G = (Σ, N, S, R), with S(G) = (A, f) for some A and f, and a shortest dead computation c allowed by A.",
        "It follows from Lemma 1 that there is a probability function pG such that (G, pG) is a proper and consistent PCFG and pG (d) > 0 for all complete derivations d. Assume we also have a probability function pA such that (A, pA) is a proper and consistent PPDT and pA (cd) = pG (f (c')) for each complete computation c'.",
        "Since A is reduced, each transition τ must occur in some complete computation c'.",
        "Furthermore, for each complete computation c' there is a complete derivation d such that f (c') = d, and pA (cW) = pG (d) > 0.",
        "Therefore, pA (τ) > 0 for each transition τ, and pA(c) > 0, where c is the above-mentioned dead computation.",
        "Σw∈Σ pG (w).",
        "This is in contradiction with the consistency of (G, pG).",
        "Hence, a probability function pA with the properties we required above cannot exist, and therefore S cannot be extended to become a probabilistic parsing strategy.",
        "■"
      ]
    },
    {
      "heading": "5 Strong Predictiveness",
      "text": [
        "In this section we present our main result, which is a sufficient condition allowing the probabilistic extension of a parsing strategy.",
        "We start with a technical result that was proven in (Abney et al., 1999; Chi, 1999; Nederhof and Satta, 2003).",
        "Lemma 4 Given a non-proper PCFG (G, pG), G = (Σ, N, S, R), there is a probabilityfunction p' such",
        "that PCFG (G, p'G) is proper and, for every complete derivation d, p' G(d) = 1C · pG (d), where C = rS⇒d'w,w∈Σ* pG( d').",
        "Note that if PCFG (G,pG) in the above lemma is consistent, then C = 1 and (G, p'G) and (G, pG) define the same distribution on derivations.",
        "The normalization procedure underlying Lemma 4 makes use of quantities EA⇒dw,w∈Σ* pG (d) for each A ∈ N. These quantities can be computed to any degree of precision, as discussed for instance in (Booth and Thompson, 1973) and (Stolcke, 1995).",
        "Thus normalization of a PCFG can be effectively computed.",
        "For a fixed PDT, we define the binary relation --* on stack symbols by: Y --* Y' if and only if (Y, w, ε) �-∗ (Y', ε, v) for some w ∈ Σ∗ and v ∈ Σ∗.",
        "In words, some subcomputation of the PDT may start with stack Y and end with stack Y'.",
        "Note that all stacks that occur in such a subcomputation must have height of 1 or more.",
        "We say that a (P)PDA or a (P)PDT has the strong predictiveness property (SPP) if the existence of three transitions",
        "mally, this means that when a subcomputation starts with some stack α and some push transition τ, then solely on the basis of τ we can uniquely determine what stack symbol Z1 = Z2 will be on top of the stack in the firstly reached configuration with stack height equal to |α|.",
        "Another way of looking at it is that no information may flow from higher stack elements to lower stack elements that was not already predicted before these higher stack elements came into being, hence the term “strong predictiveness”.",
        "We say that a parsing strategy has the SPP if it maps each reduced CFG to a PDT with the SPP.",
        "Theorem 5 Any parsing strategy that has the CPP and the SPP can be extended to become a probabilistic parsing strategy.",
        "Proof.",
        "Consider a parsing strategy S that has the CPP and the SPP, and a proper, consistent and reduced PCFG (G, pG), G = (Σ, N, S, R).",
        "Let S(G) = (A, f), A = (Σ, Σ, Q, Xin, Xfin, Δ).",
        "We will show that there is a probability function pA such that (A, pA) is a proper and consistent PPDT, and pA (c) = pG (f (c)) for all complete computations c. We first construct a PPDT (A, ppA) as follows.",
        "otherwise.",
        "For all remaining transitions τ ∈ Δ, let ppA(τ) = 1.",
        "Note that (A, p�A ) may be non-proper.",
        "Still, from the definition of f it follows that, for each complete computation c, we have",
        "and so our PPDT is consistent.",
        "We now map (A, ppA) to a language-equivalent PCFG (G , pG,), GV = (Σ, Q, Xin, R'), where R' contains the following rules with the specified associated probabilities:",
        "• X → YZ with pG, (X → YZ) = pA(X → XY), for each X → XY ∈ Δ with Z the unique stack symbol such that there is at least one transition XY' →H Z with Y --* Y'; • X → xY with pG, (X → xY) = pA(X → Y), for each transition X x → Y ∈ Δ; • Y → ε with pG, (X → ε) = 1, for each stack",
        "symbol Y such that there is at least one transition XY → Z ∈ Δ or such that Y= X fin.",
        "It is not difficult to see that there exists a bijection ff from complete computations of A to complete derivations of G', and that we have pG,(fW(c)) = pA(c), (2) for each complete computation c. Thus (G',pG,) is consistent.",
        "However, note that (G',pG,) is not proper.",
        "By Lemma 4, we can construct a new PCFG (G�, p'G,) that is proper and consistent, and such that pG, (d) = p'G, (d), for each complete derivation d of G'.",
        "Thus, for each complete computation c of A, we have",
        "We now transfer back the probabilities of rules of (G�,p',) to the transitions of A.",
        "Formally, we define G a new probability function pA such that, for each τ ∈ Δ, pA (τ) = p', (7r), where 7r is the rule in R'",
        "that has been constructed from τ as specified above.",
        "It is easy to see that PPDT (A, pA) is now proper.",
        "Furthermore, for each complete computation c of A we have",
        "and so (A, pA) is also consistent.",
        "By combining equations (1) to (4) we conclude that, for each complete computation c of A, pA (c) = p'G,(f'(c)) = pG,(f'(c)) = ppA(c) = pG(f (c)).",
        "Thus our parsing strategy S can be probabilistically extended.",
        "■ Note that the construction in the proof above can be effectively computed (see discussion in Section 4 for effective computation of normalized PCFGs).",
        "The definition of ppA in the proof of Theorem 5 relies on the strings output by A.",
        "This is the main reason why we needed to consider PDTs rather than PDAs.",
        "Now assume an appropriate probability function pA has been computed, such that the source PCFG and (A, pA) define equivalent distributions on derivations/computations.",
        "Then the probabilities assigned to strings over the input alphabet are also equal.",
        "We may subsequently ignore the output strings if the application at hand merely requires probabilistic recognition rather than probabilistic transduction, or in other words, we may simplify PDTs to PDAs.",
        "The proof of Theorem 5 also leads to the observation that parsing strategies with the CPP and the SPP as well as their probabilistic extensions can be described as grammar transformations, as follows.",
        "A given (P)CFG is mapped to an equivalent (P)PDT by a (probabilistic) parsing strategy.",
        "By ignoring the output components of swap transitions we obtain a (P)PDA, which can be mapped to an equivalent (P)CFG as shown above.",
        "This observation gives rise to an extension with probabilities of the work on covers by (Nijholt, 1980; Leermakers, 1989)."
      ]
    },
    {
      "heading": "6 Applications",
      "text": [
        "Many well-known parsing strategies with the CPP also have the SPP.",
        "This is for instance the case for top-down parsing and left-corner parsing.",
        "As discussed in the introduction, it has already been shown that for any PCFG G, there are equivalent PPDTs implementing these strategies, as reported in (Abney et al., 1999) and (Tendeau, 1995), respectively.",
        "Those results more simply follow now from our general characterization.",
        "Furthermore, PLR parsing (Soisalon-Soininen and Ukkonen, 1979; Nederhof, 1994) can be expressed in our framework as a parsing strategy with the CPP and the SPP, and thus we obtain as a new result that this strategy allows probabilistic extension.",
        "The above strategies are in contrast to the LR parsing strategy, which has the CPP but lacks the SPP, and therefore falls outside our sufficient condition.",
        "As we have already seen in the introduction, it turns out that LR parsing cannot be extended to become a probabilistic parsing strategy.",
        "Related to LR parsing is ELR parsing (Purdom and Brown, 1981; Nederhof, 1994), which also lacks the SPP.",
        "By an argument similar to the one provided for LR, we can show that also ELR parsing cannot be extended to become a probabilistic parsing strategy.",
        "(See (Tendeau, 1997) for earlier observations related to this.)",
        "These two cases might suggest that the sufficient condition in Theorem 5 is tight in practice.",
        "Decidability of the CPP and the SPP obviously depends on how a parsing strategy is specified.",
        "As far as we know, in all practical cases of parsing strategies these properties can be easily decided.",
        "Also, observe that our results do not depend on the general behaviour of a parsing strategy S, but just on its “point-wise” behaviour on each input CFG.",
        "Specifically, if S does not have the CPP and the SPP, but for some fixed CFG G of interest we obtain a PDT A that has the CPP and the SPP, then we can still apply the construction in Theorem 5.",
        "In this way, any probability function pG associated with G can be converted into a probability function pA, such that the resulting PCFG and PPDT induce equivalent distributions.",
        "We point out that decidability of the CPP and the SPP for a fixed PDT can be efficiently decided using dynamic programming.",
        "One more consequence of our results is this.",
        "As discussed in the introduction, the properness condition reduces the number of parameters of a PPDT.",
        "However, our results show that if the PPDT has the CPP and the SPP then the properness assumption is not restrictive, i.e., by lifting properness we do not gain new distributions with respect to those induced by the underlying PCFG."
      ]
    },
    {
      "heading": "7 Conclusions",
      "text": [
        "We have formalized the notion of CFG parsing strategy as a mapping from CFGs to PDTs, and have investigated the extension to probabilities.",
        "We have shown that the question of which parsing strategies can be extended to become probabilistic heavily relies on two properties, the correct-prefix property and the strong predictiveness property.",
        "As far as we know, this is the first general characterization that has been provided in the literature for probabilistic extension of CFG parsing strategies.",
        "We have also shown that there is at least one strategy of practical interest with the CPP but without the SPP, namely LR parsing, that cannot be extended to become a probabilistic parsing strategy."
      ]
    },
    {
      "heading": "Acknowledgements",
      "text": [
        "The first author is supported by the PIO-NIER Project Algorithms for Linguistic Processing, funded by NWO (Dutch Organization for Scientific Research).",
        "The second author is partially supported by MIUR under project PRIN No.",
        "2003091149005."
      ]
    }
  ]
}
