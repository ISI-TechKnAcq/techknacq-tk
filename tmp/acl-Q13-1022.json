{
  "info": {
    "authors": [
      "Giorgio Satta",
      "Marco Kuhlmann"
    ],
    "book": "TACL",
    "id": "acl-Q13-1022",
    "title": "Efficient Parsing for Head-Split Dependency Trees",
    "url": "https://aclweb.org/anthology/Q13-1022",
    "year": 2013
  },
  "references": [
    "acl-D07-1101",
    "acl-D12-1044",
    "acl-H05-1066",
    "acl-J11-3004",
    "acl-P06-2066",
    "acl-P10-1001",
    "acl-P98-2192",
    "acl-P99-1059",
    "acl-Q13-1002",
    "acl-W06-2920",
    "acl-W07-2216"
  ],
  "sections": [
    {
      "text": [
        "After the above rules, parsing of tU;ah continues by combining the consequent item ?i; j ; p; q; j ?U from rule (24) with items representing parses for the sub-strings 1, 3 and 4.",
        "Cases 3 and 4 We informally discuss the cases in which tad can be split into trees tL;ad , tUL;ad , tUR;ad , for both positions of the head ad with respect to gap.tad /.",
        "In both cases we can adopt astrategy similar to the one of Case 2.",
        "We first expand tL;ad externally, at the side opposite to the head ad , with a tree fragment tUL;ador tUR;ad , similarly to rule (22) of Case 2.",
        "Thisresults in a new fragment t1.",
        "Next, we merge t1 with a parse for 2 containing the head ah, similarly to rule (23) of Case 2.",
        "This results in a new fragment t2 where a dependency relation involving the heads ad and ah is left pending.",
        "Finally, we merge t2 with a missing tree tUL;ad or tUR;ad , and process the pending dependency, similarly to rule (24).",
        "One should contrast this strategy with the alternative strategy adopted in Case 1, where the fragment of tad having block-degree 2 cannot be merged with aparse for the segment containing the head ah (2 in Case 1), because of an intervening fragment of tadwith block-degree 1 (tLL;ad in Case 1).Finally, if there is no node ad in tU;ah that inherits the gap of ah, we can split tU;ah into two dependency trees, as we have done for tL;ah in ?6.2, and parse the two fragments using the strategy of ?6.4."
      ]
    },
    {
      "heading": "6.6 Runtime",
      "text": [
        "Our algorithm runs in time O.n5/, where n is the length of the input sentence.",
        "The reason of the improvement with respect to the O.n6/ result of ?5 is that we no longer have deduction rules where both antecedents represent trees with a gap.",
        "In the new algorithm, the worst case is due to rules where only one antecedent has a gap.",
        "This leads to rules involving a maximum of five indices, ranging over ?1; n?.",
        "These rules can be instantiated in O.n5/ ways."
      ]
    },
    {
      "heading": "7 Empirical Coverage",
      "text": [
        "We have seen that the restriction to head-split dependency trees enables us to parse these trees one order of magnitude faster than the class of well-nested dependency trees with block-degree at most 2.",
        "In connection with the 1-inherit property, this even increases to two orders of magnitude.",
        "However, as already stated in ?2, this improvement is paid for by a loss in coverage; for instance, trees of the form shown in Figure 3 cannot be parsed any longer."
      ]
    },
    {
      "heading": "7.1 Quantitative Evaluation",
      "text": [
        "In order to assess the empirical loss in coverage that the restriction to head-split trees incurs, we evaluated the coverage of several classes of dependency trees on standard data sets.",
        "Following Pitler et al. (2012), we report in Table 1 figures for the training sets of six languages used in the CoNLL-X shared task on dependency parsing (Buchholz and Marsi, 2006).",
        "As we can see, the O.n6/ class of head-split trees has only slightly lower coverage on this data than the baseline class of well-nested dependency trees with block-degree at most 2.",
        "The losses are up to 0.2 percentage points on five of the six languages, and 0.9 points on the Dutch data.",
        "Our even more restricted O.n5/ class of 1-inherit head-split trees has the same coverage as ourO.n6/ class, which is expected given the results of Pitler et al. (2012): Their O.n6/ class of 1-inherit trees has exactly the same coverage as the baseline (and thereby more coverage than our O.n6/ class).",
        "Interestingly though, their O.n5/ class of ?gap-minding?",
        "trees has a significantly smaller coverage than our O.n5/ class.",
        "We conclude that our class seems to strike a good balance between expressiveness and parsing complexity."
      ]
    },
    {
      "heading": "7.2 Qualitative Evaluation",
      "text": [
        "While the original motivation behind introducing the head-split property was to improve parsing complexity, it is interesting to also discuss the linguistic relevance of this property.",
        "A first inspection of the structures that violate the head-split property revealed that many such violations disappear if one ignores gaps caused by punctuation.",
        "Some decisions about what nodes should function as the heads of punctuation symbols lead to more gaps than others.",
        "In order to quantify the implications of this, we recomputed the coverage of the class of head-split trees on data sets where we first removed all punctuation.",
        "The results are given in Table 2.",
        "We restrict ourselves to the five native dependency treebanks used in the CoNLL-X shared task, ignoring treebanks that have been converted from phrase structure representations.",
        "to the class of well-nested trees with block-degree 2) with and without punctuation.",
        "We see that when we remove punctuation from the sentences, the number of violations against the head-split property at most decreases.",
        "For Danish and Slovene, removing punctuation even has the effect that all well-nested dependency trees with block-degree at most 2 become head-split.",
        "Overall, the absolute numbers of violations are extremely small?",
        "except for Czech, where we have 139 violations with and 46 without punctuation.",
        "A closer inspection of the Czech sentences reveals that many of these feature rather complex coordinations.",
        "Indeed, out of the 46 violations in the punctuation-free data, only 9 remain when one ignores those with coordination.",
        "For the remaining ones, we have not been able to identify any clear patterns."
      ]
    },
    {
      "heading": "8 Concluding Remarks",
      "text": [
        "In this article we have extended head splitting techniques, originally developed for parsing of projective dependency trees, to two subclasses of well-nested dependency trees with block-degree at most 2.",
        "We have improved over the asymptotic runtime of two existing algorithms, at no significant loss in coverage.",
        "With the same goal of improving parsing efficiency for subclasses of non-projective trees, in very recent work Pitler et al. (2013) have proposed an O.n4/ time algorithm for a subclass of non-projective trees that are not well-nested, using an approach that is orthogonal to the one we have explored here.",
        "Other than for dependency parsing, our results have also implications for mildly context-sensitive phrase structure formalisms.",
        "In particular, the algorithm of ?5 can be adapted to parse a subclass of lexicalized tree-adjoining grammars, improving the result by Eisner and Satta (2000) from O.n7/ to O.n6/.",
        "Similarly, the algorithm of ?6 can be adapted to parse a lexicalized version of the tree-adjoining grammars investigated by Satta and Schuler (1998), improving a na?",
        "?ve O.n7/ algorithm to O.n5/."
      ]
    }
  ]
}
