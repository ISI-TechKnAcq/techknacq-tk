{
  "info": {
    "authors": [
      "Chris Worth"
    ],
    "book": "TTNLS",
    "id": "acl-W14-1404",
    "title": "The Phenogrammar of Coordination",
    "url": "https://aclweb.org/anthology/W14-1404",
    "year": 2014
  },
  "references": [
    "acl-P01-1033"
  ],
  "sections": [
    {
      "text": [
        "Abstract",
        "Linear Categorial Grammar (LinCG) is a sign-based, Curryesque, relational, logical categorial grammar (CG) whose central architecture is based on linear logic.",
        "Curryesque grammars separate the abstract combinatorics (tectogrammar) of linguistic expressions from their concrete, audible representations (phenogrammar).",
        "Most of these grammars encode linear order in string-based lambda terms, in which there is no obvious way to distinguish right from left.",
        "Without some notion of direc-tionality, grammars are unable to differen-tiate, say, subject and object for purposes of building functorial coordinate structures.",
        "We introduce the notion of a phenominator as a way to encode the term structure of a functor separately from its ?string support?.",
        "This technology is then employed to analyze a range of coordination phenomena typically left unaddressed by Linear Logic-based Curryesque frameworks.",
        "1 Overview Flexibility to the notion of constituency in conjunction with introduction (and composition) rules has allowed categorial grammars to successfully address an entire host of coordination phenomena in a transparent and compositional manner.",
        "While ?Curryesque?",
        "CGs as a rule do not suffer from some of the other difficulties that plague Lambek CGs, many are notably deficient in one area: coordination.",
        "Lest we throw the baby out with the bathwater, this is an issue that needs to be addressed.",
        "We take the following to be an exemplary subset of the relevant data, and adopt a fragment methodology to show how it may be analyzed.",
        "(1) Tyrion and Joffrey drank.",
        "(2) Joffrey whined and sniveled.",
        "(3) Tyrion slapped and Tywin chastised Jof-frey.",
        "The first example is a straightforward instance of noun phrase coordination.",
        "The second and third are both instances of what has become known in the categorial grammar literature as ?functor co-ordination?, that is, the coordination of linguistic material that is in some way incomplete.",
        "The third is particularly noteworthy as being an example of a ?right node raising?",
        "construction, whereby the argument Joffrey serves as the object to both of the higher NP-Verb complexes.",
        "We will show that all three examples can be given an uncomplicated account in the Curryesque framework of Linear Categorial Grammar (LinCG), and that (2) and (3) have more in common than not.",
        "Section 1 provides an overview of the data and and central issues surrounding an analysis of coordination in Curryesque grammars.",
        "Section 2 introduces the reader to the framework of LinCG, and presents the technical innovations at the heart of this paper.",
        "Section 3 gives lexical entries and derivations for the examples in section 1, and section 4 discusses our results and suggests some directions for research in the near future, with references following.",
        "1.1 Curryesque grammars and Linear Categorial Grammar We take as our starting point the Curryesque (af- ter Curry (1961)) tradition of categorial grammars, making particular reference to those originating with Oehrle (1994) and continuing with",
        "Abstract",
        "Categorial Grammar (ACG) of de Groote (2001), Muskens (2010)'s Lambda Grammar (?G), Kubota and Levine's Hybrid Type-Logical Categorial Grammar (Kubota and Levine, 2012) and to a lesser extent the Grammatical Framework of Ranta (2004), and others.",
        "These dialects 28 of categorial grammar make a distinction between Tectogrammar, or ?abstract syntax?, and Phenogrammar, or ?concrete syntax?.",
        "Tectogrammar is primarily concerned with the structural properties of grammar, among them co-occurrence, case, agreement, tense, and so forth.",
        "Phenogrammar is concerned with computing a pre-phonological representation of what will eventually be produced by the speaker, and encompasses word order, morphology, prosody, and the like.",
        "Linear Categorial Grammar (LinCG) is a sign-based, Curryesque, relational, logical categorial grammar whose central architecture is based on linear logic.",
        "Abbreviatory overlap has been a regrettably persistent problem, and LinCG is the same in essence as the framework varyingly called Linear Grammar (LG) and Pheno-Tecto-Differentiated Categorial Grammar (PTDCG), and developed in Smith (2010), Mihalicek (2012), Martin (2013), Pollard and Smith (2012), and Pollard (2013).",
        "In LinCG, the syntax-phonology and syntax-semantics interfaces amount to noting that the logics for the phenogrammar, the tectogram-mar, and the semantics operate in parallel.",
        "This stands in contrast to ?syntactocentric?",
        "theories of grammar, where syntax is taken to be the fundamental domain within which expressions com-bine, and then phonology and semantics are ?read off?",
        "of the syntactic representation.",
        "LinCG is conceptually different in that it has relational, rather than functional, interfaces between the three components of the grammar.",
        "Since we do not interpret syntactic types into phenogrammatical or semantic types, this allows us a great deal of freedom within each logic, although in practice we maintain a fairly tight connection between all three components.",
        "Grammar rules take the form of derivational rules which generate triples called signs, and they bind together the three logics so that they operate concurrently.",
        "While the invocation of a grammar rule might simply be, say, point-wise application, the ramifications for the three systems can in principle be different; one can imagine expressions which exhibit type asymmetry in various ways.",
        "By way of example, one might think of ?focus?",
        "as an operation which has reflexes in all three aspects of the grammar: it applies pitch accents to the target string(s) in the phenogrammar (the difference between accented and unaccented words being reflected in the phenotype), it creates ?low- ering?",
        "operators in the tectogrammar (that is, expressions which scope within a continuation), and it ?focuses?",
        "a particular meaningful unit in the semantics.",
        "A focused expression might share its tec-totype ((NP ( S) ( S) with, say, a quantified noun phrase, but the two could have different phe-notypes, reflecting the accentuation or lack thereof by placing the resulting expression in the domain of prosodic boundary phenomena or not.",
        "Never-theless, the system is constrained by the fact that the tectogrammar is based on linear logic, so if we take some care when writing grammar rules, we should still find resource sensitivity to be at the heart of the framework.",
        "1.2 Why coordination is difficult for Curryesque grammars Most Curryesque CGs encode linear order in lambda terms, and there is no obvious way to distinguish ?right?",
        "from ?left?",
        "by examining the types (be they linear or intuitionistic).",
        "1 This is not a problem when we are coordinating strings directly, as de Groote and Maarek (2007) show, but an analysis of the more difficult case of functor coordination remains elusive.",
        "2 Without some notion of directionality, grammars are unable to distinguish between, say, subject and object.",
        "This would seem to predict, for example, that ?s.",
        "s ?",
        "SLAPPED ?",
        "JOFFREY and ?s.",
        "TYRION ?",
        "SLAPPED ?",
        "s would have the same syntactic category (NP ( S in the tectogrammar, and St ?",
        "St in the phenogram-mar), and would thus be compatible under coor-dination, but this is generally not the case.",
        "What we need is a way to examine the structure of a lambda term independently of the specific string constants that comprise it.",
        "To put it another way, in order to coordinate functors, we need to be able to distinguish between what Oehrle (1995) calls their string support, that is, the string constants which make up the body of a particular functional term, and the linearization structure such functors impose on their arguments.",
        "2 Linear Categorial Grammar (LinCG) Curryesque grammars separate the notion of linear order from the abstract combinatorics of linguis-1 A noteworthy exception is Ranta's Grammatical Framework (GF), explored in, e.g. Ranta (2004) and Ranta (2009).",
        "GF also makes distinctions between tectogrammar and phenogrammar, though it has a somewhat different conception of each.",
        "2 A problem explicitly recognized by Kubota (2010) in section 3.2.1.",
        "29 tic expressions, and as such base their tectogram-mars around logics other than bilinear logic; the Grammatical Framework is based on Martin-L?of type theory, and LinCG and its cousins ACG and ?G use linear logic.",
        "Linear logic is generally described as being ?resource-sensitive?, owing to the lack of the structural rules of weakening and contraction.",
        "Resource sensitivity is an attractive no-tion, theoretically, since it allows us to describe processes of resource production, consumption, and combination in a manner which is agnostic about precisely how resources are combined.",
        "Certain problems which have been historically tricky for Lambek categorial grammars (medial extrac-tion, quantifier scope, etc.)",
        "are easily handled by LinCG.",
        "Since a full introduction to the framework is regrettably impossible given current constraints, we refer the interested reader to the references in section 1.1, which contain a more in-depth discussion of the potential richness of the architecture of LinCG.",
        "We do not wish to say anything new about the semantics or the tectogrammar of coordination in the current discussion, so we will expend our time fleshing out the phenogrammatical component of the framework, and it is to this topic that we now turn.",
        "2.1 LinCG Phenogrammar LinCG grammar rules take the form of tripartite inference rules, indicating what operations take place pointwise within each component of the signs in question.",
        "There are two main grammar rules, called application (App) for combining signs, and abstraction (Abs) for creating the potential for combination through hypothetical reasoning.",
        "Aside from the lexical entries given as axioms of the theory, it is also possible to obtain typed variables using the rule of axiom (Ax), and we make use of this rule in the analysis of right node raising found in section 3.4.",
        "While the tectogrammar of LinCG is based on a fragment of linear logic, the phenogrammatical and semantic components are based on higher order logic.",
        "Since we are concerned only with the phenogrammatical component here, we have chosen to simplify the exposition by presenting only the phenogrammatical part of the rules of application and abstraction: Ax f : A ` f : A ?",
        "` f : A?",
        "B ?",
        "` a : A App ?,?",
        "` (f a) : B ?, x : A ` b : B Abs ?",
        "` ?x : A. b : A?",
        "B We additionally stipulate the following familiar axioms governing the conversion and reduction of lambda terms: 3 ` ?x : A. b = ?y : A.",
        "[y/x]b (?-conversion) ` (?x.",
        "b a) = [a/x]b (?-reduction) As is common to any number of Curryesque frameworks, we encode the phenogrammatical parts of LinCG signs with typed lambda terms consisting of strings, and functions over strings.",
        "4 We axiomatize our theory of strings in the familiar way: ` \u000f : St ` ?",
        ": St?",
        "St?",
        "St ` ?stu : St. s ?",
        "(t ?",
        "u) = (s ?",
        "t) ?",
        "u ` 's : St. \u000f ?",
        "s = s = s ?",
        "\u000f The first axiom asserts that the empty string \u000f is a string.",
        "The second axiom asserts that concate-nation, written ?, is a (curried) binary function on strings.",
        "The third axiom represents the fact that concatenation is associative, and the fourth, that the empty string is a two-sided identity for concatenation.",
        "Because of the associativity of con-catenation, we will drop parentheses as a matter of convention.",
        "The phenogrammar of a typical LinCG sign will resemble the following (with one complication to be added shortly): ` ?s.",
        "s ?",
        "SNIVELED : St?",
        "St Since we treat St as the only base type, we will generally omit typing judgments in lambda terms when no confusion will result.",
        "Furthermore, we use SMALL CAPS to indicate that a particular constant is a string.",
        "So, the preceding lexical entry provides us with a function from some string s, to strings, which concatenates the string SNIVELED to the right of s. 2.1.1 Phenominators The center of our analysis of coordination is the notion of a phenominator (short for pheno-combinator), a particular variety of typed lambda term.",
        "Intuitively, phenominators serve the same purpose for LinCG that bilinear (slash) types do for Lambek categorial grammars.",
        "Specifically, 3 The exact status of the rule of ?-conversion with respect to this framework is currently unclear, and since we do not make use of it, we omit its discussion here.",
        "4 although other structures have been proposed, e.g. the node sets found in Muskens (2001).",
        "30 they encode the linearization structure of a func-tor, that is, where arguments may eventually occur with respect to its string support.",
        "To put it another way, a phenominator describes the structure a functor ?projects?, in terms of linear order.",
        "From a technical standpoint, we would like to define a phenominator as a closed monoidal linear lambda term, i.e. a term containing no constants other than concatenation and the empty string.",
        "The idea is that phenominators are the terms of the higher order theory of monoids, and they in some ways describe the abstract ?shape?",
        "of possible string functions.",
        "For those accustomed to thinking of ?syntax?",
        "as being word order, then phenominators can be thought of as a kind of syntactic combinator.",
        "In practice, we will make use only of what we call the unary phenominators, the types of which we will refer to using the sort ?",
        "(with ?",
        "used by custom as a metavariable over unary phenominators, i.e. terms whose type is in ?).",
        "These are not unary in the strict sense, but they will have as their centerpiece one particular string variable, which will be bound with the highest scope.",
        "We will generally abbreviate phenominators by the construction with which they are most commonly associated: VP for verb phrases and intransitive verbs, TV for transitive verbs, DTV for ditransitive verbs, QNP for quantified noun phrases, and RNR for right node raising constructions.",
        "Here are examples of some of the most common phenominators we will make use of and the abbreviations we customarily use for them: Phenominator Abbreviation ?s.s (omitted) ?vs.s ?",
        "v VP ?vst.t ?",
        "v ?",
        "s TV ?vstu.u ?",
        "v ?",
        "s ?",
        "t DTV ?vP.",
        "(P v) QNP ?vs.v ?",
        "s RNR As indicated previously, the first argument of a phenominator always corresponds to what we refer to (after Oehrle (1995)) as the string support of a particular term.",
        "With the first argument dispensed with, we have chosen the argument order of the phenominators out of general concern for what we perceive to be fairly uncontroversial categorial analyses of English grammatical phenomena.",
        "That is, transitive verbs take their object arguments first, and then their subject arguments, di-transitives take their first and second object argu-ments, followed by their subject argument, etc.",
        "As long as the arguments in question are immediately adjacent to the string support at each successive application, it is possible to permute them to some extent without losing the general thrust of the analysis.",
        "For example, the choice to have transitive verbs take their object arguments first is insignificant.",
        "5 Since strings are implicitly under the image of the identity phenominator ?s.s, we will consistently omit this subscript.",
        "We will be able to define a function we call say, so that it will have the following property: ` 's : St.??",
        ": ?.say (?",
        "s) = s That is, say is a left inverse for unary phenomi-nators.",
        "The function say is defined recursively via certain objects we call vacuities.",
        "The idea of a vacuity is that it be in some way an ?empty argument?",
        "to which a functional term may apply.",
        "If we are dealing with functions taking string arguments, it seems obvious that the vacuity on strings should be the empty string \u000f.",
        "If we are dealing with second-order functions taking St?",
        "St arguments, for example, quantified noun phrases like every-one, then the vacuity on St ?",
        "St should be the identity function on strings, ?s.s.",
        "Higher vacuities than these become more complicated, and defining all of the higher-order vacuities is not entirely straightforward, as certain types are not guaranteed to have a unique vacuity.",
        "Fortunately, we can do it for any higher-function taking as an argument another function under the image of a phenominator ?",
        "then the vacuity on such a function is just the phenominator applied to the empty string.",
        "6 The central idea is easily understood when one asks what, say, a vacuous transitive verb sounds like.",
        "The answer seems to be: by itself, nothing, but it imposes a certain order on its arguments.",
        "One practical application of this clause is in analyzing so-called ?argument cluster coordination?, where this definition will ensure that the argument cluster gets linearized in the correct manner.",
        "This analysis is regrettably just outside the scope of the current inquiry, though the notion of the phenomina-5 Since we believe it is possible to embed Lambek categorial grammars in LinCG, this fact reflects that the calculus we are dealing with is similar to the associative Lambek Calculus.",
        "6 A reviewer suggests that this concept may be related to the ?context passing representation?",
        "of Hughes (1995), and the association of a nil term with its continuation with respect to contexts is assuredly evocative of the association of the vacuity on a phenominator-indexed type with the continuation of \u000f with respect to a phenominator.",
        "31 tor can be profitably employed to provide exactly such an analysis by adopting and reinterpreting a categorial account along the lines of the one given in Dowty (1988).",
        "We formally define vacuities as follows: vac St?St = def ?s.s vac ?",
        "?",
        "= def (?",
        "\u000f) The reader should note that as a special case of the second clause, we have vac St = vac St ?s.s = (?s.s \u000f) = \u000f This in turn enables us to define say: say St = def ?s.s say ?",
        "1 ??",
        "2 = def ?k : ?",
        "1 ?",
        "?",
        "2 .",
        "say ?",
        "2 (k vac ?",
        "1 ) say (?",
        "1 ??",
        "2 ) ?",
        "= def say ?",
        "1 ??",
        "2 For an expedient example, we can apply say to our putative lexical entry from earlier, and verify that it will reduce to the string SNIVELED as de-sired: say St?St ?s.",
        "s ?",
        "SNIVELED = ?k : St?",
        "St. (say St (k vac St )) ?s.",
        "s ?",
        "SNIVELED = say St (?s.",
        "s ?",
        "SNIVELED vac St ) = say St (?s.",
        "s ?",
        "SNIVELED \u000f) = say St \u000f ?",
        "SNIVELED = say St SNIVELED = ?s.s SNIVELED = SNIVELED 2.1.2 Subtyping by unary phenominators In order to augment our type theory with the relevant subtypes, we turn to Lambek and Scott (1986), who hold that one way to do subtyping is by defining predicates that amount to the characteristic function of the particular subtype in ques-tion, and then ensuring that these predicates meet certain axioms embedding the subtype into the su-pertype.",
        "We will be able to write such predicates using phenominators.",
        "A unary phenominator is one which has under its image a function whose string support is a single contiguous string.",
        "With this idea in place, we are able to assign subtypes to functional types in the following way.",
        "For ?",
        "a (functional) type, we write ?",
        "?",
        "(with ?",
        "a phenominator) as shorthand for ?",
        "?",
        "?",
        ", where: ?",
        "?",
        "= ?f : ?",
        ".",
        "'s : St.f = (?",
        "s) Then ?",
        "?",
        "constitutes a subtyping predicate in the manner of Lambek and Scott (1986).",
        "For example, let ?",
        "= St?",
        "St and ?",
        "= ?vs.s?v.",
        "Let us consider the following (putative) lexical entry (pheno only): ` 's ?",
        ".",
        "s ?",
        "?",
        "SNIVELED : (St?",
        "St) VP Then our typing is justified along the following lines: ?",
        "?",
        "::= (St?",
        "St) VP ::= (St?",
        "St) ?vs.s?v ::= (St?",
        "St) ?f :St?St.",
        "?t:St.f=(?vs.s?v t) So applying the subtyping predicate to the term in question, we have (?f : St?",
        "St. ?t : St. f = (?vs.s ?",
        "v t) 's ?",
        ".",
        "s ?",
        "?",
        "SNIVELED) = ?t : St.'s ?",
        ".",
        "s ?",
        "?",
        "SNIVELED = (?vs.s ?",
        "v t) = ?t : St.'s ?",
        ".",
        "s ?",
        "?",
        "SNIVELED = ?s.",
        "s ?",
        "t = ?t : St.?s.",
        "s ?",
        "SNIVELED = ?s.",
        "s ?",
        "t which is true with t = SNIVELED, and the term is shown to be well-typed.",
        "3 Analysis The basic strategy underlying our analysis of coordination is that in order to coordinate two linguistic signs, we need to track two things: their linearization structure, and their string support.",
        "If we have access to the linearization structure of each conjunct, then we can check to see that it is the same, and the signs are compatible for coordination.",
        "Furthermore, we will be able to maintain this structure independent of the actual string support of the individual signs.",
        "Phenominators simultaneously allow us to check the linearization structure of coordination candidates and to reconstruct the relevant linearization functions after coordination has taken place.",
        "The function say addresses the second point.",
        "For a given sign, we can apply say to it in order to retrieve its string support.",
        "Then, we will be able to directly coordinate the resulting strings by concatenating them with a conjunction in between.",
        "Finally, we can apply the phenominator to the resulting string and retrieve the new linearization function, containing the entire coordinate structure as its string support.",
        "3.1 Lexical entries In LinCG, lexical entries constitute the (nonlogi- cal) axioms of the proof theory.",
        "First we consider the simplest elements of our fragment, the phenos for the proper names Joffrey, Tyrion, and Tywin: (4) a.",
        "` JOFFREY : St b. ` TYRION : St c. ` TYWIN : St Next, we consider the intransitive verbs drank, sniveled and whined.",
        ": 32 (5) a.",
        "` ?s.",
        "s ?",
        "DRANK : (St?",
        "St) VP b. ` ?s.",
        "s ?",
        "SNIVELED : (St?",
        "St) VP c. ` ?s.",
        "s ?",
        "WHINED : (St?",
        "St) VP Each of these is a function from strings to strings, seeking to linearize its ?subject?",
        "string argument to the left of the verb.",
        "They are under the image of the ?verb phrase?",
        "phenominator ?vs.s ?",
        "v. The transitive verbs chastised and slapped seek to linearize their first string argument to the right, resulting in a function under the image of the VP phenominator, and their second argument to the left, resulting in a string.",
        "(6) a.",
        "` ?st.",
        "t ?",
        "CHASTISED ?",
        "s : (St?",
        "St?",
        "St) TV b. ` ?st.",
        "t ?",
        "SLAPPED ?",
        "s : (St?",
        "St?",
        "St) TV Technically, this type could be written (St ?",
        "(St ?",
        "St) VP ) TV , but for the purposes of coordina-tion, the present is sufficient.",
        "Each of these entries is under the image of the ?transitive verb?",
        "phenominator ?vst.t ?",
        "v ?",
        "s. Finally, we come to the lexical entry schema for and: (7) ` ?c 1 : ?",
        "?",
        ".",
        "?c 2 : ?",
        "?",
        ".",
        "?",
        "((say ?",
        "?",
        "c 2 ) ?",
        "AND ?",
        "(say ?",
        "?",
        "c 1 )) : ?",
        "?",
        "?",
        "?",
        "?",
        "?",
        "?",
        "?",
        "We note first that it takes two arguments of identical types ?",
        ", and furthermore that these must be under the image of the same phenominator ?.",
        "It then returns an expression of the same subtype.",
        "7 This mechanism bears more detailed examination.",
        "First, each conjunct is subjected to the function say, which, given its type, will return the string support of the conjunct.",
        "Then, the resulting strings are concatenated to either side of the string AND.",
        "Finally, the phenominator of each argument is applied to the resulting string, creating a function identical to the linearization functions of each of the conjuncts, except with the coordinated string in the relevant position.",
        "3.2 String coordination String coordination is direct and straightforward.",
        "Since string-typed terms are under the image of 7 Since ?",
        "occurs within both the body of the term and the subtyping predicate, we note that this effectively takes us into the realm of dependent types.",
        "Making the type theory of the phenogrammar precise is an ongoing area of research, and we are aware that constraining the type system is of paramount importance for computational tractability.",
        "the identity phenominator, and since say St is also defined to be the identity on strings, the lexical entry we obtain for and simply concatenates each argument string to either side of the string AND.",
        "We give the full term reduction here, although this version of and can be shown to be equal to the fol-lowing: ` ?c 1 c 2 : St. c 2 ?",
        "AND ?",
        "c 1 : St?",
        "St?",
        "St Since our terms at times become rather large, we will adopt a convention where proof trees are given with numerical indexes instead of sequents, with the corresponding sequents following below (at times on multiple lines).",
        "We will from time to time elide multiple steps of reduction, noting in passing the relevant definitions to consider when reconstructing the proof.",
        "6 1 2 3 4 5 7 1.",
        "` ?c 1 : St. ?c 2 : St. ?s.s ((say St c 2 ) ?",
        "AND ?",
        "(say St c 1 )) : St?",
        "St?",
        "St 2.",
        "` JOFFREY : St 3.",
        "` ?c 2 : St. ?s.s ((say St c 2 ) ?",
        "AND ?",
        "(say St JOFFREY)) = ?c 2 : St. ?s.s ((say St c 2 ) ?",
        "AND ?",
        "(?s.s JOFFREY)) = ?c 2 : St. ?s.s ((say St c 2 )?AND?JOFFREY) : St?",
        "St 4.",
        "` TYRION : St 5.",
        "` ?s.s ((say St TYRION) ?",
        "AND ?",
        "JOFFREY) : St = ?s.s ((?s.s TYRION)?AND?JOFFREY) : St = ?s.s (TYRION ?",
        "AND ?",
        "JOFFREY) : St = TYRION ?",
        "AND ?",
        "JOFFREY : St 6.",
        "` ?s.",
        "s ?",
        "DRANK : (St?",
        "St) VP 7.",
        "` TYRION ?",
        "AND ?",
        "JOFFREY ?",
        "DRANK : St 3.3 Functor coordination Here, in order to understand the term appearing in each conjunct, it is helpful to notice that the following equality holds (with f a function from strings to strings, under the image of the VP phe-nominator): f : (St?",
        "St) VP ` say (St?St) VP f = say St?St f = say St (f vac St ) = say St (f \u000f) = ?s.s (f \u000f) = (f \u000f) : St 33 This says that to coordinate VPs, we will first need to reduce them to their string support by feeding their linearization functions the empty string.",
        "For the sake of brevity, this term reduction will be elided from steps 5 and 8 in the derivations below.",
        "Steps 2 and 6 constitute the hypothesizing and subsequent withdrawal of an ?object?",
        "string argument t ?",
        ", as do steps 10 and 14 (s ?",
        ").",
        "Formatting restrictions prohibit rule-labeling on the proof trees, so we note that these are each instances of the rules of axiom (Ax) and abstraction (Abs), respectively.",
        "1 2 3 4 5 6 7 1.",
        "` ?c 1 : (St?",
        "St) VP .",
        "?c 2 : (St?",
        "St) VP .",
        "?vs.s ?",
        "v ((say (St?St) VP c 2 ) ?",
        "AND ?",
        "(say (St?St) VP c 1 )) : (St?",
        "St) VP ?",
        "(St?",
        "St) VP ?",
        "(St?",
        "St) VP 2.",
        "` ?s.",
        "s ?",
        "SNIVELED : (St?",
        "St) VP 3.",
        "` ?c 2 : (St?",
        "St) VP .",
        "?vs.s ?",
        "v ((say (St?St) VP c 2 ) ?",
        "AND ?",
        "(say (St?St) VP ?s.",
        "s ?",
        "SNIVELED)) .",
        ".",
        ".",
        "= ?c 2 : (St?",
        "St) VP .",
        "?vs.s ?",
        "v ((say (St?St) VP c 2 ) ?",
        "AND ?",
        "SNIVELED) : (St?",
        "St) VP ?",
        "(St?",
        "St) VP 4.",
        "` ?s.",
        "s ?",
        "WHINED : (St?",
        "St) VP 5.",
        "` ?vs.s ?",
        "v ((say (St?St) VP ?s.",
        "s ?",
        "WHINED) ?",
        "AND ?",
        "SNIVELED) .",
        ".",
        ".",
        "= (?vs.s ?",
        "v WHINED ?",
        "AND ?",
        "SNIVELED) = ?s.",
        "s ?",
        "WHINED ?",
        "AND ?",
        "SNIVELED : (St?",
        "St) VP 6.",
        "` JOFFREY : St 7.",
        "` JOFFREY ?",
        "WHINED ?",
        "AND ?",
        "SNIVELED : St 3.4 Right node raising In the end, ?right node raising?",
        "constructions prove only to be a special case of functor coordination.",
        "The key here is the licensing of the ?rightward- looking?",
        "functors, which are under the image of the phenominator ?vs.v ?",
        "s. As was the case with the ?leftward-looking?",
        "functor coordination example in section 3.3, this analysis is essentially the same as the well-known Lambek categorial grammar analysis originating in Steedman (1985) and continuing in Dowty (1988) and Morrill (1994).",
        "The difference is that we encode directionality in the phenominator, rather than in the type.",
        "Since our system does not include function composition as a rule, but as a theorem, we will need to make use of hypothetical reasoning in order to permute the order of the string arguments in order to construct expressions with the correct structure.",
        "8 As was the case with the functor coordination example in section 3.3, applying say to the conjuncts passes them the empty string, reducing them to their string support, as shown here: f : (St?",
        "St) RNR ` say (St?St) RNR f = say St?St f = say St (f vac St ) = say St (f \u000f) = ?s.s (f \u000f) = (f \u000f) : St As before, this reduction is elided in the proof given below, occurring in steps 8 and 15.",
        "7 1 2 3 4 5 6 8 9 10 11 12 13 14 15 16 17 1.",
        "` ?st.",
        "t ?",
        "CHASTISED ?",
        "s : (St?",
        "St?",
        "St) TV 2. t ?",
        ": St ` t ?",
        ": St 3. t ?",
        ": St ` ?t.",
        "t ?",
        "CHASTISED ?",
        "t ?",
        ": (St?",
        "St) VP 4.",
        "` TYWIN : St 5. t ?",
        ": St ` TYWIN ?",
        "CHASTISED ?",
        "t ?",
        ": St 6.",
        "` ?t ?",
        ".",
        "TYWIN ?CHASTISED ?t ?",
        ": (St?",
        "St) RNR 7.",
        "` ?c 1 : (St?",
        "St) RNR .",
        "?c 2 : (St?",
        "St) RNR .",
        "?vs.v ?",
        "s ((say (St?St) RNR c 2 ) ?",
        "AND ?",
        "(say (St?St) RNR c 1 )) : (St?",
        "St) RNR ?",
        "(St?",
        "St) RNR ?",
        "(St?",
        "St) RNR 8.",
        "` ?c 2 : (St?",
        "St) RNR .",
        "?vs.v ?",
        "s ((say (St?St) RNR c 2 ) ?",
        "AND ?",
        "(say (St?St) RNR ?t ?",
        ".",
        "TYWIN?CHASTISED?t ? ))",
        ".",
        ".",
        ".",
        "= ?c 2 : (St?",
        "St) RNR .",
        "?vs.v ?",
        "s 8 Regrettably, space constraints prohibit a discussion verifying the typing for the ?right node raised?",
        "terms.",
        "The reader can verify that the terms are in fact well-typed given the subtyping schema in section 2.1.2.",
        "It is possible to write inference rules that speak directly to the introduction and elimination of the relevant functional subtypes, but these are omitted here for the sake of brevity.",
        "34 ((say (St?St) RNR c 2 ) ?",
        "AND ?",
        "TYWIN ?",
        "CHASTISED) : (St?",
        "St) RNR ?",
        "(St?",
        "St) RNR 9.",
        "` ?st.",
        "t ?",
        "SLAPPED ?",
        "s : (St?",
        "St?",
        "St) TV 10. s ?",
        ": St ` s ?",
        ": St 11. s ?",
        ": St ` ?t.",
        "t ?",
        "SLAPPED ?",
        "s ?",
        ": (St?",
        "St) VP 12.",
        "` TYRION : St 13. s ?",
        ": St ` TYRION ?",
        "SLAPPED ?",
        "s ?",
        ": St 14.",
        "` 's ?",
        ".",
        "TYRION ?",
        "SLAPPED ?",
        "s ?",
        ": (St?",
        "St) RNR 15.",
        "` ?vs.v ?",
        "s ((say (St?St) RNR 's ?",
        ".",
        "TYRION ?",
        "SLAPPED ?",
        "s ? )",
        "?",
        "AND ?",
        "TYWIN ?",
        "CHASTISED) .",
        ".",
        ".",
        "= (?vs.v ?",
        "s TYRION ?",
        "SLAPPED ?",
        "AND ?",
        "TYWIN ?",
        "CHASTISED) = ?s.",
        "TYRION ?",
        "SLAPPED ?",
        "AND ?",
        "TYWIN ?",
        "CHASTISED ?",
        "s : (St?",
        "St) RNR 16.",
        "` JOFFREY : St 17.",
        "` TYRION ?",
        "SLAPPED ?",
        "AND ?",
        "TYWIN ?",
        "CHASTISED ?",
        "JOFFREY : St 4 Discussion We provide a brief introduction to the framework of Linear Categorial Grammar (LinCG).",
        "One of the primary strengths of categorial grammar in general has been its ability to address coordination phenomena.",
        "Coordination presents a uniquely particular problem for grammars which distinguish between structural combination (tectogram- mar) and the actual linear order of the strings generated by such grammars (part of phenogrammar).",
        "Due to the inability to distinguish ?directionality?",
        "in string functors within a standard typed lambda calculus, a general analysis of coordination seems difficult.",
        "We have elaborated LinCG's concept of phenogrammar by introducing phenominators, closed monoidal linear lambda terms.",
        "We have shown how the recursive function say provides a left inverse for unaryphenominators, and we have defined a more general notion of an ?empty cate-gory?",
        "known as a vacuity, which say is defined in terms of.",
        "It is then possible to describe subtypes of functional types suitable to make the relevant distinctions.",
        "These technologies enable us to give analyses of various coordination phenomena in LinCG, extending the empirical coverage of the framework.",
        "4.1 Future work It is possible to give an analysis of argument cluster coordination using phenominators, instantiating the lexical entry for and with ?",
        "as the type (St?",
        "St?",
        "St?",
        "St) DTV ?",
        "(St?",
        "St) VP and ?",
        "as ?vPs.",
        "s?",
        "(P\u000f\u000f\u000f)?v, and using hypothetical reasoning.",
        "Regrettably, the necessity of brevity prohibits a detailed account here.",
        "Given that phenominators provide access to the structure of functional terms which concatenate strings to the right and left of their string support, it is our belief that any Lambek categorial grammar analysis can be recast in LinCG by an algorithmic translation of directional slash types into phenominator-indexed functional phenotypes, and we are currently in the process of evaluating a potential translation algorithm from directional slash types to phenominators.",
        "This should in turn provide us with most of the details necessary to describe a system which emulates the HTLCG of Kubota and Levine (2012), which provides analyses of various gapping phenomena, greatly increasing the overall empirical coverage.",
        "There are a number of coordination phenomena that require modifications to the tectogrammatical component.",
        "We would like to be able to analyze unlike category coordinations like rich and an excellent cook in the manner of Bayer (1996), as well as Morrill (1996), which would require the addition of some variety of sum types in the tectogram-mar.",
        "Further muddying the waters is so-called ?it- erated?",
        "or ?list?",
        "coordination, which requires the ability to generate coordinate structures containing a number of conjuncts with no coordinating conjunction, as in Thurston, Kim, and Steve.",
        "It is our intent to extend the use of phenominators to analyze intonation as well, and we expect that they can be fruitfully employed to give accounts of focus, association with focus, contrastive topicalization, ?in-situ?",
        "topicalization, alternative questions, and any number of other phenomena which are at least partially realized prosodically.",
        "Acknowledgements I am grateful to Carl Pollard, Bob Levine, Yusuke Kubota, Manjuan Duan, Gerald Penn, the TTNLS 2014 committee, and two anonymous reviewers for their comments.",
        "Any errors or misunderstandings rest solely on the shoulders of the author.",
        "35 References"
      ]
    }
  ]
}
