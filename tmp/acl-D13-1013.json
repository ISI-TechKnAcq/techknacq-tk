{
  "info": {
    "authors": [
      "Mohammad Sadegh Rasooli",
      "Joel Tetreault"
    ],
    "book": "EMNLP",
    "id": "acl-D13-1013",
    "title": "Joint Parsing and Disfluency Detection in Linear Time",
    "url": "https://aclweb.org/anthology/D13-1013",
    "year": 2013
  },
  "references": [
    "acl-H05-1030",
    "acl-H93-1066",
    "acl-J08-4003",
    "acl-J13-1002",
    "acl-N01-1016",
    "acl-N06-2019",
    "acl-N09-2028",
    "acl-N13-1083",
    "acl-N13-1102",
    "acl-P04-1005",
    "acl-P08-2027",
    "acl-P11-1071",
    "acl-P11-2033",
    "acl-W02-1001",
    "acl-W04-0308"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "We introduce a novel method to jointly parse and detect disfluencies in spoken utterances.",
        "Our model can use arbitrary features for parsing sentences and adapt itself with out-of-domain data.",
        "We show that our method, based on transition-based parsing, performs at a high level of accuracy for both the parsing and disfluency detection tasks.",
        "Additionally, our method is the fastest for the joint task, running in linear time."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "Detecting disfluencies in spontaneous speech has been widely studied by researchers in different communities including natural language processing (e.g. Qian and Liu (2013)), speech processing (e.g. Wang et al. (2013)) and psycholinguistics (e.g. Finlayson and Corley (2012)).",
        "While the percentage of spoken words which are disfluent is typically not more than ten percent (Bortfeld et al., 2001), this additional ?noise?",
        "makes it much harder for spoken language systems to predict the correct structure of the sentence.",
        "Disfluencies can be filled pauses (e.g.",
        "?uh?, ?um?, ?huh?",
        "), discourse markers (e.g. ?you know?, ?I mean?)",
        "or edited words which are repeated or corrected by the speaker.",
        "For example, in the following sentence, an edited phrase or reparandum interval (?to Boston?)",
        "occurs with its repair (?to Denver?",
        "), a filled pause (?uh?)",
        "and discourse marker (?I ?",
        "The first author worked on this project while he was a research intern in CoreNL research group, NLU lab, Nuance",
        "Filled pauses and discourse markers are to some extent a fixed and closed set.",
        "The main challenge in finding disfluencies is the case where the edited phrase is neither a rough copy of its repair or has any repair phrase (i.e. discarded edited phrase).",
        "Hence, in previous work, researchers report their method performance on detecting edited phrases (reparan-dum) (Johnson and Charniak, 2004).",
        "In contrast to most previous work which focuses solely on either detection or on parsing, we introduce a novel framework for jointly parsing sentences with disfluencies.",
        "To our knowledge, our work is the first model that is based on joint dependency and disfluency detection.",
        "We show that our model is robust enough to detect disfluencies with high accuracy, while still maintaining a high level of dependency parsing accuracy that approaches the upper bound.",
        "Additionally, our model outperforms prior work on joint parsing and disfluency detection on the disfluency detection task, and improves upon this prior work by running in linear time complexity.",
        "The remainder of this paper is as follows.",
        "In ?2, we overview some the previous work on disfluency detection.",
        "?3 describes our model.",
        "Experiments are described in ?4 and Conclusions are made in ?5.",
        "1In the literature, edited words are also known as ?reparan-dum?, and the fillers are known as ?interregnum?.",
        "Filled pauses are also called ?Interjections?."
      ]
    },
    {
      "heading": "2 Related Work",
      "text": [
        "Disfluency detection approaches can be divided into two different groups: text-first and speech first (Nakatani and Hirschberg, 1993).",
        "In the first approach, all prosodic and acoustic cues are ignored while in the second approach both grammatical and acoustic features are considered.",
        "For this paper, we focus on developing a text-first approach but our model is easily flexible with speech-first features because there is no restriction on the number and types of features in our model.",
        "Among text-first approaches, the work is split between developing systems which focus specifically on disfluency detection and those which couple disfluency detection with parsing.",
        "For the former, Charniak and Johnson (2001) employ a linear classifier to predict the edited phrases in Switchboard corpus (Godfrey et al., 1992).",
        "Johnson and Charniak (2004) use a TAG-based noisy channel model to detect disfluencies while parsing with getting n-best parses from each sentence and re-ranking with a language model.",
        "The original TAG parser is not used for parsing itself and it is used just to find rough copies in the sentence.",
        "Their method achieves promising results on detecting edited words but at the expense of speed (the parser has a complexity of O(N5).",
        "Kahn et al. (2005) use the same TAG model and add semi-automatically extracted prosodic features.",
        "Zwarts and Johnson (2011) improve the performance of TAG model by adding external language modeling information from data sets such as Gigaword in addition to using minimal expected Floss in n-best re-ranking.",
        "Georgila (2009) uses integer linear programming combined with CRF for learning disfluencies.",
        "That work shows that ILP can learn local and global constraints to improve the performance significantly.",
        "Qian and Liu (2013) achieve the best performance on the Switchboard corpus (Godfrey et al., 1992) without any additional data.",
        "They use three steps for detecting disfluencies using weighted Max-Margin Markov (M3) network: detecting fillers, detecting edited words, and refining errors in previous steps.",
        "Some text-first approaches treat parsing and disfluency detection jointly, though the models differ in the type of parse formalism employed.",
        "Lease and Johnson (2006) use a PCFG-based parser to parse sentences along with finding edited phrases.",
        "Miller and Schuler (2008) use a right-corner transform of binary branching structures on bracketed sentences but their results are much worse than (Johnson and Charniak, 2004).",
        "To date, none of the prior joint approaches have used a dependency formalism."
      ]
    },
    {
      "heading": "3 Joint Parsing Model",
      "text": [
        "We model the problem using a deterministic transition-based parser (Nivre, 2008).",
        "These parsers have the advantage of being very accurate while being able to parse a sentence in linear time.",
        "An additional advantage is that they can use as many non-local and local features as needed.",
        "Arc-Eager Algorithm We use the arc-eager algorithm (Nivre, 2004) which is a bottom-up parsing strategy that is used in greedy and k-beam transition-based parsers.",
        "One advantage of this strategy is that the words can get a head from their left side, before getting right dependents.",
        "This is particularly beneficial for our task, since we know that reparanda are similar to their repairs.",
        "Hence, a reparandum may get its head but whenever the parser faces a repair, it removes the reparandum from the sentence and continues its actions.",
        "The actions in an arc-eager parsing algorithm are: ?",
        "Left-arc (LA): The first word in the buffer becomes the head of the top word in the stack.",
        "The top word is popped after this action.",
        "?",
        "Right-arc (RA): The top word in the stack becomes the head of the first word in the buffer.",
        "?",
        "Reduce (R): The top word in the stack is popped.",
        "?",
        "Shift (SH): The first word in the buffer goes to the top of the stack.",
        "Joint Parsing and Disfluency Detection We first extend the arc-eager algorithm by augmenting the action space with three new actions: ?",
        "Reparandum (Rp[i:j]): treat a phrase (words i to j) outside the lookahead buffer as a reparandum.",
        "Remove them from the sentence and clear their dependencies.",
        "?",
        "Discourse Marker (Prn[i]): treat a phrase in the lookahead buffer (first i words) as a discourse marker and remove them from the sentence.",
        "Stack Buffer Act.",
        "flight to Boston uh I mean ... RA flight to Boston uh I mean to ... RA flight to Boston uh I mean to Denver Intj[1] flight to Boston I mean to Denver Prn[1] flight to Boston to Denver RP[2:3]",
        "?flight to Boston uh I mean to Denver?.",
        "In the third column, only the underlined parse actions are learned by the parser (second classifier).",
        "The first classifier uses all instances for training (learns fluent words with ?regular?",
        "label).",
        "?",
        "Interjection (Intj[i]): treat a phrase in the lookahead buffer (first i words) as a filled pause and remove them from the sentence.2 Our model has two classifiers.",
        "The first classifier decides between four possible actions and possible candidates in the current configuration of the sentence.",
        "These actions are the three new ones from above and a new action Regular (Reg): which means do one of the original arc-eager parser actions.",
        "At each configuration, there might be several candidates for being a prn, intj or reparandum, and one regular candidate.",
        "The candidates for being a reparandum are a set of words outside the lookahead buffer and the candidates for being an intj or prn are a set of words beginning from the head of the lookahead buffer.",
        "If the parser decides regular as the correct action, the second classifier predicts the best parsing transition, based on arc-eager parsing (Nivre, 2004).",
        "For example, in the 4th state in Figure 1, there are multiple candidates for the first classifier: regular, ?I?",
        "as prn[1] or intj[1], ?I mean?",
        "as prn[2] or intj[2], ?I mean to?",
        "as prn[3] or intj[3], ?I mean to Denver?",
        "as prn[4] or intj[4], ?Boston?",
        "as rp[3:3], ?to Boston?",
        "as rp[2:3], and ?flight to Boston?",
        "as rp[1:3].",
        "2In the bracketed version of Switchboard corpus, reparandum is tagged with EDITED and discourse markers and paused fillers are tagged as PRN and INTJ respectively.",
        "Training A transition-based parser action (our second-level classifier) is sensitive to the words in the buffer and stack.",
        "The problem is that we do not have gold dependencies for edited words in our data.",
        "Therefore, we need a parser to remove reparandum words from the buffer and push them into the stack.",
        "Since our parser cannot be trained on disfluent sentences from scratch, the first step is to train it on clean treebank data.",
        "In the second step, we adapt parser weights by training it on disfluent sentences.",
        "Our assumption is that we do not know the correct dependencies between disfluent words and other words in the sentence.",
        "At each configuration, the parser updates itself with new instances by traversing all configurations in the sentences.",
        "In this case, if at the head of the buffer there is an intj or prn tag, the parser allows them to be removed from the buffer.",
        "If a reparandum word is not completely outside the buffer (the first two states in Figure 1), the parser decides between the four regular arc-eager actions (i.e. left-arc, right-arc, shift, and reduce).",
        "If the last word pushed into the stack is a reparandum and the first word in the buffer is a regular word, the parser removes all reparanda at the same level (in the case of nested edited words), removes their dependencies to other words and push their dependents into the stack.",
        "Otherwise, the parser performs the oracle action and adds that action as its new instance.3 With an adapted parser which is our second-level classifier, we can train our first-level classifier.",
        "The same procedure repeats, except that instances for disfluency detection are used for updating parameter weights for the first classifier for deciding the actions.",
        "In Figure 1, only the oracle actions (underlined) are added to the instances for updating parser weights but all first-level actions are learned by the first level classifier."
      ]
    },
    {
      "heading": "4 Experiments and Evaluation",
      "text": [
        "For our experiments, we use the Switchboard corpus (Godfrey et al., 1992) with the same train/dev/test split as Johnson and Charniak (2004).",
        "As in that",
        "work, incomplete words and punctuations are removed from data (except that we do not remove incomplete words that are not disfluent4) and all words are turned into lower-case.",
        "The main difference with previous work is that we use Switchboard mrg files for training and testing our model (since they contain parse trees) instead of the more commonly used Swithboard dps text files.",
        "Mrg files are a subset of dps files with about more than half of their size.",
        "Unfortunately, the disfluencies marked in the dps files are not exactly the same as those marked in the corresponding mrg files.",
        "Hence, our result is not completely comparable to previous work except for (Kahn et al., 2005; Lease and Johnson, 2006; Miller and Schuler, 2008).",
        "We use Tsurgeon (Levy and Andrew, 2006) for extracting sentences from mrg files and use the Penn2Malt tool5 to convert them to dependencies.",
        "Afterwards, we provide dependency trees with disfluent words being the dependent of nothing.",
        "Learning For the first classifier, we use averaged structured Perceptron (AP) (Collins, 2002) with a minor modification.",
        "Since the first classifier data is heavily biased towards the ?regular label?, we modify the weight updates in the original algorithm to 2 (original is 1) for the cases where a ?reparandum?",
        "is wrongly recognized as another label.",
        "We call the modified version ?weighted averaged Perceptron (WAP)?.",
        "We see that this simple modification improves the model accuracy.6 For the second classifier (parser), we use the original averaged structured Perceptron algorithm.",
        "We report results on both AP and WAP versions of the parser.",
        "Features Since for every state in the parser configuration, there are many candidates for being disfluent; we use local features as well as global features for the first classifier.",
        "Global features are mostly useful for discriminating between the four actions and local features are mostly useful for choosing a phrase as a candidate for being a disfluent phrase.",
        "The features are described in Figure 2.",
        "For the second classifier, we use the same features as (Zhang and Nivre, 2011, Table 1) except that we train our 4E.g.",
        "I want t-go to school.",
        "Refined n-gram is the n-gram without considering words that are recognized as disfluent.",
        "Fine-grained (FG) transitions are enriched with parse actions (e.g.",
        "?regular:leftarc?).",
        "parser in a similar manner as the MaltParser (Nivre et al., 2007) without k-beam training.",
        "Parser Evaluation We evaluate our parser with both unlabeled attachment accuracy of correct words and precision and recall of finding the dependencies of correct words.",
        "The second classifier is trained with 3 iterations in the first step and 3 iterations in the second step.",
        "We use the attachment accuracy of the parse tree of the correct sentences (without disfluencies) as the upper-bound attachment score and parsed tree of the disfluent sentences (without disfluency detection) as our lower-bound attachment score.",
        "As we can see in Table 1, WAP does a slightly better job parsing sentences.",
        "The upper-bound parsing accuracy shows that we do not lose too much information while jointly detecting disfluencies.",
        "Our parser is not comparable to (Johnson and Charniak, 2004) and (Miller and Schuler, 2008), since we use dependency relations for evaluation instead of constituencies."
      ]
    },
    {
      "heading": "Disfluency Detection Evaluation We evaluate",
      "text": [
        "and F1 is f-score.",
        "KL = (Kahn et al., 2005), LJ = (Lease and Johnson, 2006), MS = (Miller and Schuler, 2008) and QL = (Qian and Liu, 2013).",
        "(words with ?EDITED?",
        "tag in mrg files).",
        "As we see in Table 2, WAP works better than the original method.",
        "As mentioned before, the numbers are not completely comparable to others except for (Kahn et al., 2005; Lease and Johnson, 2006; Miller and Schuler, 2008) which we outperform.",
        "For the sake of comparing to the state of the art, the best result for this task (Qian and Liu, 2013) is replicated from their available software8 on the portion of dps files that have corresponding mrg files.",
        "For a fairer comparison, we also optimized the number of training iterations of (Qian and Liu, 2013) for the mrg set based on dev data (10 iterations instead of 30 iterations).",
        "As shown in the results, our model accuracy is slightly less than the state-of-the-art (which focuses solely on the disfluency detection task and does no parsing), but we believe that the performance can be improved through better features and by changing the model.",
        "Another characteristic of our model is that it operates at a very high precision, though at the expense of some recall."
      ]
    },
    {
      "heading": "5 Conclusion",
      "text": [
        "In this paper, we have developed a fast, yet accurate, joint dependency parsing and disfluency detection model.",
        "Such a parser is useful for spoken dialogue systems which typically encounter disfluent speech and require accurate syntactic structures.",
        "The model is completely flexible with adding other features (either text or speech features).",
        "There are still many ways of improving this framework such as using k-beam training and decoding, using prosodic and acoustic features, using out of domain data for improving the language and parsing models, and merging the two classifiers into one through better feature engineering.",
        "It is worth noting that we put the dummy root word in the first position of the sentence.",
        "Ballesteros and Nivre (2013) show that parser accuracy can improve by changing that position for English.",
        "One of the main challenges in this problem is that most of the training instances are not disfluent and thus the sample space is very sparse.",
        "As seen in the experiments, we can get further improvements by modifying the weight updates in the Perceptron learner.",
        "In future work, we will explore different learning algorithms which can help us address the sparsity problem and improve the model accuracy.",
        "Another challenge is related to the parser speed, since the number of candidates and features are much greater than the number used in classical dependency parsers.",
        "Acknowledgements We would like to thank anonymous reviewers for their helpful comments on the paper.",
        "Additionally, we were aided by researchers by their prompt responses to our many questions: Mark Core, Luciana Ferrer, Kallirroi Georgila, Mark Johnson, Jeremy Kahn, Yang Liu, Xian Qian, Kenji Sagae, and Wen Wang.",
        "Finally, this work was conducted during the first author's summer internship at the Nuance Sunnyvale Research Lab.",
        "We would like to thank the researchers in the group for the helpful discussions and assistance on different aspects of the problem.",
        "In particular, we would like to thank Chris Brew, Ron Kaplan, Deepak Ramachandran and Adwait Ratnaparkhi."
      ]
    }
  ]
}
