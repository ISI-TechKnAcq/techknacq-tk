{
  "info": {
    "authors": [
      "Steven Cushing"
    ],
    "book": "Conference of the European Association for Computational Linguistics",
    "id": "acl-E83-1001",
    "title": "Abstract Control Structures and the Semantics of Quantifiers",
    "url": "https://aclweb.org/anthology/E83-1001",
    "year": 1983
  },
  "references": [],
  "sections": [
    {
      "heading": "ABSTRACT CONTROL STRUCTURES AND THE SEMANTICS OF QUANTIFIERS",
      "text": [
        "Intuitively, a quantifier is any word or phrase that expresses a meaning that answers one of the questions \"How many?\"",
        "or \"How much?\"",
        "Typical English examples include all, no, many, few, some but not many, all but at most a very few, wherever, whoever, whoever there is, and also, it can be argued, only (Keenan, 1971), also (Cushing, 1978b), and the (Chomsky, 1977).",
        "In this paper we review an empirically motivated analysis of such meanings (Cushing, 1976; 1982a) and draw out its computational significance.",
        "For purposes of illustration, we focus our attention on the meanings expressed by the English words whatever and some, commonly represented, respectively, by the symbols \"V\" and \"3\", but most of what we say will generalize to the other meanings of this class.",
        "In Section 1, we review the notion of satisfaction in a model, through which logical formulas are customarily imbued implicitly with meaning.",
        "In Section 2, we discuss quantifier relativization, a notion that becomes important for meanings other than V and 3.",
        "In Section 3, we use these two notions to characterize quantifier meanings as structured functions of a certain sort.",
        "In Section 4, we discuss the computational significance of that analysis.",
        "In Section 5, we elaborate on this significance by outlining a notion of abstract control structure that the analysis instantiates."
      ]
    },
    {
      "heading": "I MODELS AND SATISFACTION",
      "text": [
        "Given a semantic representation language L containing predicate constants and individual constants and variables, an interpretation I of L is a triple <D, R, {f}›, where D is a set of individuals, the domain of I; R is a function, the interpretation function of I, that assigns members of D to individual constants in L and sets of lists of members of D to predicates in L, the length of a list being equal to the number of arguments in the predicate to which it corresponds; and {f} is a set of functions, the assignment functions of I, that assign members of D to variables in L. A model M for L is a pair <D, R>, an interpretation of L without its assignment functions.",
        "Since \"a factual situation comprises a set of individuals bearing certain relations to each other,\" such \"a situation can be represented by a relational structure <244,, 21,...>, where D is the set of individuals in question and R1,...,Ri,... certain relations on D,\" (van Fraassen, 1971, 107), i.e., in this context, sets of lists of members of D. Models thus serve intuitively to relate formulas in L to the factual situations they are intended to describe by mapping their constants into D and <12 ... R ...>.",
        "The \"variable\" character of the 4 .. 4' symbols assigned values by an f relative to those interpreted by R is reflected in the fact that a set of fs corresponds to a fixed <D, R> to comprise an interpretation.",
        "The distinction between R and f gives us two different levels on which the satisfaction of formulas can be defined, i.e., on which formulas in L can be said to be true or false under I.",
        "First, we define satisfaction relative to an assignment of values to variables, by formulating statements like (i)-(vi) of Figure 1, where \"M (A) [f]\" is read as f satisfies A in M or M satisfies Agiven f. Given these statements, we can/IWEITITTFA B , read if A then B, as \"-(B & -A)\", and we can define 173 x)117--read for some x or there are x, as \"-(V x)•,\".",
        "Second, we can define satisfaction by a model, by saying that M satisfies A, written \"M (A)\", if M (A) [f] for whatever assignment functions f there are for M. Intuitively, this can be read as saying that A is true of the factual situation that is represented by the relational structure into which L is interpreted, regardless of what values are given to variables by the assignment functions of an interpretation.",
        "For some discussion of the cognitive or psychological significance of these notions, see Miller (1979a,b) and Cushing (1983)."
      ]
    },
    {
      "heading": "II SIMPLE AND RELATIVIZED QUANTIFICATION",
      "text": [
        "Statement (v) of Figure 1 characterizes simple quantifications like (1), which represent the meanings expressed by sentences like (2), for which x = \"x\" and A = (3), while (vi) characterizes relativized quantifications like (4), which",
        "represent the meanings expressed by sentences like (5), for which x and A are as for (2) and B = (6):",
        "(1) (V x) A (2) Whatever there is is interesting.",
        "(3) Interesting(x) (4) (V x)(B;A) (5) Whatever is linguistic is interesting.",
        "(= Whatever there is that is linguistic is interesting.)",
        "(6) Linguistic(x)",
        "In general, B and A in (4) are lists of formulas in L, the relativization formulas and the principal formulas, respectively, of (4); both lists for (5) are of length 1, and we will assume lists of that length for the rest of our discussion.",
        "Given (v) and (vi), the relativized quantification (4) is logically equivalent to the simple quantification (7), reflecting the synonymy of (5) with (8), for example, but this fact does not generalize to quantifier meanings other than V, because there are quantifiers a for which there is no truth-functional connective c for which (9) is logically equivalent to (10):",
        "(7) (V x)(8 c A) (8) Whatever there is, if it is linguistic, then it is interesting.",
        "(9) (9. x)(B;A) (10) (g x)(B c A)",
        "For a formal proof of this important fact, see Cushing (1976; 1982a).",
        "The relativized case must thus be considered separately from the simple one, despite its apparent superfluity in the case of V, which suffices for our purposes (with 3) in all other respects."
      ]
    },
    {
      "heading": "III QUANTIFIER MEANINGS AS STRUCTURED FUNCTIONS",
      "text": [
        "Statement (vi) characterizes the meaning expressed by (4) implicitly, by stating the conditions under which (4) can be said to be either true or false; in general, other \"truth values\" are also required for natural language (Cushing, 1982a; 1983), but we will not discuss those cases here.",
        "Given (vi), we can characterize the meaning expressed by (4) explicitly as a function, (11), that generates a truth value u from M, f, x, B, and A:",
        "(11) u = V(M,f,x,B,A)",
        "If we let a* be the function that maps a predicate in L to its extension relative to M, f, and x -i.e., the subset of D whose members make that predicate satisfied by M given f when assigned individually as values to x --, then we can replace the English clause on the right-hand side of the \"iff\" in (vi) with the equivalent set-theoretic formulation (12), and thus (vi) itself with the equivalent statement (13):",
        "In other words, (4) is true if and only if the intersection of D with the extension of B is wholly contained as a subset in the extension of A.",
        "D is omitted from the right-hand side of the \" c \" in (12) for more general reasons that need not concern us here.",
        "Letting ai, 1=0,1,2, be set variables, we can abstract away from the sets in (12) to get the relation -- i.e., in this context, boolean-valued function -- (14), which can be factored into more basic component set-theoretic relations as shown in (15), in which the superscripts and subscripts indicate which argument places a relation is to be",
        "applied to, when the steps in the derivation are reversed:",
        "(14) 20 n alc a2 (15) 10 n 24 a2",
        "Finally, dropping the arguments ai from the last line of (15), we get the quantificaTional relation, py, expressed by V, as shown in (16): 2 (16) P = 2 ) -4' 1 The function (11), the meaning expressed by (4), thus consists of instances of two other functions: a*, which generates sets from models, assignments, and predicates; and which generates truth values from sets; all related as in",
        "viz., the three-input function a*( , ,true), rather than the four-input function a*( , , ) since true is a constant that must occur there, but this technicality need not worry us here.",
        "Each function in Figure 2 provides the same mapping as is provided collectively by the lower-level functions to which it is connected.",
        "\"Select sets\", for example, is a mnemonic dummy-name for the function that consists of the three indicated instances of a*, through which these three independent instances interface with py.",
        "The effect of V, in turn, is achieved by applying pv to whatever three sets are provided to it by Select-sets.",
        "Like Select-sets, pv can also be further decomposed into subfunctions, as shown in Figure 3, which reflects the structure of (15).",
        "The important point here is not the tree notation per se, but the fact that a functional hierarchy is involved, of the indicated sort.",
        "Any other notation that is capable of expressing the relevant relationships would be just as -- in certain respects, more (Cushing, 1982a, Figures 10 and 11) -- adequate for our purpose.",
        "For some general discussion of meanings as structured functions, see Cushing (1979a).",
        "The two immediate subfunctions of V differ in one key respect, namely, in that Select-sets has nothing to do specifically with V, but would be required in the analysis of any quantifier meaning; everything that is peculiar to V is encoded entirely in pv.",
        "An analysis of 3, for example, can be obtained by simply replacing pv in Figure 2 with an appropriate p3, viz., the one in (17), in which Comp is a function that take the complement of a set -- i.e., those members of D that are not in the set --, and Pair is a function that duplicates its input:",
        "1 (17) p = (#l2 'Comp11, n 2 4 ,Pair1) 3",
        "This relation unravels to exactly the correct truth condition and satisfaction statement for relativized 3, just as (16) does for V. In the general case, we also have to include a third subfunction, na, which generates a numerical parameter, as indicated in Figure 4.",
        "The function",
        "Select-sets -- more precisely, its a* subfunctions -- explicates the binding property common to all quantifier meanings, because it characterizes the extensions of predicates (via a*) by removing the relevant variable from the purview of the assignment, as can be seen clearly in statement (vi) of",
        "relation expressed by a, explicates the predication property of quantifier meanings, by virtue (primarily) of which different quantifier meanings are distinguished.",
        "Its quantificational relation is what a quantifier predicates; the extensions of the predicates it is applied to are what it predicates that of.",
        "The intuition that quantifiers are in some sense predicational is thus explained, even though the notion that they are \"higher predicates\" in a syntactic sense has long since failed the test of empirical verification.",
        "The function II is what underlies the irreducibility property of certain quantifier meanings, by virtue of which (9) is not logically equivalent to (10).",
        "Like p , is 2 2 specifically characteristic of a.",
        "For present purposes, we can consider it to be null in the case of V and 3.",
        "The relationship of these functions to the quantifier meanings they decompose is indicated schematically in Figure 5."
      ]
    },
    {
      "heading": "IV COMPUTATIONAL SIGNIFICANCE",
      "text": [
        "It must be stressed in the strongest possible terms that the motivation for the analysis embodied in Figure 4 has absolutely nothing at all to do with computational considerations of any sort.",
        "Computational relevance need not imply linguistic or cognitive relevance, any more than mathematical relevance does, and vice versa.",
        "See Cushing (1979b) and Berwick and Weinberg (1982) for relevant argumentation.",
        "On the contrary, the analysis is motivated by a wide range of linguistic and psychological considerations that is too extensive to review here.",
        "See Cushing (1982a) for the full argument.",
        "The analysis does have computational significance, however, which follows post facto from its form and consists in the fact that functional hierarchies of exactly the sort it exemplifies can be seen to make up the computational systems that are expressed by computer programs.",
        "If we take a program like the one in Figure 6, for example, and ask what functions -- i.e., mathematical mappings with no side effects -- it",
        "involves, we can answer immediately with the list in (18):",
        "There is a function that gets a value for y by adding 2 to the value of x, a function that gets a value for z' by squaring the sum of the values of x and y, and so on.",
        "Closer examination reveals, however, that there is an even larger number of other functions that must be recognized as being involved in Figure 6.",
        "First, there is the function in (19), which does appear explicitly in Figure 6, but without an explicit output variable:",
        "Second, there is the boolean-valued function in (20), which also appears in Figure 6, but with no indication as to its functional character: (20) b = <(s,.5) More significantly, there is a set of functions that are entirely implicit in Figure 6.",
        "Since (19) generates a value of s from a value of y, and (20) generates a value of b from that value of a, there is an implicit function -- call it Fl -- that is defined by that interaction, generating that value of b from that value of y, as indicated in (21): Similarly, since (18)(ii) and (iv) generate values of z' independently from values of x and y, and these are then taken by (18)(iii) and (v), respectively, to generate values of z, there are two further implicit functions -- call them F4 and",
        "F5 -- that are defined by these interactions, as shown in (22) and (23):",
        "Since F4 and F5 generate different values, in general, for z for the same values of x and y, they interact, in turn, to define a \"choice\" function call it F3 -- with its alternatives determined, in this case, by the value of b, as indicated in (24): Continuing in this way, we can extract two further functions: F2, which consists of the composition of (18vi) and F • and F0, which consists of the 3' 0' composition of F2, F1, and (18i) and defines the overall function effected by the program, as shown in Figure 7.",
        "The variables in Figure 6 are strictly numerical only for the sake of illustration.",
        "As we have just seen, even in this case, extracting the implicit functional hierarchy expressed by the program requires the introduction of a nonnumerical -- viz., boolean-valued -- variable.",
        "In general, variables in a program can be taken to range over any data type at all -- i.e., any kind of object to be processed --, as long as it can be provided with an appropriate implementation, and the same is therefore true, as well, of its implicit functional hierarchy.",
        "For an extensive list of references on abstract data types, see Kapur (1980); for some discussion of their complementary relationship with the functional hierarchies expressed by programs, see Cushing (1978a; 1980).",
        "The hierarchy expressed by an assembly language program, for example, might well involve variables that range over registers, locations, and the like, and bottom-node functions that store and retrieve data, and so on, just as Figure 4 has bottom-node functions that assign extensions to predicates and form the intersections of sets.",
        "Given implementations of these latter functions, Figure 4 defines a computational system, just as much as Figure 7 does, and so can be naturally implemented in whatever programming language those implementations are themselves formulated in."
      ]
    },
    {
      "heading": "V ABSTRACT CONTROL STRUCTURES AS FUNCTIONAL HIERARCHIES",
      "text": [
        "The control structure indicators -- the words IF, THEN, ELSE, the semi-colons, the sequential placement on the page, and so on -- in Figure 6 are ad hoc syntactic devices that really express semantic relationships of functional hierarchy, viz., those shown in Figure 7.",
        "In general, we can identify a control structure with such a functional hierarchy.",
        "For some background discussion relevant to this notion, see Hamilton and Zeldin (1976).",
        "A control structure can be said to be legitimate, if its interfaces are correct, i.e., if the subfunctions do effect the same mappings as the functions they purportedly decompose.",
        "Of the three structures in Figure 8, for example, only (ii) is legitimate, because (i) and (iii) each generates a value of a as a side effect -- a is generated by a subfunction, but not by the overall function --, and b in (i) appears from nowhere -- i.e., as an input to a subfunction, but not as an input to the overall function, or as an output from another subfunction on the same level.",
        "Structure (iii) can be made legitimate by adding a to the output list of its topmost function, as indicated in (25):",
        "This structure represents one sort of parallel process, in which two functions operate independently on the same input variable to generate values for different output variables.",
        "Structure (i) can be made legitimate by adding a to the output list of its topmost function, as in the",
        "case of (iii), and also adding b to that function's input list, as indicated in (26):",
        "This structure represents a different sort of parallel process, in which two functions operate independently on different input variables to generate values for different output variables.",
        "Structure (ii) represents a non-parallel, sequential process in which two functions operate dependently, one generating a value for an output variable that is used by the other as an input variable.",
        "In general, the variables in these structures can be interpreted as really representing lists of variables, just as \"B\" and \"A\" in (4) can be interpreted as representing lists of predicates.",
        "Of these three legitimate structures, then, only (ii) can be seen as occurring in Figure 7.",
        "Figure 4 also contains a different structure (for Select-sets) that combines the features of (25) and (26).",
        "The important point here is that functional hierarchies comprising legitimate control structures are inherent in the systems expressed by workable programs.",
        "As such, they have proven useful both as a verification tool and as a programming tool.",
        "For some discussion of the relationship that ought to exist, ideally, between these two different modes of application, see Hamilton and Zeldin (1979).",
        "Through interaction with those who have written an existing program, one can derive the abstract control structure of the system expressed by the program, make that structure legitimate, and then make the corresponding changes in the original program.",
        "In this way, subtle but substantial errors can be exposed and corrected that might not be readily revealed by more conventional debugging techniques.",
        "Conversely, given a legitimate control structure -- such as the one for quantifier meanings in Figure 4, for example --, the system it comprises can be implemented in any convenient programming language -- essentially, by reversing the process through which we derived Figure 7 from Figure 6, adapted to the relevant language.",
        "For some discussion of software that automates this process, see Cushing (1982b) and Wasserman and Gutz (1982).",
        "For a good description of the vision that motivates the development of this software -- i.e., the ideal situation toward which its development is directed --, see Hamilton and Zeldin (1983).",
        "Our present concerns are primarily theoretical and thus do not require the ultimate perfection of this or any other software.",
        "A number of interesting variants have been proposed to make this notion of control structure applicable to a wider class of programs.",
        "See Martin (1982), for example, for an attempt to integrate it with more traditional data base notions.",
        "Harel (1979) introduces non-determinacy, and Prade and Vaina (1980) attempt to incorporate concepts from the theory of fuzzy sets and systems.",
        "Further development of the latter of these efforts would be of particular interest in our present context, in view of work done by Zadeh (1977), for example, to explicate quantifier and other meanings in terms of fuzzy logic."
      ]
    },
    {
      "heading": "ACKNOWLEDGEMENTS",
      "text": [
        "I would like to thank Fred Barrett, Mitka Golub, and Robert Kuhns for helpful comments on an earlier draft, and Margaret Moore for typing the final manuscript."
      ]
    },
    {
      "heading": "REFERENCES",
      "text": []
    }
  ]
}
