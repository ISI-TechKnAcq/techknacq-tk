{
  "info": {
    "authors": [
      "Suresh Manandhar"
    ],
    "book": "Annual Meeting of the Association for Computational Linguistics",
    "id": "acl-P94-1035",
    "title": "An Attributive Logic of Set Descriptions and Set Operations",
    "url": "https://aclweb.org/anthology/P94-1035",
    "year": 1994
  },
  "references": [
    "acl-J91-2001",
    "acl-J92-2002",
    "acl-P86-1038"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "This paper provides a model theoretic semantics to feature terms augmented with set descriptions.",
        "We provide constraints to specify HPSG style set descriptions, fixed cardinality set descriptions, set-membership constraints, restricted universal role quantifications, set union, intersection, subset and disjointness.",
        "A sound, complete and terminating consistency checking procedure is provided to determine the consistency of any given term in the logic.",
        "It is shown that determining consistency of terms is a NP-complete problem."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "Grammatical formalisms such as HPSG [Pollard and Sag, 1987] [Pollard and Sag, 1992] and LFG [Kaplan and Bresnan, 1982] employ feature descriptions [Kasper and Rounds, 1986] [Smolka, 1992] as the primary means for stating linguistic theories.",
        "However the descriptive machinery employed by these formalisms easily exceed the descriptive machinery available in feature logic [Smolka, 1992].",
        "Furthermore the descriptive machinery employed by both HPSG and LFG is difficult (if not impossible) to state in feature based formalisms such as ALE [Carpenter, 1993], TFS [Zajac, 1992] and CUF [DOrre and Dorna, 1993] which augment feature logic with a type system.",
        "One such expressive device employed both within LFG [Kaplan and Bresnan, 1982] and HPSG but is unavailable in feature logic is that of set descriptions.",
        "Although various researchers have studied set descriptions (with different semantics) [Rounds, 1988] [Pollard and Moshier, 1990] two issues remain unad-dressed.",
        "Firstly there has not been any work on consistency checking techniques for feature terms augmented with set descriptions.",
        "Secondly, for applications within grammatical theories such as the HPSG formalism, set descriptions alone are not enough since descriptions involving set union are also needed.",
        "Thus to adequately address the knowledge representation needs of current linguistic theories one needs to provide set descriptions as well as mechanisms to manipulate these.",
        "In the HPSG grammar formalism [Pollard and Sag, 1987], set descriptions are employed for the modelling of so called semantic indices ([Pollard and Sag, 1987] pp.",
        "104).",
        "The attribute INDS in the example in (1) is a multivalued attribute whose value models a set consisting of (at most) 2 objects.",
        "However multivalued attributes cannot be described within feature logic [Kasper and Rounds, 1986] [Smola, 1992]."
      ]
    },
    {
      "heading": "VAR 1:3 VAR INDS [ RELN naming RELN naming REST NAME sandy REST NAME kim NAMED NAMED ID",
      "text": [
        "A further complication arises since to be able to deal with anaphoric dependencies we think that set memberships will be needed to resolve pronoun dependencies.",
        "Equally, set unions may be called for to incrementally construct discourse referents.",
        "Thus set-valued extension to feature logic is insufficient on its own.",
        "Similarly, set valued subcategorisation frames (see (2)) has been considered as a possibility within the HPSG formalism.",
        "But once set valued subcategorisation frames are employed, a set valued analog of the HPSG subcategorisation principle too is needed.",
        "In section 2 we show that the set valued analog of the sub categorisation principle can be adequately described by employing a disjoint union operation over set descriptions as available within the logic described in this paper."
      ]
    },
    {
      "heading": "2 The logic of Set descriptions",
      "text": [
        "In this section we provide the semantics of feature terms augmented with set descriptions and various constraints over set descriptions.",
        "We assume an alphabet consisting of x, y, z,... E V the set of variables; f, g,... E .F the set of relation symbols; E C the set of constant symbols; A, B, C,... E P the set of primitive concept symbols and a, b,... E At the set of atomic symbols.",
        "Furthermore, we require that",
        "where S,T,Ti, ,T,.",
        "are terms; a is an atom; c is a",
        "The interpretation of relation symbols and atoms is provided by an interpretation I =< U', I> where /1/ is an arbitrary non-empty set and / is an interpretation function that maps :",
        "1. every relation symbol f E to a binary relation 1/ CUI x U1 2. every atom a E At to an element al E 111 Notation: • Let f1(e) denote the set {e' I (e, e') E f} • Let 11(e) f mean [1(e) = I is required to satisfy the following properties 1. if al a2 then af 0 (4 (distinctness) 2. for any atom a E At and for any relation f E .T there",
        "exists no e E 111 such that (a, e) E f1 (atomicity) For a given interpretation I an I-assignment a is a function that maps",
        "1. every variable x E V to an element a(x) E 141 2. every constant c E C to an element a(c) E 111 such that for distinct constants c1, c2 : a(ci) a(c2) 3. every primitive concept C E P to a subset a(C) C Ill such that: • ce(1) = • a(T) /11",
        "The interpretation of terms is provided by a denotation function [[.",
        "]]i'a that given an interpretation I and an I-assignment a maps terms to subsets of /11.",
        "The function Eli,\" is defined as follows : [[x]ii,\" {a(x)}",
        "• 0 if f ((x)) n (a(y)) 0 • ur if f. [(c(x)) n gi (a(y)) = 0",
        "The above definitions fix the syntax and semantics of every term.",
        "Although disjoint union is not a primitive in the logic it can easily be defined by employing set disjointness and set union operations: f : g(x) W h(y) = de f g(x) 0 h(y) n f : g(x)U h(y) Thus disjoint set union is exactly like set union except that it additionally requires the sets denoted by g(x) and h(y) to be disjoint.",
        "The set-valued description of the subcategorisation principle can now be stated as given in example (3).",
        "(3) Subcategorisation Principle",
        "The description in (3) simply states that the subcat value of the H-DTR is the disjoint union of the subcat value of the mother and the values of C-DTRS.",
        "Note that the disjoint union operation is the right operation to be specified to split the set into two disjoint subsets.",
        "Employing just union operation would not work since",
        "it would permit repetition between members of the SUBCAT attribute and C-DTRS attribute.",
        "Alternatively, we can assume that N is the only multivalued relation symbol while both SUBCAT and C-DTRS are single-valued and then employ the intuitively appealing sub categorisation principle given in (4).",
        "(4) Subcategorisation Principle",
        "With the availability of set operations, multivalued structures can be incrementally built.",
        "For instance, by employing union operations, semantic indices can be incrementally constructed and by employing membership constraints on the set of semantic indices pronoun resolution may be carried out.",
        "The set difference operation f : g(y) – h(z) is not available from the constructs described so far.",
        "However, assume that we are given the term x n f : g(y) – h(z) and it is known that 111(a(z)) C (a(y)) for every interpretation I, a such that 1[x n f : g(y) – h(z)]I\" 0.",
        "Then the term x11 f : g(y) – h(z) (assuming the obvious interpretation for the set difference operation) is consistent if the term yn g : f (x) W h(z) is consistent.",
        "This is so since for sets G, F, H:G-F=HAFCG if G = F Eti H. See figure 1 for verification."
      ]
    },
    {
      "heading": "3 Consistency checking",
      "text": [
        "To employ a term language for knowledge representation tasks or in constraint programming languages the minimal operation that needs to be supported is that of consistency checking of terms.",
        "A term T is consistent if there exists an interpretation I and an I-assignment a such that [[T1/,' 0 0.",
        "In order to develop constraint solving algorithms for consistency testing of terms we follow the approaches in [Smollca, 1992] [Hollunder and Nutt, 1990].",
        "A containment constraint is a constraint of the form x = T where x is a variable and T is an term.",
        "In addition, for the purposes of consistency checking we need to introduce disjunctive constraints which are of the form x = xi U U xn.",
        "We say that an interpretation I and an I-assignment a satisfies a constraint K written I, a K",
        "• I, a x = T a(x) E V11°' • /, a x = xi U U a(x) = a(xi) for some : 1 <i < n.",
        "A constraint system C, is a conjunction of constraints.",
        "We say that an interpretation I and an I-assignment a satisfy a constraint system C, if I, a satisfies every constraint in Cs.",
        "The following lemma demonstrates the usefulness of constraint systems for the purposes of consistency checking.",
        "Lemma 1 An term T is consistent if there exists a variable x, an interpretation I and an I-assignment a such that I, a satisfies the constraint system x = T. Now we are ready to turn our attention to constraint solving rules that will allow us to determine the consistency of a given constraint system.",
        "Constraint simplification rules - II (SSetF) x=F:yAx= f: {x1, .. • ,xn} A Cs where F ranges over f ,V f",
        "We say that a constraint system C, is basic if none of the decomposition rules (see figure 2) are applicable to C8.",
        "The purpose of the decomposition rules is to break down a complex constraint into possibly a number of simpler constraints upon which the constraint simplification rules (see figures 3, 4 and 5 ) can apply by possibly introducing new variables.",
        "The first phase of consistency checking of a term T consists of exhaustively applying the decomposition rules to an initial constraint of the form x = T (where x does not occur in T) until no rules are applicable.",
        "This transforms any given constraint system into basic form.",
        "The constraint simplification rules (see figures 3, 4 and 5) either eliminate variable equalities of the form x = y or generate them from existing constraints.",
        "However, they do not introduce new variables.",
        "The constraint simplification rules given in figure 3 are the analog of the feature simplification rules provided in [Smolka, 1991].",
        "The main difference being that our simplification rules have been modified to deal with relation symbols as opposed to just feature symbols.",
        "The constraint simplification rules given in figure 4 simplify constraints involving set descriptions when they interact with other constraints such as feature constraints - rule (SSetF), singleton sets - rule (SSet), duplicate elements in a set - rule (SDup), universally quantified constraint - rule (SForall), another set description - rule (SSetSet).",
        "Rule (SDis) on the other hand simplifies disjunctive constraints.",
        "Amongst all the constraint simplification rules in figures 3 and 4 only rule (SDis) is non-deterministic and creates a nary choice point.",
        "Rules (SSet) and (SDup) are redundant as completeness (see section below) is not affected by these rules.",
        "However these rules result in a simpler normal form.",
        "The following syntactic notion of entailment is employed to render a slightly compact presentation of the constraint solving rules for dealing with set operations given in figure 5.",
        "A constraint system C, syntactically entails the (conjunction of) constraint(s) ck if C, cb is derivable from the following deduction rules:",
        "1.",
        "0 A Cs I2.",
        "C, x = x 3.",
        "C8l-x=y---*C51-y= x 4.",
        "C81-x=yAC51-y=z – 051-x = z 5.",
        "C, x = Cs y = 6.",
        "C3l-x=f:y – >C31-x= 3f:y 7.",
        "C8l-x=f:y – >C51-x=Vf:y 8.",
        "C, F x = f : 1. , .1 – > Cs x = 3f : x,",
        "Note that the above definitions are an incomplete list of deduction rules.",
        "However C, I q implies C, where is the semantic entailment relation defined as for predicate logic.",
        "We write C, 171 0 if it is not the case that Cs I 0.",
        "The constraint simplification rules given in figure 5 deal with constraints involving set operations.",
        "Rule (C) propagates g-values of y into f-values of x in the presence of the constraint x = f :D g(y).",
        "Rule",
        "(ULeft) (correspondingly Rule (URight)) adds the constraint x = f :D g(y) (correspondingly x = f :D h(z)) in the presence of the constraint x = f : g(y) U h(z).",
        "Also in the presence of x = f : g(y)U h(z) rule (UDown) non-deterministically propagates an f-value of x to either an g-value of y or an h-value of z (if neither already holds).",
        "The notation y = 3g : xi I z = 3h : xi denotes a non-deterministic choice between y =- 3g : xi and z = ah : xi.",
        "Rule (nDown) propagates an f-value of x both as a g-value of y and h-value of z in the presence of the constraint x = f : g(y) fl h(z)• Finally, rule (nUp) propagates a common g-value of y and h-value of z as an f-value of x in the presence of the constraint x = f : g(y) 11 h(z)."
      ]
    },
    {
      "heading": "4 Invariance, Completeness and Termination",
      "text": [
        "In this section we establish the main results of this paper - namely that our consistency checking procedure for set descriptions and set operations is invariant, complete and terminating.",
        "In other words, we have a decision procedure for determining the consistency of terms in our extended feature logic.",
        "For the purpose of showing invariance of our rules we distinguish between deterministic and non-deterministic rules.",
        "Amongst all our rules only rule (SDis) given in figure 4 and rule (UDown) are non-deterministic while all the other rules are deterministic.",
        "Theorem 2 (Invariance) 1.",
        "If a decomposition rule transforms C, to C; then C, is consistent if C; is consistent.",
        "2.",
        "Let 1, a be any interpretation, assignment pair and let C, be any constraint system.",
        "• If a deterministic simplification rule transforms C, to C; then: 1, a Cs iff /, a • If a non-deterministic simplification rule applies to C, then there is at least one non-deterministic choice which transforms C, to C; such that: 1,a C, iff 1,a C;",
        "A constraint system Cs is in normal form if no rules are applicable to C,.",
        "Let succ(x, f) denote the set: succ(x, f) = {y I Cs x = 3f : y} A constraint system Cs in normal form contains a clash if there exists a variable x in Cs such that any of the following conditions are satisfied",
        "1.",
        "Cs x = al and Cs x = a2 such that al a2 2.",
        "C, x = ci and Cs x = c2 such that ci c2 3.",
        "C, x = 3 and Cs I x = where S ranges over x,a,c,C.",
        "4.",
        "Cs x = 3f : y and C, x = a 5.",
        "Cs f (x) g(y) and succ(x, f) n succ(y, g) 0 6.",
        "Cs x = f: {x1, ... ,xn}= and I succ(x, n If Cs does not contain a clash then Cs is called clash-free.",
        "The constraint solving process can terminate as soon as a clash-free constraint system in normal form is found or alternatively all the choice points are exhausted.",
        "The purpose of the clash definition is highlighted in the completeness theorem given below.",
        "For a constraint system C, in normal form an equivalence relation c on variables occurring in Cs is defined as follows:",
        "For a variable x we represent its equivalence class by [x].",
        "Theorem 3 (Completeness) A constraint system C, in normal form is consistent if C, is clash-free.",
        "Proof Sketch: For the first part, let Cs be a constraint system containing a clash then it is clear from the definition of clash that there is no interpretation 1 and I-assignment a which satisfies Cs.",
        "Let Cs be a clash-free constraint system in normal form.",
        "We shall construct an interpretation R. =< UR, .R >",
        "and a variable assignment a such that 7?., C,.",
        "Let UR = V Li At C. The assignment function a is defined as follows:",
        "1.",
        "For every variable x in V (a) if Ca x = a then a(x) = a (b) if the previous condition does not apply then a(x) = choose([x]) where choose([x]) denotes a unique representative (chosen arbitrarily) from the equivalence class [x].",
        "2.",
        "For every constant c in C: (a) if C, x = c then a(c) = a(x) (b) if c is a constant such that the previous condition does not apply then a(c) = c 3.",
        "For every primitive concept C in 2:",
        "The interpretation function .R is defined as follows:",
        "• fR(x) = succ(x, f) • aR = a",
        "It can be shown by a case by case analysis that for every constraint K in Ca: 7Z, a K. Hence we have the theorem.",
        "Theorem 4 (Termination) The consistency checking procedure terminates in a finite number of steps.",
        "Proof Sketch: Termination is obvious if we observe the following properties: 1.",
        "Since decomposition rules breakdown terms into smaller ones these rules must terminate.",
        "2.",
        "None of the simplification rules introduce new variables and hence there is an upper bound on the number of variables.",
        "3.",
        "Every simplification rule does either of the following: (a) reduces the 'effective' number of variables.",
        "A variable x is considered to be ineffective if it occurs only once in C, within the constraint x = y such that rule (SEquals) does not apply.",
        "A variable that is not ineffective is considered to be effective.",
        "(b) adds a constraint of the form x = C where C ranges over y, a, c, C, , – C which means there is an upper bound on the number of constraints of the form x = C that the simplification rules can add.",
        "This is so since the number of variables, atoms, constants and primitive concepts are bounded for every constraint system in basic form.",
        "increases the size of succ(x, f).",
        "But the size of succ(x, f) is bounded by the number of variables in C, which remains constant during the application of the simplification rules.",
        "Hence our constraint solving rules cannot indefinitely increase the size of succ(x, f)."
      ]
    },
    {
      "heading": "5 NP-completeness",
      "text": [
        "In this section, we show that consistency checking of terms within the logic described in this paper is NP-complete.",
        "This result holds even if the terms involving set operations are excluded.",
        "We prove this result by providing a polynomial time translation of the well-known NP-complete problem of determining the satisfiability of propositional formulas [Garey and Johnson, 1979].",
        "Theorem 5 (NP-Completeness) Determining consistency of terms is NP-Complete.",
        "Proof: Let 0 be any given propositional formula for which consistency is to be determined.",
        "We split our translation into two intuitive parts : truth assignment denoted by A(0) and evaluation denoted by r(0).",
        "Let a, b,.",
        ".",
        ".",
        "be the set of propositional variables occurring in 0.",
        "We translate every propositional variable a by a variable xa in our logic.",
        "Let f be some relation symbol.",
        "Let true, false be two atoms.",
        "Furthermore, let xl, x2, ... be a finite set of variables distinct from the ones introduced above.",
        "We define the translation function A(0) by:",
        "The above description forces each of the variable xa,1b,... and each of the variables xl, x2, .",
        "to be either equivalent to true or false.",
        "We define the evaluation function 7-(0) by:",
        "where Xi E {Xi, 12, ...} is a new variable = xi rI 2f: (r(S)n where xi E {X1,12, ...} is a new variable Intuitively speaking T can be understood as follows.",
        "Evaluation of a propositional variable is just its value; evaluating a conjunction amounts to evaluating each of the conjuncts; evaluating a disjunction amounts to evaluating either of the disjuncts and finally evaluating a negation involves choosing something other than the value of the term.",
        "Determining satisfiability of 0 then amounts to determining the consistency of the following term:",
        "Note that the term true n r(0) forces the value of -7-(0) to be true.",
        "This translation demonstrates that determining consistency of terms is NP-hard.",
        "On the other hand, every deterministic completion of our constraint solving rules terminate in polynomial time since they do not generate new variables and the number of new constraints are polynomially bounded.",
        "This means determining consistency of terms is NP-easy.",
        "Hence, we conclude that determining consistency of terms is NP-complete."
      ]
    },
    {
      "heading": "6 Translation to Schiinfinkel-Bernays",
      "text": [
        "class The SchOnfinkel-Bernays class (see [Lewis, 1980]) consists of function-free first-order formulae which have",
        "(c)",
        "the form: 3x1• xThVy1 ymd In this section we show that the attributive logic developed in this paper can be encoded within the SchOnfinkel-Bernays subclass of first-order formulae by extending the approach developed in [Johnson, 1991].",
        "However formulae such as V f: (3 f: (V f : T)) which involve an embedded existential quantification cannot be translated into the Schi5nfinkel-Bernays class.",
        "This means that an unrestricted variant of our logic which does not restrict the universal role quantification cannot be expressed within the SchOnfinkel-Bernays class.",
        "In order to put things more concretely, we provide a translation of every construct in our logic into the SchOnfinkel-Bernays class.",
        "Let T be any extended feature term.",
        "Let x be a variable free in T. Then T is consistent if the formula (x = T)6 is consistent where 5 is a translation function from our extended feature logic into the SchOnfinkel-Bernays class.",
        "Here we provide only the essential definitions of 6:",
        "• (x = a)8 = x = a • (x = -,a)6 = x a • (x f : T)6 =",
        "where y is a new variable",
        "• (x = 3f : T)6 = f (x, y) & (y = T)6",
        "where y is a new variable",
        "• (x = Vf : a)8 = Vy(f (x, y) – > y = a) • (x = Vf : -,a)6 = Vy(f (x, y) ---+ y a) • (x = f : ,Tri})6 =",
        "where x1,.. , xi, are new variables",
        "• (x f : g(y) U h(z))5 =",
        "• (x = f : (y) g(z))6 = Vyiz ( (y , yi) & g(z, Zi) 4 yi zi) • (x = S T)6 = (x = s)6 (x",
        "These translation rules essentially mimic the decomposition rules given in figure 2.",
        "Furthermore for every atom a and every feature f in T we need the following axiom:",
        "• Vax(--, f (a, x)) For every distinct atoms a, b in T we need the axiom: • a b",
        "Taking into account the NP-completeness result established earlier this translation identifies a NP-complete subclass of formulae within the SchOnfinkel-Bernays class which is suited for NL applications."
      ]
    },
    {
      "heading": "7 Related Work",
      "text": [
        "Feature logics and concept languages such as KL-ONE are closely related family of languages [Nebel and Smolka, 1991].",
        "The principal difference being that feature logics interpret attributive labels as functional binary relations while concept languages interpret them as just binary relations.",
        "However the integration of concept languages with feature logics has been problematic due to the fact the while path equations do not lead to increased computational complexity in feature logic the addition of role-value-maps (which are the relational analog of path equations) in concept languages causes undecidability [Schmidt-Schau13, 1989].",
        "This blocks a straightforward integration of a variable-free concept language such as ALC [Schmidt-Schaui3 and Smolka, 1991] with a variable-free feature logic [Smolka, 1991].",
        "In [Manandhar, 1993] the addition of variables, feature symbols and set descriptions to ALC is investigated providing an alternative method for integrating concept languages and feature logics.",
        "It is shown that set descriptions can be translated into the so called \"number restrictions\" available within concept languages such as BACK [von Luck et al., 1987].",
        "However, the propositionally complete languages ALV and ALS investigated in [Manandhar, 1993] are PSPACE-hard languages which do not support set operations.",
        "The work described in this paper describes yet another unexplored dimension for concept languages - that of a restricted concept language with variables, feature symbols, set descriptions and set operations for which the consistency checking problem is within the complexity class NP."
      ]
    },
    {
      "heading": "8 Summary and Conclusions",
      "text": [
        "In this paper we have provided an extended feature logic (excluding disjunctions and negations) with a range of constraints involving set descriptions.",
        "These constraints are set descriptions, fixed cardinality set descriptions, set-membership constraints, restricted universal role quantifications, set union, set intersection, subset and disjointness.",
        "We have given a model theoretic semantics to our extended logic which shows that a simple and elegant formalisation of set descriptions is possible if we add relational attributes to our logic as opposed to just functional attributes available in feature logic.",
        "For realistic implementation of the logic described in this paper, further investigation is needed to develop concrete algorithms that are reasonably efficient in the average case.",
        "The consistency checking procedure described in this paper abstracts away from algorithmic considerations and clearly modest improvements to the basic algorithm suggested in this paper are feasible.",
        "However, a report on such improvements is beyond the scope of this paper.",
        "For applications within constraint based grammar formalisms such as HPSG, minimally a type system [Carpenter, 1992] and/or a Hornlike extension [HOlifeld and Smolka, 1988] will be necessary.",
        "We believe that the logic described in this paper provides both a better picture of the formal aspects of",
        "current constraint based grammar formalisms which employ set descriptions and at the same time gives a basis for building knowledge representation tools in order to support grammar development within these formalisms."
      ]
    },
    {
      "heading": "9 Acknowledgments",
      "text": [
        "The work described here has been carried out as part of the EC-funded project LRE-61-061 RGR (Reusa-bility of Grammatical Resources).",
        "A longer version of the paper is available in [Erbach et al., 1993].",
        "The work described is a further development of the author's PhD thesis carried out at the Department of Artificial Intelligence, University of Edinburgh.",
        "I thank my supervisors Chris Mellish and Alan Smaill for their guidance.",
        "I have also benefited from comments by an anonymous reviewer and discussions with Chris Brew, Bob Carpenter, Jochen DOrre and Herbert Ruessink.",
        "The Human Communication Research Centre (HCRC) is supported by the Economic and Social Research Council (UK)."
      ]
    }
  ]
}
