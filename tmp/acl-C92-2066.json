{
  "info": {
    "authors": [
      "Yves Schabes"
    ],
    "book": "International Conference on Computational Linguistics",
    "id": "acl-C92-2066",
    "title": "Stochastic Lexicalized Tree-Adjoining Grammars",
    "url": "https://aclweb.org/anthology/C92-2066",
    "year": 1992
  },
  "references": [
    "acl-C88-2121",
    "acl-H90-1021",
    "acl-P92-1017"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "The notion of stochastic lexicalized tree-adjoining grammar (SLTAG) is formally defined.",
        "The parameters of a SLTAG correspond to the probability of combining two structures each one associated with a word.",
        "The characteristics of SLTAG are unique and novel since it is lexically sensitive (as N-gram models or Hidden Markov Models) and yet hierarchical (as stochastic context-free grammars).",
        "Then, two basic algorithms for SLTAG arc introduced: an algorithm for computing the probability of a sentence generated by a SLTAG and an inside-outside-like iterative algorithm for estimating the parameters of a SLTAG given a training corpus.",
        "Finally, we should how SLTAG enables to define a lexicalized version of stochastic context-free grammars and we report preliminary experiments showing some of the advantages of SLTAG over stochastic context-free grammars."
      ]
    },
    {
      "heading": "1 Motivations",
      "text": [
        "Although stochastic techniques applied to syntax modeling have recently regained popularity, current language models suffer from obvious inherent inadequacies.",
        "Early proposals such as Markov Models, N-gram models (Pratt, 1942; Shannon, 1948; Shannon, 1951) and Hidden Markov Models were very quickly shown to be linguistically not appropriate for natural language (e.g. Chomsky (1964, pages 13-18)) since they are unable to capture long distance dependencies or to describe hierarchically the syntax of natural languages.",
        "Stochastic context-free grammar (Booth, 1969) is a hierarchical model more appropriate for natural languages, however none of such proposals (Lafi and Young, 1990; Jelinek, Lafferty, and Mercer, 1990) perform as well as the simpler Markov Models because of the difficulty of capturing lexical information.",
        "The parameters of a stochastic context-free grammar do not correspond directly to a distribution over words since distributional phenomena over words that are embodied by the application of `This work was partially supported by DARPA Grant NO01490-31863, ARO Grant DAAL03-89-C-0031 and NSF Grant 111190- 16592.",
        "We thank Aravind Joshi for suggesting the use of TAGs for statistical analysis during a private discussion that followed a presentation by Fred Jelinek during the June 1990 meeting of the DARPA Speech and Natural Language Workshop.",
        "We are Faso grateful to Peter Braun, Fred Jelinek, Mark Liberman, Mitch Marcus, Robert Mercer, Fernando Pereira and Stuart Shieber for providing valuable comments.",
        "more than one context-free rule cannot be captured under the context-freeness assumption.",
        "This leads to the difficulty of maintaining a standard hierarchical model while capturing lexical dependencies.",
        "This fact prompted researchers in natural language processing to give up hierarchical language models in the favor of non-hierarchical statistical models over words (such as word N-grams models).",
        "Probably for lack of a better language model, it has also been argued that the phenomena that such devices cannot capture occur relatively infrequently.",
        "Such argumentation is linguistically not sound.",
        "Lexicalized tree-adjoining grammars (LTAG)1 combine hierarchical structures while being lexically sensitive and are therefore more appropriate for statistical analysis of language.",
        "In fact, LTAGs are the simplest hierarchical formalism which can serve as the basis for lexicalizing context-free grammar (Schabes, 1990; Joshi and Schabes, 1991).",
        "LTAG is a tree-rewriting system that combines trees of large domain with adjoining and substitution.",
        "The trees found in a TAG take advantage of the available extended domain of locality by localizing syntactic dependencies (such as filler-gap, subject-verb, verb-object) and most semantic dependencies (such as predicate-argument relationship).",
        "For example, the following trees can be found in a LTAG lexicon:"
      ]
    },
    {
      "heading": "A",
      "text": []
    },
    {
      "heading": "NPJ, VP VP",
      "text": [
        "A /7\\"
      ]
    },
    {
      "heading": "NP NP VP` ADV",
      "text": []
    },
    {
      "heading": "eats John peanuts hungrily",
      "text": [
        "Since the elementary trees of a LTAG are minimal syntactic and semantic units, distributional analysis of the combination of these elementary trees based on a training corpus will inform us about relevant statistical aspects of the language such as the classes of words appearing as arguments of a predicative element, the distribution of the adverbs licensed by a specific verb, or the adjectives licensed by a specific noun.",
        "This kind of statistical analysis as independently suggested in (Resnik, 1991) can be made with LTAGs because of their extended domain of locality but also because of their lexicalized property.",
        "1We assume familiarity throughout the paper with TAGs and its lexicalized variant.",
        "See, for instance, (Joshi, 1987), (Schabes, Abeille, and Joshi, 1988), (Schabes, 1990) or (Joshi and Schabes, 1991).",
        "In this paper, this intuition is made formally precise by defining the notion of a stochastic lexicalized tree-adjoining grammar (SLTAG).",
        "We present an algorithm for computing the probability of a sentence generated by a SLTAG, and finally we introduce an iterative algorithm for estimating the parameters of a SLTAG given a training corpus of text.",
        "This algorithm can either be used for refining the parameters of a SLTAG or for inferring a tree-adjoining grammar from a training corpus.",
        "We also report preliminary experiments with this algorithm.",
        "Due to the lack of space, in this paper the algorithms are described succinctly without proofs of correctness and more attention is given to the concepts and techniques used for SLTAG."
      ]
    },
    {
      "heading": "2 SLTAG",
      "text": [
        "Informally speaking, SLTAGs are defined by assigning a probability to the event that an elementary tree is combined (by adjunction or substitution) on a specific node of another elementary tree.",
        "These events of combination are the stochastic processes considered.",
        "Since SLTAG are defined on the basis of the derivation and since TAG allows for a notion of derivation independent from the trees that are derived, a precise mathematical definition of the SLTAG derivation must he given.",
        "For this purpose, we use stochastic linear indexed grammars (SLIG) to formally express SLTAGs derivations.",
        "Linear Indexed grammar (LIG) (Aho, 1968; Gazdar, 1985) is a rewriting system in which the non-terminal symbols are augmented with a stack.",
        "In addition to rewriting non-terminals, the rules of the grammar can have the effect of pushing or popping symbols on top of the stacks that are associated with each non-terminal symbol.",
        "A specific rule is triggered by the non-terminal on the left hand side of the rule and the top element of its associated stack.",
        "The productions of a LIG are restricted to copy the stack corresponding to the non-terminal being rewritten to at most one stack associated with a non-terminal symbol on the right hand side of the production.2 In the following, [..p] refers to a possibly unbounded stack whose top element is p and whose remaining part is schematically written as `••'.",
        "[8] represents a stack whose only element is the bottom of the stack.",
        "While it is possible to define SLIGs in general, we define them for the particular case where the rules are binary branching and where the left hand sides are always incomparable.",
        "A stochastic linear indexed grammar, G, is denoted by (VN ,VT ,171,S, Prod), where VN is a finite set of nonterminal symbols; VT is a finite set of terminal symbols; V1 is a finite set of stack symbols; S E VN is the start symbol; Prod is a finite set of productions of the form:",
        "where Xk c 14,, a e VT and po E PI,P2 E Vt; P, a probability distribution which assigns a probability, 0 < P(X[-x]--■ A) < 1, to a rule, X[-x].--, A E Prod such 21AGs have been shown to be weakly equivalent to Tree-Adjoining Grammars (Vijay-Shanker, 1987).",
        "that the sum of the probabilities of all the rules that can be applied to any non-terminal annotated with a stack is equal to one.",
        "More precisely if, VX E VN , VP E EP(X[..pl A) 1 P(X[..p] A) should be interpreted as the probability that X[••p] is rewritten as A.",
        "A derivation starts from S associated with the empty stack (S[$]) and each level of the derivation must be validated by a production rule.",
        "The language of a SLIG is defined as follows: L = {w E VT I S[$] The probability of a derivation is defined as the product of the probabilities of all individual rules involved (counting repetition) in the derivation, the derivation being validated by a correct configuration of the stack at each level.",
        "The probability of a sentence is then computed as the sum of the probabilities of all derivations of the sentence.",
        "Following the construction described in (Vijay-Shanker and Weir, 1991), given a LTAG, Gtag, we construct an equivalent LIG, G,119.",
        "The constructed LIG generates the same language as G155 and each derivation of Gt., corresponds to a unique LIG derivation corresponds to a unique derivation in G,119 (and conversely).",
        "In addition, a probability is assigned to each production of the LIG.",
        "For simplicity of explanation and without loss of generality we assume that each node in an elementary tree in G109 is either a leaf node (i.e. either a foot node or a non-empty terminal node) or binary branching.",
        "The construction of the equivalent SLIG follows.",
        "The non-terminal symbols of G.H5 are the two symbols 'top' (t) and 'bottom' (8), the set of terminal symbols is the same as the one of G,09, the set of stack symbols is the set of nodes (not node labels) found in the elementary trees of Gwg augmented with the bottom of the stack (8), and the start symbol is 'top' (t).",
        "For all root nodes no of an initial tree whose root is labeled by 5, the following starting rules are added:",
        "These rules state that a derivation must start from the top of the root node of some initial tree.",
        "P is the probability that a derivation starts from the initial tree associated with a lexical item and rooted by go.",
        "Then, for all node ri in an elementary tree, the following rules are generated.",
        "• If 502 are the 2 children of a node n such that 92 is on the spine (i.e. subsumes the foot node), include: [•n] (2) Since (2) encodes an immediate domination link defined by the tree-adjoining grammar, its associated probability is one.",
        "• Similarly, if nin2 are the 2 children of a node n such that ni is on the spine (i.e. subsumes the foot node), include:",
        "Since (3) encodes an immediate domination link defined by the tree-adjoining grammar, its associated probability is one.",
        "'The algorithms explained in this paper can be generalized to lexicalized tree-adjoining granunars that need not be in Chornsky Normal Form using techniques similar the one found in (Sdiabes, 1991).",
        "• If 6162 are the 2 children of a node y such that none of them is on the spine, include:",
        "Since (4) also encodes an immediate domination link defined by the tree-adjoining grammar, its associated probability is one.",
        "• If n is a node labeled by a non-terminal symbol and if it does not have an obligatory adjoining constraint, then we need to consider the case that adjunction might not take place.",
        "In this case, include:",
        "The probability of rule (5) corresponds to the probability that no adjunction takes place at node",
        "• If ri is an node on which the auxiliary tree r3 can be adjoined, the adjunction of /3 can be predicted, therefore (assuming that 6,. is the root node of /3) include:",
        "The probability of rule (6) corresponds to the probability of adjoining the auxiliary tree whose root node is 'b., say (3, on the node y belonging to some elementary tree, say a.4",
        "• If rif is the foot node of an auxiliary tree fl that has been adjoined, then the derivation of the node below 9„, must resume.",
        "In this case, include:",
        "The above stochastic production is included with probability one since the decision of adjunction has already been made in rules of the form (6).",
        "• Finally, if n, is the root node of an initial tree that can be substituted on a node marked for substitution y, include:",
        "t[$y] t[$6i] (8) Here, p is the probability that the initial tree rooted by yl is substituted at node n. It corresponds to the probability of substituting the lexicalized initial tree whose root node is ni, say 6, at the node y of a lexicalized elementary tree, say a.",
        "The SLIG constructed as above is well defined if the following equalities hold for all nodes 11:",
        "4Since the grammar is lexicalized, both trees a and a are associated with lexical kerns, and the site node for adjunction n corresponds to some syntactic modification.",
        "Such rule encapsulates S modifiers (e.g. sentential adverbs as in \"apparently John left\"), VP modifiers (e.g. verb phrase adverbs as in \"John left sirup-ay)\", NP modifiers (e.g. relative clauses as in \"The man wise left was happy\"), N modifiers (e.g. adjectives as in \"pretty woman\"), or even sentential complements (e.g. John thinks that Harry is sick).",
        "5 Among other cases, the probability of this rule corresponds to the probability of filling some argument position by a lexicalized tree.",
        "It will encapsulate the distribution for selectional restriction since the position of substitution is taken into account.",
        "A grammar satisfying (12) is called consistent.'",
        "Beside the distributional phenomena that we mentioned earlier, SLTAG also captures the effect of adjoining constraints (selective, obligatory or null adjoining) which are required for tree-adjoining grammar.'"
      ]
    },
    {
      "heading": "3 Algorithm for Computing the",
      "text": []
    },
    {
      "heading": "Probability of a Sentence",
      "text": [
        "We now define an bottom-up algorithm for SLTAG which computes the probability of an input string.",
        "The algorithm is an extension of the CKY-type parser for tree-adjoining grammar (Vijay-Shanker, 1987).",
        "The extended algorithm parses all spans of the input string and also computes their probability in a bottom-up fashion.",
        "Since the string on the frontier of an auxiliary is broken up into two substrings by the foot node, for the purpose of computing the probability of the sentence, we will consider the probability that a node derives two substrings of the input string.",
        "This entity will be called the inside probability.",
        "Its exact definition is given below.",
        "We will refer to the subsequence of the input string w = al • • • aN from position i to j, di.",
        "It is defined as follows: ucj de!",
        "ai+i • • • of , if i < j",
        "Given a string w = a1 • • • 'ajNf ia>ndi a SLTAG rewritten as in (1-8) the inside probability, I°(pos, i, j, k, 1), is defined for all nodes y contained in an elementary tree a and for pos E ft, b), and for all indices 0 < i < j < k<l<Nas follows: (i) If the node y does not subsume the foot node of a (if there is one), then j and k are unbound and: P(pos[Sin w!)",
        "(ii) If the node t/ subsumes the foot node yi of a, then:",
        "In (ii), only the top element of the stack matters since as a consequence of the construction of the SLIG, we have that if pos[St] .",
        "witOrjf)wik then for all string 7 E Vt we also have pos[$-yy] id; b[Sy6f]wi.8 Initially, all inside probabilities are set to zero.",
        "Then, the computation goes bottom-up starting from the productions introducing lexical items: if y is a node such that b[$y] -•-■ a, then:",
        "Then, the inside probabilities of larger substrings are computed bottom-up relying on the recurrence equations stated in Appendix A.",
        "This computation takes in the worst case 0(KVN6)-time and 0(IGIN4)-space for a sentence of length N. Once the inside probabilities computed, we obtain the probability of the sentence as follows: P(w)d. P(t[S] to) = (t,$, 0, – , – , I w) (14) We now consider the problem of re-estimating a SLTAG."
      ]
    },
    {
      "heading": "4 Inside-Ouside Algorithm for",
      "text": []
    },
    {
      "heading": "Reestimating a SLTAG",
      "text": [
        "Given a set of positive example sentences, W {tut • • • wx), we would like to compute the probability of each rule of a given SLTAG in order to maximize the probability that the corpus were generated by this SLTAG.",
        "An algorithm solving this problem can be used in two different ways.",
        "The first use is as a reestimation algorithm.",
        "In this approach, the input SLTAG derives structures that are reasonable according to some criteria (such as a linguistic theory and some a priori knowledge of the corpus) and the intended use of the algorithm is to refine the probability of each rule.",
        "The second use is as a learning algorithm.",
        "At the first iteration, a SLTAG which generates all possible structures over a given set of nodes and terminal symbols is used.",
        "Initially the probability of each rule is randomly assigned and then the algorithm will re-estimate these probabilities.",
        "Informally speaking, given a first estimate of the parameters of a SLTAG, the algorithm re-estimates these parameters on the basis of the parses of each sentence in a training corpus obtained by a CKY-type parser.",
        "The algorithm is designed to derive a new estimate after each iteration such that the probability of the corpus is increased or equivalently such that the cross entropy estimate (negative log probability) is decreased:",
        "In order to derive a new estimate, the algorithm needs to compute for all sentences in W the inside probabilities and the outside probabilities.",
        "Given a string w = al • • • aN, the outside probability, Ow (pos, q, i, j, k, l), is defined for all nodes q contained in an elementary tree a and for pos E ft, b), and for all indices 0 <i<j<k<I<Nas follows:",
        "(i) If the node q does not subsume the foot node of a (if there is one), then j and k are unbound and:",
        "(ii) If the node ri does subsume the foot node rif of a then:",
        "Once the inside probabilities computed, the outside"
      ]
    },
    {
      "heading": "AcrEs DE COLING-92, NAIVTES, 23-28 aotir 1992",
      "text": [
        "probabilities can be computed top-down by considering smaller spans of the input string starting with 0° (t,$, 0, N) 1 (by definition).",
        "This is done by computing the recurrence equations stated in Appendix B.",
        "In the following, we assume that n subsumes the foot node rif within a same elementary tree, and also that qt subsumes the foot node ni, (within a same elementary tree).",
        "The other cases are handled similarly.",
        "Table 1 shows the reestimation formulae for the adjoining rules (16) and the null adjoining rules (17).",
        "(16) corresponds to the average number of time that the rule tf•-ryl – + 1[••nol is used, and (17) to the average number of times no adjunction occurred on 9.",
        "The denominators of (16) and of (17) estimate the average number of times that a derivation involves the expansion of 1[..71].",
        "The numerator of (16) estimates the average number of times that a derivation involves the rule t [11] – r t•np].",
        "Therefore, for example, (16) estimates the probability of using the rule t[-n] I[••tpp].",
        "The algorithm reiterates until II (W,G) is unchanged (within some epsilon) between two iterations.",
        "Each iteration of the algorithm requires at most 0(I00)-time for each sentence of length N."
      ]
    },
    {
      "heading": "5 Grammar Inference with SLTAG",
      "text": [
        "The reestimation algorithm explained in Section 4 can be used both to reestimate the parameters for a SLTAG derived by some other mean or to infer a grammar from scratch.",
        "In the following, we investigate grammar Inference from scratch.",
        "The initial grammar for the reestimation algorithm consists of all SLIG rules for the trees in Lexicalized Normal Form (in short LNF) over a given set E {ail] < i < T} of terminal symbols, with suitably assigned non zero probability:9",
        "(M. ) Sr' (3o') SS' s°1 (0°' ) The above normal form is capable not only to derive any lexicalized tree-adjoining language, but also to impose any binary bracketing over the strings of the language.",
        "The latter property is important as we would like to be able to use bracketing information in the input corpus as in (Pereira and Schabes, 1992).",
        "The worst case complexity of the reestimation algorithm given in Section 4 with respect to the length of the input string (0(10)) makes this approach in general impractical for LNF grammars.",
        "However, if only trees of the form /3i\" and a;'' (or only of the form fl,?.",
        "and 4.",
        "), the language generated is a context-free language and can be handled more efficiently by the reestimation algorithm.",
        "9Adjoining constraints can be used in this normal form.",
        "They will be reflected in the SLIG equivalent grammar.",
        "Indices have been added on S nodes in order to he able to uniquely refer to each node in the grammar.",
        "It can be shown that if, only trees of the form N' and a'.",
        "are considered, the reestimation algorithm requires in the worst case O(N3)-time.'° The system consisting of trees of the form /3?' and a°■ can be seen as a stochastic lexicalized context-free grammars since it generates exactly context-free languages while being lexically sensitive.",
        "In the following, due to the lack of space, we report only few experiments on grammar inference using these restricted forms of SLTAG and the reestimation algorithm given in Section 4.",
        "We compare the results of the TAG inside-outside algorithm with the results of the inside-outside algorithm for context-free grammars (Baker, 1979).",
        "These preliminary experiments suggest that SLTAG achieves faster convergence (and also to a better solution) than stochastic context-free grammars."
      ]
    },
    {
      "heading": "5.1 Inferring the Language {anb\"In 0}",
      "text": [
        "We consider first an artificial language.",
        "The training corpus consists of 100 sentences in the language L = fanbln > 0) randomly generated by a stochastic context-free grammar.",
        "The initial grammar consists of the trees N, fit , a° and Cx6 with random probability of adjoining and null adjoining.",
        "The inferred grammar models correctly the language L. Its rules of the form (1), (5) or (6) with high probability follow (any excluded rule of the same form has probability at least 10-33 times lower than the rules given below).",
        "The structural rules of the form (2), (3), (4) or (7) are not shown since their probability always remain 1.",
        "In the above grammar, a node Skin a tree a° or A' associated with the symbol a is referred as and a node Skin a tree associated with b as nt.",
        "We also conducted a similar experiment with the inside-outside algorithm for context-free grammar (Baker, 1979), starting with all possible Chomsky Normal Form rules over 4 non-terminals and the set of terminal symbols {a, 8) (72 rules).",
        "The inferred grammar does not quite correctly model the language L. Furthermore, the algorithm does not converge as fast as in the case of SLTAG (See Figure 1)."
      ]
    },
    {
      "heading": "5.2 Experiments on the ATIS Corpus",
      "text": [
        "We consider the part-of-speech sequences of the spoken-language transcriptions in the Texas Instruments sub",
        "set of the Air Travel Information System (ATIS) corpus (Hemphill, Godfrey, and Doddington, 1990).",
        "This corpus is of interest since it has been used for inferring stochastic context-free grammars from partially bracketed corpora (Pereira and Schabes, 1992).",
        "We use the data given by Pereira and Schabes (1992) on raw text and compare with an inferred SLTAG.",
        "The initial grammar consists of all trees (96) of the form [3, a° for all 48 terminal symbols for part-of-speech.",
        "As shown in Figure 2, the grammar converges very rapidly to a lower value of the log probability than the stochastic context-free grammar reported by Pereira and Schabes (1992)."
      ]
    },
    {
      "heading": "6 Conclusion",
      "text": [
        "A novel statistical language model and fundamental algorithms for this model have been presented.",
        "SLTAGs provide a stochastic model both hierarchical and sensitive to lexical information.",
        "They combine the advantages of purely lexical models such as N-gram distributions or Hidden Markov Models and the one of hierarchical modes as stochastic context-free grammars without their inherent limitations.",
        "The parameters of a SLTAG correspond to the probability of combining two structures each one associated with a word and therefore capture linguistically relevant distributions over words.",
        "An algorithm for computing the probability of a sentence generated by a SLTAG was presented as well as an iterative algorithm for estimating the parameters of a SLTAG given a training corpus of raw text.",
        "Similarly to its context-free counterpart, the reestimation algorithm can be extended to handle partially parsed corpora (Pereira and Schabes, 1992).",
        "Preliminary experiments with a context-free subset of SLTAG confirms that SLTAG enables faster convergence than stochastic context-free grammars (SCFG).",
        "This is the case since SCFG are unable to represent lexical influences on distribution except by a statistically and computationally impractical proliferation of nonterminal symbols, whereas SLTAG allows for a lexically sensitive distributional analysis while maintaining a hierarchical structure.",
        "Furthermore, the techniques explained in this paper apply to other grammatical formalisms such as combi-natory categorial grammars and modified head grammars since they have been proven to be equivalent to tree-adjoining grammars and linear indexed grammars (Joshi, Vijay-Shanker, and Weir, 1991).",
        "Due to the lack of space, only few experiments with SLTAG were reported.",
        "A full version of the paper will be available by the time of the meeting and more experimental details will be reported during the presentation of the paper.",
        "In collaboration with Aravind Joshi, Fernando Pereira and Stuart Shieber, we are currently investigating additional algorithms and applications for SLTAG, methods for lexical clustering and automatic construction of a SLTAG from a large training corpus."
      ]
    }
  ]
}
