{
  "info": {
    "authors": [
      "Kenneth Heafield",
      "Ivan Pouzyrevsky",
      "Jonathan H. Clark",
      "Philipp Koehn"
    ],
    "book": "ACL",
    "id": "acl-P13-2121",
    "title": "Scalable Modified Kneser-Ney Language Model Estimation",
    "url": "https://aclweb.org/anthology/P13-2121",
    "year": 2013
  },
  "references": [
    "acl-D07-1090",
    "acl-D10-1026",
    "acl-D11-1125",
    "acl-D12-1107",
    "acl-N12-1047",
    "acl-P02-1040",
    "acl-P07-1065",
    "acl-P07-2045",
    "acl-W11-2123",
    "acl-W12-3102",
    "acl-W13-2212"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "We present an efficient algorithm to estimate large modified Kneser-Ney models including interpolation.",
        "Streaming and sorting enables the algorithm to scale to much larger models by using a fixed amount of RAM and variable amount of disk.",
        "Using one machine with 140 GB RAM for 2.8 days, we built an unpruned model on 126 billion tokens.",
        "Machine translation experiments with this model show improvement of 0.8 BLEU point over constrained systems for the 2013 Workshop on Machine Translation task in three language pairs.",
        "Our algorithm is also faster for small models: we estimated a model on 302 million tokens using 7.7% of the RAM and 14.0% of the wall time taken by SRILM.",
        "The code is open source as part of KenLM."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "Relatively low perplexity has made modified Kneser-Ney smoothing (Kneser and Ney, 1995; Chen and Goodman, 1998) a popular choice for language modeling.",
        "However, existing estimation methods require either large amounts of RAM (Stolcke, 2002) or machines (Brants et al., 2007).",
        "As a result, practitioners have chosen to use less data (Callison-Burch et al., 2012) or simpler smoothing methods (Brants et al., 2007).",
        "Backoff-smoothed n-gram language models (Katz, 1987) assign probability to a word wn in context wn?11 according to the recursive equation",
        "The task is to estimate probability p and backoff b from text for each seen entry wn1 .",
        "This paper",
        "over the network when only one is required.",
        "Arrows denote copies over the network (i.e. to and from a distributed filesystem).",
        "Both options use local disk within each reducer for merge sort.",
        "contributes an efficient multi-pass streaming algorithm using disk and a user-specified amount of"
      ]
    },
    {
      "heading": "RAM. 2 Related Work",
      "text": [
        "Brants et al. (2007) showed how to estimate Kneser-Ney models with a series of five MapRe-duces (Dean and Ghemawat, 2004).",
        "On 31 billion words, estimation took 400 machines for two days.",
        "Recently, Google estimated a pruned Kneser-Ney model on 230 billion words (Chelba and Schalk-wyk, 2013), though no cost was provided.",
        "Each MapReduce consists of one layer of mappers and an optional layer of reducers.",
        "Mappers read from a network filesystem, perform optional processing, and route data to reducers.",
        "Reducers process input and write to a network filesystem.",
        "Ideally, reducers would send data directly to another layer of reducers, but this is not supported.",
        "Their workaround, a series of MapReduces, performs unnecessary copies over the network (Figure 1).",
        "In both cases, reducers use local disk.",
        "Writing and reading from the distributed filesystem improves fault tolerance.",
        "However, the same level of fault tolerance could be achieved by checkpointing to the network filesystem then only reading in the case of failures.",
        "Doing so would enable reducers to start processing without waiting for the network filesystem to write all the data.",
        "Our code currently runs on a single machine while MapReduce targets clusters.",
        "Appuswamy et al.",
        "(2013) identify several problems with the scale-out approach of distributed computation and put forward several scenarios in which a single machine scale-up approach is more cost effective in terms of both raw performance and performance per dollar.",
        "Brants et al. (2007) contributed Stupid Backoff, a simpler form of smoothing calculated at runtime from counts.",
        "With Stupid Backoff, they scaled to 1.8 trillion tokens.",
        "We agree that Stupid Backoff is cheaper to estimate, but contend that this work makes Kneser-Ney smoothing cheap enough.",
        "Another advantage of Stupid Backoff has been that it stores one value, a count, per n-gram instead of probability and backoff.",
        "In previous work (Heafield et al., 2012), we showed how to collapse probability and backoff into a single value without changing sentence-level probabilities.",
        "However, local scores do change and, like Stupid Backoff, are no longer probabilities.",
        "MSRLM (Nguyen et al., 2007) aims to scal-ably estimate language models on a single machine.",
        "Counting is performed with streaming algorithms similarly to this work.",
        "Their parallel merge sort also has the potential to be faster than ours.",
        "The biggest difference is that their pipeline delays some computation (part of normalization and all of interpolation) until query time.",
        "This means that it cannot produce a standard ARPA file and that more time and memory are required at query time.",
        "Moreover, they use memory mapping on entire files and these files may be larger than physical RAM.",
        "We have found that, even with mostly-sequential access, memory mapping is slower because the kernel does not explicitly know where to read ahead or write behind.",
        "In contrast, we use dedicated threads for reading and writing.",
        "Performance comparisons are omitted because we were unable to compile and run MSRLM on recent versions of Linux.",
        "Normalization has two threads per order: summing and division.",
        "Thick arrows indicate sorting.",
        "It also offers a disk-based pipeline for initial steps (i.e. counting).",
        "However, the later steps store all n-grams that survived count pruning in RAM.",
        "Without pruning, both options use the same RAM.",
        "IRSTLM (Federico et al., 2008) does not implement modified Kneser-Ney but rather an approximation dubbed ?improved Kneser-Ney?",
        "(or ?modified shift-beta?",
        "depending on the version).",
        "Estimation is done in RAM.",
        "It can also split the corpus into pieces and separately build each piece, introducing further approximation."
      ]
    },
    {
      "heading": "3 Estimation Pipeline",
      "text": [
        "Estimation has four streaming passes: counting, adjusting counts, normalization, and interpolation.",
        "Data is sorted between passes, three times in total.",
        "Figure 2 shows the flow of data."
      ]
    },
    {
      "heading": "3.1 Counting",
      "text": [
        "For a language model of order N , this step counts all N grams (with length exactly N ) by streaming through the corpus.",
        "Words near the beginning of sentence also formN grams padded by the marker <s> (possibly repeated multiple times).",
        "The end of sentence marker </s> is appended to each sentence and acts like a normal token.",
        "Unpruned N gram counts are sufficient, so lower-order n-grams (n < N ) are not counted.",
        "Even pruned models require unpruned N gram counts to compute smoothing statistics.",
        "Vocabulary mapping is done with a hash table.1 Token strings are written to disk and a 64-bit Mur-1This hash table is the only part of the pipeline that can grow.",
        "Users can specify an estimated vocabulary size for memory budgeting.",
        "In future work, we plan to support local vocabularies with renumbering.",
        "In context order, the penultimate word is primary.",
        "murHash2 token identifier is retained in RAM.",
        "Counts are combined in a hash table and spilled to disk when a fixed amount of memory is full.",
        "Merge sort also combines identical N grams (Bit-ton and DeWitt, 1983)."
      ]
    },
    {
      "heading": "3.2 Adjusting Counts",
      "text": [
        "The counts c are replaced with adjusted counts a.",
        "Adjusted counts are computed by streaming through N grams sorted in suffix order (Figure 3).",
        "The algorithm keeps a running total a(wNi ) for each i and compares consecutive N grams to decide which adjusted counts to output or increment.",
        "Smoothing statistics are also collected.",
        "For each length n, it collects the number tn,k of n-grams with adjusted count k ?",
        "[1, 4].",
        "These are used to compute closed-form estimates (Chen and Goodman, 1998) of discounts Dn(k)"
      ]
    },
    {
      "heading": "3.3 Normalization",
      "text": [
        "Normalization computes pseudo probability u",
        "The difficulty lies in computing denominator?",
        "x a(wn?11 x) for all wn?11 .",
        "For this, we sort in context order (Figure 3) so that, for every wn?11 , the entries wn?11 x are consecutive.",
        "One pass collects both the denominator and backoff3 terms",
        "A problem arises in that denominator?",
        "x a(wn?11 x) is known only after streaming through all wn?11 x, but is needed immediately to compute each u(wn|wn?11 ).",
        "One option is to buffer in memory, taking O(N |vocabulary|) space since each order is run independently in parallel.",
        "Instead, we use two threads for each order.",
        "The sum thread reads ahead to compute?x a(wn?11 x) and b(wn?11 ) then places these in a secondary stream.",
        "The divide thread reads the input and the secondary stream then writes records of the form",
        "The secondary stream is short so that data read by the sum thread will likely be cached when read by the divide thread.",
        "This sort of optimization is not possible with most MapReduce implementations.",
        "Because normalization streams through wn?11 x in context order, the backoffs b(wn?11 ) are computed in suffix order.",
        "This will be useful later (?3.5), so backoffs are written to secondary files (one for each order) as bare values without keys."
      ]
    },
    {
      "heading": "3.4 Interpolation",
      "text": [
        "Chen and Goodman (1998) found that perplexity improves when the various orders within the same model are interpolated.",
        "The interpolation step computes final probability p according to the recursive equation p(wn|wn?11 ) = u(wn|wn?11 )+b(wn?11 )p(wn|wn?12 ) (2) Recursion terminates when unigrams are interpolated with the uniform distribution",
        "where denotes the empty string.",
        "The unknown word counts as part of the vocabulary and has count zero,4 so its probability is b()/|vocabulary|.",
        "3Sums and counts are done with exact integer arithmetic.",
        "Thus, every floating-point value generated by our toolkit is the result of O(N) floating-point operations.",
        "SRILM has numerical precision issues because it uses O(N |vocabulary|) floating-point operations to compute backoff.",
        "ever p(<unk>) < 3?",
        "10?6, as it usually is.",
        "We implement both and suspect their motivation was numerical precision.",
        "Probabilities are computed by streaming in suffix lexicographic order: wn appears before wnn?1, which in turn appears before wnn?2.",
        "In this way, p(wn) is computed before it is needed to compute p(wn|wn?1), and so on.",
        "This is implemented by jointly iterating through N streams, one for each length of n-gram.",
        "The relevant pseudo probability u(wn|wn?11 ) and backoff b(wn?11 ) appear in the input records (Equation 1)."
      ]
    },
    {
      "heading": "3.5 Joining",
      "text": [
        "The last task is to unite b(wn1 ) computed in ?3.3 with p(wn|wn?11 ) computed in ?3.4 for storage in the model.",
        "We note that interpolation (Equation 2) used the different backoff b(wn?11 ) and so b(wn1 ) is not immediately available.",
        "However, the backoff values were saved in suffix order (?3.3) and interpolation produces probabilities in suffix order.",
        "During the same streaming pass as interpolation, we merge the two streams.5 Suffix order is also convenient because the popular reverse trie data structure can be built in the same pass.6"
      ]
    },
    {
      "heading": "4 Sorting",
      "text": [
        "Much work has been done on efficient disk-based merge sort.",
        "Particularly important is arity, the number of blocks that are merged at once.",
        "Low arity leads to more passes while high arity incurs more disk seeks.",
        "Abello and Vitter (1999) modeled these costs and derived an optimal strategy: use fixed-size read buffers (one for each block being merged) and set arity to the number of buffers that fit in RAM.",
        "The optimal buffer size is hardware-dependent; we use 64 MB by default.",
        "To overcome the operating system limit on file handles, multiple blocks are stored in the same file.",
        "To further reduce the costs of merge sort, we implemented pipelining (Dementiev et al., 2008).",
        "If there is enough RAM, input is lazily merged and streamed to the algorithm.",
        "Output is cut into blocks, sorted in the next step's desired order, and then written to disk.",
        "These optimizations eliminate up to two copies to disk if enough RAM is available.",
        "Input, the algorithm, block sorting, and output are all threads on a chain of producer",
        "Each n-gram record is an array of n vocabulary identifiers (4 bytes each) and an 8-byte count or probability and backoff.",
        "At peak, records are stored twice on disk because lazy merge sort is not easily amenable to overwriting the input file.",
        "Additional costs are the secondary backoff file (4 bytes per backoff) and the vocabulary in plaintext."
      ]
    },
    {
      "heading": "5 Experiments",
      "text": [
        "Experiments use ClueWeb09.7 After spam filtering (Cormack et al., 2011), removing markup, selecting English, splitting sentences (Koehn, 2005), deduplicating, tokenizing (Koehn et al., 2007), and truecasing, 126 billion tokens remained.",
        "for the 5 orders in the large LM."
      ]
    },
    {
      "heading": "5.1 Estimation Comparison",
      "text": [
        "We estimated unpruned language models in binary format on sentences randomly sampled from ClueWeb09.",
        "SRILM and IRSTLM were run until the test machine ran out of RAM (64 GB).",
        "For our code, the memory limit was set to 3.5 GB because larger limits did not improve performance on this small data.",
        "Results are in Figures 4 and 5.",
        "Our code used an average of 1.34?1.87 CPUs, so wall time is better than suggested in Figure 5 despite using disk.",
        "Other toolkits are single-threaded.",
        "SRILM's partial disk pipeline is not shown; it used the same RAM and took more time.",
        "IRSTLM's splitting approximation took 2.5 times as much CPU and about one-third the memory (for a 3-way split) compared with normal IRSTLM.",
        "For 302 million tokens, our toolkit used 25.4% of SRILM's CPU time, 14.0% of the wall time, and 7.7% of the RAM.",
        "Compared with IRSTLM, our toolkit used 16.4% of the CPU time, 9.0% of the wall time, and 16.6% of the RAM."
      ]
    },
    {
      "heading": "5.2 Scaling",
      "text": [
        "We built an unpruned model (Table 1) on 126 billion tokens.",
        "Estimation used a machine with 140 GB RAM and six hard drives in a RAID5 configuration (sustained read: 405 MB/s).",
        "It took 123 GB RAM, 2.8 days wall time, and 5.4 CPU days.",
        "A summary of Google's results from 2007 on different data and hardware appears in ?2.",
        "We then used this language model as an additional feature in unconstrained Czech-English, French-English, and Spanish-English submissions to the 2013 Workshop on Machine Translation.8 Our baseline is the University of Edinburgh's phrase-based Moses (Koehn et al., 2007) submission (Durrani et al., 2013), which used all constrained data specified by the evaluation (7 billion tokens of English).",
        "It placed first by BLEU (Pap-ineni et al., 2002) among constrained submissions in each language pair we consider.",
        "In order to translate, the large model was quantized (Whittaker and Raj, 2001) to 10 bits and compressed to 643 GB with KenLM (Heafield,",
        "2011) then copied to a machine with 1 TB RAM.",
        "Better compression methods (Guthrie and Hepple, 2010; Talbot and Osborne, 2007) and distributed language models (Brants et al., 2007) could reduce hardware requirements.",
        "Feature weights were retuned with PRO (Hopkins and May, 2011) for Czech-English and batch MIRA (Cherry and Foster, 2012) for French-English and Spanish-English because these worked best for the baseline.",
        "Uncased BLEU scores on the 2013 test set are shown in Table 2.",
        "The improvement is remarkably consistent at 0.8 BLEU point in each language pair."
      ]
    },
    {
      "heading": "6 Conclusion",
      "text": [
        "Our open-source (LGPL) estimation code is available from kheafield.com/code/kenlm/ and should prove useful to the community.",
        "Sorting makes it scalable; efficient merge sort makes it fast.",
        "In future work, we plan to extend to the Common Crawl corpus and improve parallelism."
      ]
    },
    {
      "heading": "Acknowledgements",
      "text": [
        "Miles Osborne preprocessed ClueWeb09.",
        "Mohammed Mediani contributed to early designs.",
        "Jianfeng Gao clarified how MSRLM operates.",
        "This work used the Extreme Science and Engineering Discovery Environment (XSEDE), which is supported by National Science Foundation grant number OCI-1053575.",
        "We used Stampede and Trestles under allocation TG-CCR110017.",
        "System administrators from the Texas Advanced Computing Center (TACC) at The University of Texas at Austin made configuration changes on our request.",
        "This work made use of the resources provided by the Edinburgh Compute and Data Fa"
      ]
    }
  ]
}
