{
  "info": {
    "authors": [
      "Jason Smith",
      "Jason Eisner"
    ],
    "book": "NAACL",
    "id": "acl-N12-1014",
    "title": "Unsupervised Learning on an Approximate Corpus",
    "url": "https://aclweb.org/anthology/N12-1014",
    "year": 2012
  },
  "references": [
    "acl-D07-1031",
    "acl-D07-1090",
    "acl-D09-1005",
    "acl-J00-1003",
    "acl-J93-2004",
    "acl-J94-2001",
    "acl-N06-1041",
    "acl-P02-1001",
    "acl-P03-1006",
    "acl-P05-1044",
    "acl-P07-1094",
    "acl-P08-1085",
    "acl-P09-1057"
  ],
  "sections": [
    {
      "text": [
        "Unsupervised learning techniques can take advantage of large amounts of unannotated text, but the largest text corpus (the Web) is not easy to use in its full form.",
        "Instead, we have statistics about this corpus in the form of n-gram counts (Brants and Franz, 2006).",
        "While n-gram counts do not directly provide sentences, a distribution over sentences can be estimated from them in the same way that n-gram language models are estimated.",
        "We treat this distribution over sentences as an approximate corpus and show how unsupervised learning can be performed on such a corpus using variational inference.",
        "We compare hidden Markov model (HMM) training on exact and approximate corpora of various sizes, measuring speed and accuracy on unsupervised part-of-speech tagging."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "We consider the problem of training generative models on very large datasets in sublinear time.",
        "It is well known how to train an HMM to maximize the likelihood of a corpus of sentences.",
        "Here we show how to train faster on a distribution over sentences that compactly approximates the corpus.",
        "The distribution is given by an 5-gram backoff language model that has been estimated from statistics of the corpus.",
        "In this paper, we demonstrate our approach on a traditional testbed for new structured-prediction learning algorithms, namely HMMs.",
        "We focus on unsupervised learning.",
        "This serves to elucidate the structure of our variational training approach, which stitches overlapping n-grams together rather than treating them in isolation.",
        "It also confirms that at least in this case, accuracy is not harmed by the key approximations made by our method.",
        "In future, we hope to scale up to the Google n-gram corpus (Brants and Franz, 2006) and learn a more detailed, explanatory joint model of tags, syntactic dependencies, and topics.",
        "Our intuition here is that web-scale data may be needed to learn the large number of lexically and contextually specific parameters.",
        "?Work was supported in part by NSF grant No.",
        "0347822."
      ]
    },
    {
      "heading": "1.1 Formulation",
      "text": [
        "Let w (?words?)",
        "denote an observation sequence, and let t (?tags?)",
        "denote a hidden HMM state sequence that may explain w. This terminology is taken from the literature on inducing part-of-speech (POS) taggers using a first-order HMM (Merialdo, 1994), which we use as our experimental setting.",
        "Maximum a posteriori (MAP) training of an HMM p?",
        "seeks parameters ?",
        "to maximize",
        "where c is an empirical distribution that assigns probability 1/N to each of the N sentences in a training corpus.",
        "Our technical challenge is to generalize this MAP criterion to other, structured distributions c that compactly approximate the corpus.",
        "Specifically, we address the case where c is given by any probabilistic FSA, such as a backoff language model?that is, a variable-order Markov model estimated from corpus statistics.",
        "Similar sentences w share subpaths in the FSA and cannot easily be disentangled.",
        "The support of c is typically infinite (for a cyclic FSA) or at least exponential.",
        "Hence it is no longer practical to compute the tagging distribution p(t |w) for each sentence w separately, as in traditional MAP-EM or gradient ascent approaches.",
        "We will maximize our exact objective, or a cheaper variational approximation to it, in a way that crucially allows us to retain the structure-sharing."
      ]
    },
    {
      "heading": "1.2 Motivations",
      "text": [
        "Why train from a distribution rather than a corpus?",
        "First, the foundation of statistical NLP is distributions over strings that are specified by weighted automata and grammars.",
        "We regard parameter estimation from such a distribution c (rather than from a sample) as a natural question.",
        "Previous work on modeling c with a distribution from another family was motivated by approximating a grammar or",
        "model rather than generalizing from a dataset, and hence removed latent variables while adding parameters (Nederhof, 2000; Mohri and Nederhof, 2001; Liang et al., 2008), whereas we do the reverse.",
        "Second, in practice, one may want to incorporate massive amounts of (possibly out-of-domain) data in order to get better coverage of phenomena.",
        "Massive datasets usually require a simple model (given a time budget).",
        "We propose that it may be possible to use a lot of data and a good model by reducing the accuracy of the data representation instead.",
        "While training will become more complicated, it can still result in an overall speedup, because a frequent 5 gram collapses into a single parameter of the estimated distribution that only needs to be processed once per training iteration.",
        "By pruning low-count n-grams or reducing the maximum n below 5, one can further increase data volume for the fixed time budget at the expense of approximation quality.",
        "Third, one may not have access to the original corpus.",
        "If one lacks the resources to harvest the web, the Google n-gram corpus was derived from over a trillion words of English web text.",
        "Privacy or copyright issues may prevent access, but one may still be able to work with n-gram statistics: Michel et al. (2010) used such statistics from 5 million scanned books.",
        "Several systems use n-gram counts (Bergsma et al., 2009; Lin et al., 2009) or other web statistics (Lapata and Keller, 2005) as features within a classifier.",
        "A large language model from n-gram counts yields an effective prior over hypotheses in tasks like machine translation (Brants et al., 2007).",
        "We similarly construct an n-gram model, but treat it as the primary training data whose structure is to be explained by the generative HMM.",
        "Thus our criterion does not explain the n-grams in isolation, but rather tries to explain the likely full sentences w that the model reconstructed from overlapping n-grams.",
        "This is something like shotgun sequencing, in which likely DNA strings are reconstructed from overlapping short reads (Staden, 1979); however, we train an HMM on the resulting distribution rather than merely trying to find its mode.",
        "Finally, unsupervised HMM training discovers latent structure by approximating an empirical distribution c (the corpus) with a latent-variable distribution p (the trained HMM) that has fewer parameters.",
        "We show how to do the same where the distribution c is not a corpus but a finite-state distribution.",
        "In general, this finite-state c could represent some sophisticated estimate of the population distribution, using shrinkage, word classes, neural-net predictors, etc.",
        "to generalize in some way beyond the training sample before fitting p. For the sake of speed and clear comparison, however, our present experiments take c to be a compact approximation to the sample distribution, requiring only n-grams.",
        "Spectral learning of HMMs (Hsu et al., 2009) also learns from a collection of n-grams.",
        "It has the striking advantage of converging globally to the true HMM parameters (under a certain reparameteriza-tion), with enough data and under certain assumptions.",
        "However, it does not exploit context beyond a trigram (it will not maximize, even locally, the likelihood of a finite sample of sentences), and cannot exploit priors or structure?e.g., that the emissions are consistent with a tag dictionary or that the transitions encode a higher-order or factorial HMM.",
        "Our more general technique extends to other latent-variable models, although it suffers from variational EM's usual local optima and approximation errors."
      ]
    },
    {
      "heading": "2 A variational lower bound",
      "text": [
        "Our starting point is the variational EM algorithm (Jordan et al., 1999).",
        "Recall that this maximizes a lower bound on the MAP criterion of equation 1, by bounding the log-likelihood subterm as follows:",
        "This use of Jensen's inequality is valid for any distribution q.",
        "As Neal and Hinton (1998) show, the EM algorithm (Dempster et al., 1977) can be regarded as locally maximizing the resulting lower bound by alternating optimization, where q is a free parameter.",
        "The E-step optimizes q for fixed ?, and the M-step optimizes ?",
        "for fixed q.",
        "These computations are tractable for HMMs, since the distribution q(t) = p?",
        "(t |w) that is optimal at the E-step (which makes the inequality tight) can be represented as a lattice (a certain kind of weighted DFA), and this makes the M-step tractable via the forward-backward algorithm.",
        "However, there are many extensions such as",
        "factorial HMMs and Bayesian HMMs in which an expectation under p?",
        "(t |w) involves an intractable sum.",
        "In this setting, one may use variational EM, in which q is restricted to some parametric family q?",
        "that will permit a tractable M-step.",
        "In this case the E-step chooses the optimal values of the variational parameters ?",
        "; the inequality is no longer tight.",
        "There are two equivalent views of how this procedure is applied to a training corpus.",
        "One view is that the corpus log-likelihood is just as in (2), where w is taken to be the concatenation of all training sentences.",
        "The other view is that the corpus log-likelihood is a sum over many terms of the form (2), one for each training sentence w, and we bound each summand individually using a different q?.",
        "However, neither view leads to a practical implementation in our setting.",
        "We can neither concatenate all the relevant w nor loop over them, since we want the expectation of (2) under some distribution c(w) such that {w : c(w) > 0} is very large or infinite.",
        "Our move is to make q be a conditional distribution q(t |w) that applies to all w at once.",
        "The following holds by applying Jensen's inequality separately to each w in the expectation (this is valid since for each w, q(t |w) is a distribution):",
        "where we use cq(w, t) to denote the joint distribution c(w) ?",
        "q(t |w).",
        "Thus, just as c is our approximate corpus, cq is our approximate tagged corpus.",
        "Our variational parameters ?",
        "will be used to param-eterize cq directly.",
        "To ensure that cq?",
        "can indeed be expressed as c(w) ?",
        "q(t |w), making the above bound valid, it suffices to guarantee that our variational family preserves the marginals:"
      ]
    },
    {
      "heading": "3 Finite-state encodings and algorithms",
      "text": [
        "In the following, we will show how to maximize (5) for particular families of p, c, and cq that can be expressed using finite-state machines (FSMs)?",
        "that is, finite-state acceptors (FSAs) and transducers (FSTs).",
        "This general presentation of our method enables variations using other FSMs.",
        "A path in an FSA accepts a string.",
        "In an FST, each arc is labeled with a ?word : tag?",
        "pair, so that a path accepts a string pair (w, t) obtained by respectively concatenating the words and the tags encountered along the path.",
        "Our FSMs are weighted in the (+,?)",
        "semiring: the weight of any path is the product (?)",
        "of its arc weights, while the weight assigned to a string or string pair is the total weight (+) of all its accepting paths.",
        "An FSM is unambiguous if each string or string pair has at most one accepting path.",
        "Figure 1 reviews how to represent an HMM POS tagger as an FST (b), and how composing this with an FSA that accepts a single sentence gives us the familiar HMM tagging lattice as an FST (c).",
        "The forward-backward algorithm sums over paths in the lattice via dynamic programming (Rabiner, 1989).",
        "In section 3.1, we replace the straight-line FSA of Figure 1a with an FSA that defines a more general distribution c(w) over many sentences.",
        "Note that we cannot simply use this as a drop-in replacement in the construction of Figure 1.",
        "That would correspond to running EM on a single but uncertain sentence (distributed as c(w)) rather than a collection of observed sentences.",
        "For example, in the case of an ordinary training corpus of N sentences, the new FSA would be a parallel union (sum) of N straight-line paths?rather than a serial concatenation (product) of those paths as in ordinary EM (see above).",
        "Running the forward algorithm on the resulting lattice would compute Ec(w)",
        "section 3.2 to construct a variational family cq?.",
        "We then show in sections 3.3?3.5 how to compute and locally maximize the variational lower bound (5)."
      ]
    },
    {
      "heading": "3.1 Modeling a corpus with n-gram counts",
      "text": [
        "n-gram backoff language models have been used for decades in automatic speech recognition and statistical machine translation.",
        "We follow the usual FSA construction (Allauzen et al., 2003).",
        "The state of a 5 gram FSA model c(w) must remember the previous 4-gram.",
        "For example, it would include an arc from state defg (the previous 4-gram) to state efgh with label h and weight c(h |defg).",
        "Then, with appropriate handling of boundary conditions, a sentence",
        "?word:tag / weight.?",
        "(Weights are suppressed for space.",
        "State labels are not part of the machine but suggest the history recorded by each state.)",
        "(a) w is an FSA that generates the sentence ?Time flies like an arrow?",
        "; all arcs have probability",
        "1.",
        "(b) p(w, t) is an FST representing an HMM (many arcs are not shown and words are abbreviated as ?w?).",
        "Each arc",
        "w : t is weighted by the product of transition and emission probabilities, p(t |previous t) ?",
        "p(w |t).",
        "Composing (a) with (b) yields (c), an FST that encodes the joint probabilities p(w, t) of all possible taggings of the sentence w. of weight 0 can be omitted from the FSA.1 To estimate a conditional probability like c(h | defg) above, we simply take an unsmoothed ratio of two n-gram counts.",
        "This ML estimation means that c will approximate as closely as possible the training sample from which the counts were drawn.",
        "That gives a fair comparison with ordinary EM, which trains directly on that sample.",
        "(See discussion at the end of section 1.2 for alternatives.)",
        "Yet we decline to construct a full 5-gram model, which would not be as compact as desired.",
        "A collection of all web 5-grams would be nearly as large as the web itself (by Zipf's Law).",
        "We may not have such a collection.",
        "For example, the Google n-gram corpus version 2 contains counts only for 1-grams that appear at least 40 times and 2-, 3-, 4-, and 5 grams that appear at least 10 times (Lin et al., 2009).",
        "1The FSA's initial state is the unigram history #, and its final states (which have no outgoing arcs) are the other states whose n-gram labels end in #.",
        "Here # is a boundary symbol that falls between sentences.",
        "To compute the weighted transitions, sentence boundaries must be manually or automatically annotated, either on the training corpus as in our present experiments, or directly on the training n-grams if we have only those.",
        "To automatically find boundaries in an n-gram collection, one could apply a local classifier to each n-gram.",
        "But in principle, one could exploit more context and get a globally consistent annotation by stitching the n-grams together and applying the methods of this paper?replacing p?",
        "with an existing CRF sentence boundary detector, replacing c with a document-level (not sentence-level) language model, and optimizing cq?",
        "to be a version of c that is probabilistically annotated with sentence boundaries, which yields our desired distribution over sentences.",
        "Instead, we construct a backoff language model.",
        "This FSA has one arc for each n-gram in the collection.",
        "Our algorithm's runtime (per iteration) will be linear in the number of arcs.",
        "If the 5-gram defgh is not in our collection, then there can be no h arc leaving defg.",
        "When encountering h in state defg, the automaton will instead take a failure arc (Allauzen et al., 2003) to the ?backoff state?",
        "efg.",
        "It may be able to consume the h from that state, on an arc with weight c(h |efg); or it may have to back off further to fg.",
        "Each state's failure arc is weighted such that the state's outgoing arcs sum to 1.",
        "It is labeled with the special symbol ?, which does not contribute to the word string accepted along a path.",
        "We take care never to allow backoff to the empty state ,2 since we find that c(w) is otherwise too coarse an approximation to English: sampled sentences tend to be disjointed, with some words generated in complete ignorance of their left context."
      ]
    },
    {
      "heading": "3.2 The variational distribution cq(w, t)",
      "text": [
        "The ?variational gap?",
        "between (4) and (5) is Ec(w)KL(q(t |w) ||p?",
        "(t |w)).",
        "That is, the bound is good if q does a good job of approximating p?",
        "'s tagging distribution on a randomly drawn sentence.",
        "Note that n?1 is the order of our n-gram Markov 2To prevent such backoff, it suffices to include all 2-grams with count > 0.",
        "But where the full collection of 2-grams is unavailable or too large, one can remove the empty state (and recursively remove all states that transition only to removed states), and then renormalize the model locally or globally.",
        "model c(w) (i.e., each word is chosen given the previous n ?",
        "1 words).",
        "Let np ?",
        "1 be the order of the HMM p?",
        "(w, t) that we are training: i.e., each tag is chosen given the previous np ?",
        "1 tags.",
        "Our experiments take np = 2 (a bigram HMM) as in Figure 1.",
        "We will take q?",
        "(t |w) to be a conditional Markov model of order nq ?",
        "1.3 It will predict the tag at position i using a multinomial conditioned on the preceding nq?1 tags and on the word n-gram ending at position i (where n is as large as possible such that this n-gram is in our training collection).",
        "?",
        "is the collection of all multinomial parameters.",
        "If nq = np, then our variational gap can be made 0 as in ordinary non-variational EM (see section 3.5).",
        "In our experiments, however, we save memory by choosing nq = 1.",
        "Thus, our variational gap is tight to the extent that a word's POS tag under the model p?",
        "is conditionally independent of previous tags and the rest of the sentence, given an n-word window.4 This is the assumption made by local classification models (Punyakanok et al., 2005; Toutanova and Johnson, 2007).",
        "Note that it is milder than the ?one tagging per n-gram?",
        "hypothesis (Dawborn and Curran, 2009; Lin et al., 2009), which claims that each 5-gram (and therefore each sentence!)",
        "is unambiguous as to its full tagging.",
        "In contrast, we allow that a tag may be ambiguous even given an n-word window; we merely suppose that there is no further disambiguating information accessible to p?.5 We can encode the resulting cq(w, t) as an FST.",
        "With nq = 1, the states of cq are isomorphic to the states of c. However, an arc in c from defg with label h and weight 0.2 is replaced in cq by several arcs?one per tag t?with label h : t and weight 0.2 ?",
        "q?",
        "(t |defgh).6 We remark that an encoding of",
        "violate our assumption.",
        "(1) ?Some monitor lizards from Africa .",
        ".",
        ".",
        "?",
        "versus ?Some monitor lizards from a distance .",
        ".",
        ".",
        "?",
        ": there are words far away from ?monitor?",
        "that help disambiguate whether ?monitor?",
        "is a noun or a verb.",
        "(?Monitor lizards?",
        "are a species, but some people like to monitor lizards.)",
        "(2) ?Time flies?",
        ": ?flies?",
        "is more likely to be a noun if ?time?",
        "is a verb.",
        "6In the case nq > 1, the states of c would need to be split in order to remember nq ?",
        "1 tags of history.",
        "For example, if q(t |w) as an FST would be identical except for dropping the c factor (e.g., 0.2) from each weight.",
        "Composing c ?",
        "q would then recover cq.",
        "This construction associates one variational parameter in ?",
        "with each arc in cq?that is, with each pair (arc in c, tag t), if nq = 1.",
        "There would be little point in sharing these parameters across arcs of cq, as that would reduce the expressiveness of the variational distribution without reducing runtime.7 Notice that maximizing equation (5) jointly learns not only a compact slow HMM tagger p?, but also a large fast tagger q?",
        "that simply memorizes the likely tags in each n-gram context.",
        "This is reminiscent of structure compilation (Liang et al., 2008)."
      ]
    },
    {
      "heading": "3.3 Computing the variational objective",
      "text": [
        "The expectation in equation (5) can now be computed efficiently and elegantly by dynamic programming over the FSMs, for a given ?",
        "and ?.",
        "We exploit our representation of cq?",
        "as an FSM over the (+,?)",
        "semiring.",
        "The path weights represent a probability distribution over the paths.",
        "In general, it is efficient to compute the expected value of a random FSM path, for any definition of value that decomposes additively over the path's arcs.",
        "The approach is to apply the forward algorithm to a version of cq?",
        "where we now regard each arc as weighted by an ordered pair of real numbers.",
        "The (+,?)",
        "operations for combining weights (section 3) are replaced with the operations of an ?expectation semiring?",
        "whose elements are such pairs (Eisner, 2002).",
        "Suppose we want to find Ecq?",
        "(w,t) log q?",
        "(t |w).",
        "To reduce this to an expected value problem, we must assign a value to each arc of cq?",
        "such that the c is Figure 1a, splitting its states with nq = 2 would yield a cq with a topology like Figure 1c, but with each arc having an independent variational parameter.",
        "7One could increase the number of arcs and hence variational parameters by splitting the states of cq to remember more history.",
        "In particular, one could increase the width nq of the tag window, or one could increase the width of the word window by splitting states of c (without changing the distribution c(w)).",
        "Conversely, one could reduce the number of variational parameters by further restricting the variational family.",
        "For example, requiring q(t |w) to have entropy 0 (analogous to ?hard EM?",
        "or ?Viterbi EM?)",
        "would associate a single deterministic tag with each arc of c. This is fast, makes cq as compact as c, and is still milder than ?one tagging per n-gram.?",
        "More generously, one could allow up to 2 tags per arc of c, or use a low-dimensional representation of the arc's distribution over tags.",
        "total value of a path accepting (w, t) is log q?",
        "(t | w).",
        "Thus, let the value of each arc in cq?",
        "be the log of its weight in the isomorphic FST q?",
        "(t |w).8 We introduce some notation to make this precise.",
        "A state of cq?",
        "is a pair of the form [hc, hq], where hc is a state of c (e.g., an (n?",
        "1)-word history) and hq is an (nq ?",
        "1)-tag history.",
        "We saw in the previous section that an arc a leaving this state, and labeled with w : t where w is a word and t is a tag, will have a weight of the form ka",
        "a va = log q?",
        "(t |w), as desired.",
        "To compute the expected value r?",
        "over all paths, we follow a generalized forward-backward recipe (Li and Eisner, 2009, section 4.2).",
        "First, run the forward and backward algorithms over cq?.10 Now the expected value is a sum over all arcs of cq?, namely",
        "a ?akava?a, where ?a denotes the forward probability of arc a's source state and ?a denotes the backward probability of arc a's target state.",
        "Now, in fact, the expectation we need to compute is not Ecq?",
        "(w,t) log q?",
        "(t |w) but rather equation (5).",
        "So the value va of arc a should not actually be log ?a but rather log ?a ?",
        "log ?a where ?a",
        "with ?",
        ": , which does not contribute to the word string or tag string accepted along a path.",
        "Its weight ka is the weight c(?",
        "|hc) of the corresponding failure arc in c from hc to h?c.",
        "We define va def = 0, so it does not contribute to the total value.",
        "10Recall that the forward probability of each state is defined recursively from the forward probabilities of the states that have arcs leading to it.",
        "As our FST is cyclic, it is not possible to visit the states in topologically sorted order.",
        "We instead solve these simultaneous equations by a relaxation algorithm (Eisner, 2002, section 5): repeatedly sweep through all states, updating their forward probability, until the total forward probability of all final states is close to the correct total of 1 =",
        "(showing that we have covered all high-prob paths).",
        "A corresponding backward relaxation is actually not needed yet (we do need it for ??",
        "in section 3.4): backward probabilities are just 1, since cq?",
        "is constructed with locally normalized probabilities.",
        "When we rerun the forward-backward algorithm after a parameter update, we use the previous solution as a starting point for the relaxation algorithm.",
        "This greatly speeds convergence.",
        "hp) ?",
        "p?",
        "(w |t).",
        "This is a minor change?except that va now depends on hp, which is the history of np?1 previous tags.",
        "If np > nq, then a's start state does not store such a long history.",
        "Thus, the value of a actually depends on how one reaches a!",
        "It is properly written as vza, where za is a path ending with a and z is sufficiently long to determine hp.11 Formally, let Za be a ?partitioning?",
        "set of paths to a, such that any path in cq?",
        "from an initial state to the start state of a must have exactly one z ?",
        "Za as a suffix, and each z ?",
        "Za is sufficiently long so that vza is well-defined.",
        "We can now find the expected value as r?",
        "=",
        "kavza?a.",
        "The above method permits p?",
        "to score the tag sequences of length np that are hypothesized by cq?.",
        "One can regard it as implicitly running the generalized forward-backward algorithm over a larger FST that marries the structure of cq?",
        "with the np-gram HMM structure,12 so that each value is again local to a single arc za.",
        "However, it saves space by working directly on cq?",
        "(which has manageable size because we deliberately kept nq small), rather than materializing the larger FST (as bad as increasing nq to np).",
        "TheZa trick usesO(CTnq) rather thanO(CTnp) space to store the FST, where C is the number of arcs in c (= number of training n-grams) and T is the number of tag types.",
        "With or without the trick, runtime isO(CTnp+BCTnq), whereB is the num-11By concatenating z's start state's hq with the tags along z.",
        "Typically z has length np ?",
        "nq (and Za consists of the paths of that length to a's start state).",
        "However, z may be longer if it contains ?",
        "arcs, or shorter if it begins with an initial state.",
        "12Constructed by lazy finite-state intersection of cq?",
        "and p?",
        "(Mohri et al., 2000).",
        "These do not have to be n-gram taggers, but must be same-length FSTs (these are closed under intersection) and unambiguous.",
        "Define arc values in both FSTs such that for any (w, t), cq?",
        "and p?",
        "accept (w, t) along unique paths of total values v = ?",
        "log q?",
        "(t |w) and v?",
        "= log p?",
        "(w, t), respectively.",
        "We now lift the weights into the expectation semiring (Eisner, 2002) as follows.",
        "In cq?, replace arc a's weight ka with the semiring weight ?ka, kava?.",
        "In p?",
        ", replace arc a?",
        "'s weight with ?1, v?a??.",
        "Then if k = cq?",
        "(w, t), the intersected FST accepts (w, t) with weight ?k, k(v + v?)?.",
        "The expectation of v+v?",
        "over all paths is then a sum ?",
        "za ?zarza?za over arcs za of the intersected FST?we are using za to denote the arc in the intersected FST that corresponds to ?a in cq?",
        "when reached via path z,?",
        "and rza to denote the second component of its semiring weight.",
        "Here ?za and ?za denote the forward and backward probabilities in the intersected FST, defined from the first components of the semiring weights.",
        "We can get them more efficiently from the results of running forward-backward on the smaller cq?",
        ": ?za = ?z ?",
        "z?z kz and ?za = ?a = 1.",
        "ber of forward-backward sweeps (footnote 10).",
        "The ordinary forward algorithm requires nq = np and takesO(CTnp) time and space on a length-C string."
      ]
    },
    {
      "heading": "3.4 Computing the gradient as well",
      "text": [
        "To maximize our objective (5), we compute its gradient with respect to ?",
        "and ?.",
        "We follow an efficient recipe from Li and Eisner (2009, section 5, case 3).",
        "The runtime and space match those of section 3.3, except that the runtime rises to O(BCTnp).13 First suppose that each va is local to a single arc.",
        "We replace each weight ka with k?a = ?ka, kava?",
        "in the so-called expectation semiring, whose sum and product operations can be found in Li and Eisner (2009, Table 1).",
        "Using these in the forward-backward algorithm yields quantities ?",
        "?a and ?",
        "?a that also fall in the expectation semiring.14 (Their first components are the old ?a and ?a.)",
        "The desired gradient15 ??k?,?r??",
        "is",
        "ka(?va)).",
        "Here?",
        "gives the vector of partial derivatives with respect to all ?",
        "and ?",
        "parameters.",
        "Yet each ?k?a is sparse, with only 3 nonzero components, because k?a depends on only one ?",
        "parameter (?a) and two ?",
        "parameters (via ?a as defined in section 3.3).",
        "When np > nq, we sum not over arcs a of cq?",
        "but over arcs za of the larger FST (footnote 12).",
        "Again we can do this implicitly, by using the short path za in cq?",
        "in place of the arc za.",
        "Each state of cq?",
        "must then store ??",
        "and ??",
        "values for each of the Tnp?nq states of the larger FST that it corresponds to.",
        "(In the case np ?",
        "nq = 1, as in our experiments, this fortunately does not increase the total asymptotic space, 13An alternative would be to apply back-propagation (reverse-mode automatic differentiation) to section 3.3's computation of the objective.",
        "This would achieve the same runtime as in section 3.3, but would need as much space as time.",
        "14This also computes our objective r?",
        ": summing the ??",
        "'s of the final states of cq?",
        "gives ?k?, r??",
        "where k?",
        "= 1 is the total probability of all paths.",
        "This alternative computation of the expectation r?, using the forward algorithm (instead of forward-backward) but over the expectation semiring, was given by Eisner (2002).",
        "15We are interested in ?r?.",
        "?k?",
        "is just a byproduct.",
        "We remark that ?k?",
        "6= 0, even though k?",
        "= 1 for any valid parameter vector ?",
        "(footnote 14), as increasing ?",
        "invalidly can increase k?.",
        "16By a product of pairs we always mean ?k, r?",
        "?s, t?",
        "def= ?ks, kt+ rs?, just as in the expectation semiring, even though the pair?k?a is not in that semiring (its components are vectors rather than scalars).",
        "See (Li and Eisner, 2009, section 4.3).",
        "We also define scalar-by-pair products as k?s, t?",
        "def= ?ks, kt?.",
        "since each state of cq?",
        "already has to store T arcs.)",
        "With more cleverness, one can eliminate this extra storage while preserving asymptotic runtime (still using sparse vectors).",
        "Find ?",
        "?k?, (?r?)(1)?",
        "= ?",
        "a ??a?",
        "?ka, 0???a.",
        "Also find ?r?, (?r?)",
        "?a.",
        "Now our desired gradient ?r?",
        "emerges as (?r?",
        ")(1) + (?r?)(2).",
        "The computation of (?r?",
        ")(1) uses modified definitions of ?",
        "?a and ?",
        "?a that depend only on (respectively) the source and target states of a?not za.17 To compute them, initialize ??",
        "(respectively ??)",
        "at each state to ?1, 0?",
        "or ?0, 0?",
        "according to whether the state is initial (respectively final).",
        "Now iterate repeatedly (footnote 10) over all arcs a: Add",
        "?0, kavza?",
        "to the ??",
        "at a's target state.",
        "Conversely, add ?ka, 0??",
        "?a to the ??",
        "at a's source state, and for each z ?",
        "Za, add(?",
        "z?z kz ) ?0, kavza?",
        "?a to the ??",
        "at z's source state.",
        "3.5 Locally optimizing the objective Recall that cq?",
        "associates with each [hc, hq, w] a block of ?",
        "parameters that must be ?",
        "0 and sum to 1.",
        "Our optimization method must enforce these con",
        "straints.",
        "A standard approach is to use a projected gradient method, where after each gradient step on ?, the parameters are projected back onto the probability simplex.",
        "We implemented another standard approach: reexpress each block of parameters {?a : a ?",
        "A} as ?a def = exp ?a/ ?",
        "b?A exp ?b, as is possible iff the ?a parameters satisfy the constraints.",
        "We then follow the gradient of r?",
        "with respect to the new ?",
        "parameters, given by ?r?/?",
        "?a = ?a(?r?/?",
        "?a?EA) where EA = ?",
        "b ?b(?r?/??b).",
        "Another common approach is block coordinate ascent on ?",
        "and ?",
        "?this is ?variational EM.?",
        "M-step: Given ?, we can easily find optimal estimates of the emission and transition probabilities ?.",
        "They are respectively proportional to the posterior expected counts of arcs a and paths za under cq?, namely N ?",
        "?aka?a and N ?",
        "?z (?",
        "z?z kz ) ka?a.",
        "E-step: Given ?, we cannot easily find the optimal ?",
        "(even if nq = np).18 This was the rea17First components ?a and ?a remain as in cq?.",
        "?",
        "?a sums paths to a.",
        "?",
        "?ka, 0??",
        "?a can't quite sum over paths starting with a (their early weights depend on z), but (?r?",
        ")(2) corrects this.",
        "18Recall that cq?",
        "must have locally normalized probabilities (to ensure that its marginal is c).",
        "If nq = np, the optimal ?",
        "is as follows: we can reduce the variational gap to 0 by setting",
        "son for gradient ascent.",
        "However, for any single sum-to-1 block of parameters {?a : a ?",
        "A}, it is easy to find the optimal values if the others are held fixed.",
        "We maximize LA",
        "where ?A is a Lagrange multiplier chosen so that the sum is 1.",
        "The partial derivative ?r?/?",
        "?a can be found using methods of section 3.4, restricting the sums to za for the given a.",
        "For example, following paragraphs 2?3 of section 3.4, let ?",
        "?a, ra?",
        "Rather than doing block coordinate ascent by updating one ?",
        "block at a time (and then recomputing ra values for all blocks, which is slow), one can take an approximate step by updating all blocks in parallel.",
        "We find that replacing the E-step with a single parallel step still tends to improve the objective, and that this approximate variational EM is faster than gradient ascent with comparable results.21"
      ]
    },
    {
      "heading": "4 Experiments",
      "text": []
    },
    {
      "heading": "4.1 Constrained unsupervised HMM learning",
      "text": [
        "We follow the unsupervised POS tagging setup of Merialdo (1994) and many others (Smith and Eisner, 2005; Haghighi and Klein, 2006; Toutanova and Johnson, 2007; Goldwater and Griffiths, 2007; Johnson, 2007).",
        "Given a corpus of sentences, one seeks the maximum-likelihood or MAP parameters of a bi-gram HMM (np = 2).",
        "The observed sentences, for q?",
        "(t |hcw, hq) to the probability that t begins with t if we randomly draw a suffix w ?",
        "c(?",
        "|hcw) and randomly tag ww with t ?",
        "p?(?",
        "|ww, hq).",
        "This is equivalent to using p?",
        "with the backward algorithm to conditionally tag each possible suffix.",
        "??za(?k?za/??a)??za.",
        "Then ?LA/?",
        "?a works out to?",
        "z?Za ca(rza+?za(log ?za?log ?a?1))+?A.",
        "Set to 0 and solve for ?a, noting that ca, ?a, ?A are constant over a ?",
        "A.",
        "21In retrospect, an even faster strategy might be to do a series of block ?",
        "and ??",
        "updates, updating ??",
        "at a state (footnote 10) immediately after updating ?",
        "on the arcs leading from that state, which allows a better block update at predecessor states.",
        "On an acyclic machine, a single backward pass of this sort will reduce the variational gap to 0 if nq = np (footnote 18).",
        "This is because, thanks to the up-to-date ?",
        "?, each block of arcs gets new ?",
        "weights in proportion to relative suffix path probabilities under the new ?.",
        "After this backward pass, a single forward pass can update the ?",
        "values and collect expected counts for the M-step that will update ?.",
        "Standard EM is a special case of this strategy.",
        "us, are replaced by the faux sentences extrapolated from observed n-grams via the language model c. The states of the HMM correspond to POS tags as in Figure 1.",
        "All transitions are allowed, but not all emissions.",
        "If a word is listed in a provided ?dictionary?",
        "with its possible tags, then other tags are given 0 probability of emitting that word.",
        "The EM algorithm uses the corpus to learn transition and emission probabilities that explain the data under this constraint.",
        "The constraint ensures that the learned states have something to do with true POS tags.",
        "Merialdo (1994) spawned a long line of work on this task.",
        "Ideas have included Bayesian learning methods (MacKay, 1997; Goldwater and Griffiths, 2007; Johnson, 2007), better initial parameters (Goldberg et al., 2008), and learning how to constrain the possible parts of speech for a word (Ravi and Knight, 2008), as well as non-HMM sequence models (Smith and Eisner, 2005; Haghighi and Klein, 2006; Toutanova and Johnson, 2007).",
        "Most of this work has used the Penn Treebank (Marcus et al., 1993) as a dataset.",
        "While this million-word Wall Street Journal (WSJ) corpus is one of the largest that is manually annotated with parts of speech, unsupervised learning methods could take advantage of vast amounts of unannotated text.",
        "In practice, runtime concerns have sometimes led researchers to use small subsets of the Penn Treebank (Goldwater and Griffiths, 2007; Smith and Eisner, 2005; Haghighi and Klein, 2006).",
        "Our goal is to point the way to using even larger datasets.",
        "The reason for all this past research is that (Merialdo, 1994) was a negative result: while EM is guaranteed to improve the model's likelihood, it degrades the match between the latent states and true parts of speech (if the starting point is a good one obtained with some supervision).",
        "Thus, for the task of POS induction, there must be something wrong with the HMM model, the likelihood objective, or the search procedure.",
        "It is clear that the model is far too weak: there are many latent variables in natural language, so the HMM may be picking up on something other than POS tags.",
        "Ultimately, fixing this will require richer models with many more parameters.",
        "But learning these (lexically specific) parameters will require large training datasets?hence our present methodological exploration on whether it is possible to scale up the original setting."
      ]
    },
    {
      "heading": "4.2 Setup",
      "text": [
        "We investigate how much performance degrades when we approximate the corpus and train approximately with nq = 1.",
        "We examine two measures: likelihood on a held-out corpus and accuracy in POS tagging.",
        "We train on corpora of three different sizes: ?WSJ-big (910k words?",
        "441k n-grams @ cutoff 3),",
        "These were drawn from the Penn Treebank (sections 2?23) and the English Gigaword corpus (Parker et al., 2009).",
        "For held-out evaluation, we use WSJ-small (Penn Treebank section 0) or WSJ-big.",
        "We estimate backoff language models for these corpora based on collections of n-grams with n ?",
        "5.",
        "In this work, we select the n-grams by simple count cutoffs as shown above,22 taking care to keep all 2 grams as mentioned in footnote 2.",
        "Similar to Merialdo (1994), we use a tag dictionary which limits the possible tags of a word to those it was observed with in the WSJ, provided that the word was observed at least 5 times in the WSJ.",
        "We used the reduced tagset of Smith and Eisner (2005), which collapses the original 45 fine-grained part-of-speech tags into just 17 coarser tags."
      ]
    },
    {
      "heading": "4.3 Results",
      "text": [
        "In all experiments, our method achieves similar accuracy though slightly worse likelihood.",
        "Although this method is meant to be a fast approximation of EM, standard EM is faster on the smallest dataset (WSJ-big).",
        "This is because this corpus is not much bigger than the 5-gram language model built from it (at our current pruning level), and so the overhead of the more complex n-gram EM method is a net disadvantage.",
        "However, when moving to larger corpora, the iterations of n-gram EM become as fast as standard EM and then faster.",
        "We expect this trend to continue as one moves to much larger datasets, as the compression ratio of the pruned language model relative to the original corpus will only improve.",
        "The Google n-gram corpus is based on 50?",
        "more data than our largest but could be handled in RAM.",
        "22Entropy-based pruning (Stolcke, 2000) may be a better selection method when one is in a position to choose.",
        "However, count cutoffs were already used in the creation of the Google n-gram corpus, and more complex methods of pruning may not be practical for very large datasets.",
        "ter each iteration, measured on WSJ-big when training on the Gigaword datasets, else on WSJ-small.",
        "Runtime and log-likelihood are scaled differently for each dataset.",
        "Replacing EM with our method changes runtime per iteration from 1.4s?",
        "3.5s, 48s?",
        "47s, and 506s?",
        "321s."
      ]
    },
    {
      "heading": "5 Conclusions",
      "text": [
        "We presented a general approach to training generative models on a distribution rather than on a training sample.",
        "We gave several motivations for this novel problem.",
        "We formulated an objective function similar to MAP, and presented a variational lower bound.",
        "Algorithmically, we gave nontrivial general methods for computing and optimizing our variational lower bound for arbitrary finite-state data distributions c, generative models p, and variational families q, provided that p and q are unambiguous same-length FSTs.",
        "We also gave details for specific useful families for c, p, and q.",
        "As proof of principle, we used a traditional HMM POS tagging task to demonstrate that we can train a model from n-grams almost as accurately as from full sentences, and do so faster to the extent that the n-gram dataset is smaller.",
        "More generally, we offer our approach as an intriguing new tool to help semi-supervised learning benefit from very large datasets."
      ]
    }
  ]
}
