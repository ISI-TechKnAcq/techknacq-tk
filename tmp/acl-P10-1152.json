{
  "info": {
    "authors": [
      "Shay B. Cohen",
      "Noah A. Smith"
    ],
    "book": "ACL",
    "id": "acl-P10-1152",
    "title": "Viterbi Training for PCFGs: Hardness Results and Competitiveness of Uniform Initialization",
    "url": "https://aclweb.org/anthology/P10-1152",
    "year": 2010
  },
  "references": [
    "acl-C96-2215",
    "acl-D07-1003",
    "acl-E06-1004",
    "acl-J03-4003",
    "acl-J07-4003",
    "acl-J99-4005",
    "acl-N06-1020",
    "acl-N07-1009",
    "acl-N07-1018",
    "acl-N09-1009",
    "acl-P06-1043",
    "acl-P08-2007",
    "acl-W05-0615",
    "acl-W07-2216"
  ],
  "sections": [
    {
      "text": [
        "Shay B. Cohen and Noah A. Smith",
        "We consider the search for a maximum likelihood assignment of hidden derivations and grammar weights for a probabilistic context-free grammar, the problem approximately solved by \"Viterbi training.\"",
        "We show that solving and even approximating Viterbi training for PCFGs is NP-hard.",
        "We motivate the use of uniformat-random initialization for Viterbi EM as an optimal initializer in absence of further information about the correct model parameters, providing an approximate bound on the log-likelihood."
      ]
    },
    {
      "heading": "1. Introduction",
      "text": [
        "Probabilistic context-free grammars are an essential ingredient in many natural language processing models (Charniak, 1997; Collins, 2003; Johnson et al., 2006; Cohen and Smith, 2009, inter alia).",
        "Various algorithms for training such models have been proposed, including unsupervised methods.",
        "Many of these are based on the expectation-maximization (EM) algorithm.",
        "There are alternatives to EM, and one such alternative is Viterbi EM, also called \"hard\" EM or \"sparse\" EM (Neal and Hinton, 1998).",
        "Instead of using the parameters (which are maintained in the algorithm's current state) to find the true posterior over the derivations, Viterbi EM algorithm uses a posterior focused on the Viterbi parse of those parameters.",
        "Viterbi EM and variants have been used in various settings in natural language processing (Yejin and Cardie, 2007; Wang et al., 2007; Goldwater and Johnson, 2005; DeNero and Klein, 2008; Spitkovsky et al., 2010).",
        "Viterbi EM can be understood as a coordinate ascent procedure that locally optimizes a function; we call this optimization goal \"Viterbi training.\"",
        "In this paper, we explore Viterbi training for probabilistic context-free grammars.",
        "We first show that under the assumption that P = NP, solving and even approximating the Viterbi training problem is hard.",
        "This result holds even for hidden Markov models.",
        "We extend the main hardness result to the EM algorithm (giving an alternative proof to this known result), as well as the problem of conditional Viterbi training.",
        "We then describe a \"competitiveness\" result for uniform initialization of Viterbi EM: we show that initialization of the trees in an E-step which uses uniform distributions over the trees is optimal with respect to a certain approximate bound.",
        "The rest of this paper is organized as follows.",
        "§2 gives background on PCFGs and introduces some notation.",
        "§3 explains Viterbi training, the declarative form of Viterbi EM.",
        "§4 describes a hardness result for Viterbi training.",
        "§5 extends this result to a hardness result of approximation and §6 further extends these results for other cases.",
        "§7 describes the advantages in using uniform-at-random initialization for Viterbi training.",
        "We relate these results to work on the k-means problem in §8."
      ]
    },
    {
      "heading": "2. Background and Notation",
      "text": [
        "We assume familiarity with probabilistic context-free grammars (PCFGs).",
        "A PCFG G consists of:",
        "• A finite set of nonterminal symbols N;",
        "• A finite set of terminal symbols E;",
        "• For each A g N, a set of rewrite rules R(A) of the form A – a, where a g (N u E)*, and R = Uaen R(A);",
        "• For each rule A – a, a probability #a^«.",
        "The collection of probabilities is denoted 6, and they are constrained such that:",
        "That is, 6 is grouped into |N| multinomial distributions.",
        "Under the PCFG, the joint probability of a string x G E* and a grammatical derivation z is where /a – a(z) is a function that \"counts\" the number of times the rule A – a appears in the derivation z.",
        "/a(z) will similarly denote the number of times that nonterminal A appears in z.",
        "Given a sample of derivations z = {z\\,..., zn),",
        "We use the following notation for G:",
        "• L(G) is the set of all strings (sentences) x that can be generated using the grammar G (the \"language ofG\").",
        "• D(G) is the set of all possible derivations z that can be generated using the grammar G.",
        "• D(G, x) is the set of all possible derivations z that can be generated using the grammar G and have the yield x."
      ]
    },
    {
      "heading": "3. Viterbi Training",
      "text": [
        "Viterbi EM, or \"hard\" EM, is an unsupervised learning algorithm, used in NLP in various settings (Yejin and Cardie, 2007; Wang et al., 2007;",
        "Goldwater and Johnson, 2005; DeNero and Klein, 2008; Spitkovsky et al., 2010).",
        "In the context of PCFGs, it aims to select parameters 6 and phrase-structure trees z jointly.",
        "It does so by iteratively updating a state consisting of (6, z).",
        "The state is initialized with some value, then the algorithm alternates between (i) a \"hard\" E-step, where the strings xl , .",
        ".",
        ".",
        ", xn are parsed according to a current, fixed 6, giving new values for z, and (ii) an M-step, where the 6 are selected to maximize likelihood, with z fixed.",
        "With PCFGs, the E-step requires running an algorithm such as (probabilistic) CKY or Earley's algorithm, while the M-step normalizes frequency counts Fa – a(z) to obtain the maximum likelihood estimate's closed-form solution.",
        "We can understand Viterbi EM as a coordinate ascent procedure that approximates the solution to the following declarative problem:",
        "Problem 1.",
        "ViterbiTrain Input: G context-free grammar, x1,...,xn training instances from L(G) Output: 6 and z1,...,zn such that",
        "The optimization problem in Eq.",
        "4 is non-convex and, as we will show in §4, hard to optimize.",
        "Therefore it is necessary to resort to approximate algorithms like Viterbi EM.",
        "Neal and Hinton (1998) use the term \"sparse EM\" to refer to a version of the EM algorithm where the E-step finds the modes of hidden variables (rather than marginals as in standard EM).",
        "Viterbi EM is a variant of this, where the E-step finds the mode for each xi's derivation, argmaxzeD(G,xi) p(xi,z | ).",
        "We will refer to as \"the objective function of ViterbiTrain.\"",
        "Viterbi training and Viterbi EM are closely related to self-training, an important concept in semi-supervised NLP (Charniak, 1997; McClosky training, the model is learned with some seed annotated data, and then iterates by labeling new, unannotated data and adding it to the original annotated training set.",
        "McClosky et al.",
        "consider self-training to be \"one round of Viterbi EM\" with supervised initialization using labeled seed data.",
        "We refer the reader to Abney (2007) for more details."
      ]
    },
    {
      "heading": "4. Hardness of Viterbi Training",
      "text": [
        "We now describe hardness results for Problem 1.",
        "We first note that the following problem is known to be NP-hard, and in fact, NP-complete (Sipser, Input: A formula <fi = f\\m=1 (ai V bi V ci) in conjunctive normal form, such that each clause has 3",
        "Figure 1: An example of a Viterbi parse tree which represents a satisfying assignment for 0 = (Y1 V Y2 V Y4) A (Yl V Y2 V Ys).",
        "In 0^, all rules appearing in the parse tree have probability 1.",
        "The extracted assignment would be Y1 = 0, Y2 = 1, Y3 = 1, Y4 = 0.",
        "Note that there is no usage of two different rules for a single nonterminal.",
        "literals.",
        "Output: 1 if there is a satisfying assignment for << and 0 otherwise.",
        "We now describe a reduction of 3-SAT to Problem 1.",
        "Given an instance of the 3-SAT problem, the reduction will, in polynomial time, create a grammar and a single string such that solving the ViterbiTrain problem for this grammar and string will yield a solution for the instance of the 3-SAT problem.",
        "Let << = Am=i (ai V bi V ci) be an instance of the 3-SAT problem, where ai, bi and ci are literals over the set of variables {Yi,..., YN } (a literal refers to a variable Yj or its negation, Y).",
        "Let Cj be the jth clause in <<, such that Cj = aj V bj V Cj.",
        "We define the following context-free grammar and string to parse s^:"
      ]
    },
    {
      "heading": "1.. The terminals of are the binary digits E =",
      "text": [
        "{0,1}.",
        "2.",
        "We create N nonterminals Vyr, r G {1,..., N} and rules Vyr – 0 and Vyr – 1.",
        "3.",
        "We create N nonterminals Vyr, r G {1,..., N} and rules Vyr – 0 and Vy – 1.",
        "4.",
        "We create Uyr,i – VyrVy and Uyr,0 – ",
        "5.",
        "We create the rule S^1 – Ai.",
        "For each j G {2,..., m}, we create a rule S<j)j – S<j)j_1 Aj where S<f>j is a new nonterminal indexed by <<j – Aj=i Ci and Aj is also a new nonterminal indexed by j G { 1 , .",
        ".",
        ".",
        ", m} .",
        "6.",
        "Let Cj = aj V bj V Cj be clause j in < .",
        "Let Y(aj) be the variable that aj mentions.",
        "Let (yi,y2,y3) be a satisfying assignment for Cj where yk G {0,1} and is the value of Y (aj ), Y (bj ) and Y (cj ) respectively for k G {1,2,3}.",
        "For each such clause-satisfying assignment, we add the rule:",
        "For each Aj, we would have at most 7 rules of that form, since one rule will be logically inconsistent with aj V bj V Cj.",
        "7.",
        "The grammar's start symbol is S^n.",
        "8.",
        "The string to parse is s<f, = (10)3m, i.e. 3m consecutive occurrences of the string 10.",
        "A parse of the string s<f, using will be used to get an assignment by setting Yr =0 if the rule Vyr – 0 or Vyr – 1 are used in the derivation of the parse tree, and 1 otherwise.",
        "Notice that at this point we do not exclude \"contradictions\" coming from the parse tree, such as V s – 0 used in the tree together with Vy3 – 1 or Vy3 – 0.",
        "The following lemma gives a condition under which the assignment is consistent (so contradictions do not occur in the parse tree):",
        "Lemma 1.",
        "Let <fi be an instance of the 3-SAT problem, and let be a probabilistic CFG based on the above grammar with weights 6^.",
        "If the (multiplicative) weight of the Viterbi parse of is 1 , then the assignment extracted from the parse tree is consistent.",
        "Proof.",
        "Since the probability of the Viterbi parse is 1, all rules of the form {Vyr, Vy.}",
        " – {0,1} which appear in the parse tree have probability 1 as well.",
        "There are two possible types of inconsistencies.",
        "We show that neither exists in the Viterbi parse:",
        "1 0",
        "1",
        "0",
        "Vy2",
        "1",
        "0",
        "1",
        "0",
        "1.",
        "For any r, an appearance of both rules of the form V r – 0 and V r – 1 cannot occur because all rules that appear in the Viterbi parse tree have probability 1.",
        "2.",
        "For any r, an appearance of rules of the form Vyr – 1 and Vyr – 1 cannot occur, because whenever we have an appearance of the rule V r – 0, we have an adjacent appearance of the rule Vyr – 1 (because we parse substrings of the form 10), and then again we use the fact that all rules in the parse tree have probability 1.",
        "The case of Vyr – 0 and Vyr – 0 is handled analogously.",
        "Thus, both possible inconsistencies are ruled out, resulting in a consistent assignment.",
        "□ Lemma 2.",
        "Define <fi, as before.",
        "There exists 6^ such that the Viterbi parse of is 1 if and only if <fi is satisfiable.",
        "Moreover, the satisfying assignment is the one extracted from the parse tree with weight 1 of under 6^.",
        "Proof.",
        "(=>) Assume that there is a satisfying assignment.",
        "Each clause Cj = aj V bj V Cj is satisfied using a tuple (yi,y2,y3) which assigns value for Y (aj ), Y (bj ) and Y (cj ).",
        "This assignment corresponds the following rule",
        "Set its probability to 1, and set all other rules of Aj to 0.",
        "In addition, for each r, if Yr = y, set the probabilities of the rules Vyr – y and Vyr – 1 – y to 1 and Vyr – y and Vyr – 1 – y to 0.",
        "The rest of the weights for S^j – S^j_1 Aj are set to 1.",
        "This assignment of rule probabilities results in a Viterbi parse of weight 1.",
        "Assume that the Viterbi parse has probability 1.",
        "From Lemma 1, we know that we can extract a consistent assignment from the Viterbi parse.",
        "In addition, for each clause Cj we have a rule that is assigned probability 1, for some (yi,y2,y3).",
        "One can verify that (yi,y2,y3) are the values of the assignment for the corresponding variables in clause Cj, and that they satisfy this clause.",
        "This means that each clause is satisfied by the assignment we extracted.",
        "□",
        "In order to show an NP-hardness result, we need to \"convert\" ViterbiTrain to a decision problem.",
        "The natural way to do it, following Lemmas 1 and 2, is to state the decision problem for Viter-biTrain as \"given G and xi, .",
        ".",
        ".",
        ", xn and a > 0, is the optimized value of the objective function L(6, z) > a?\"",
        "and use a = 1 together with Lemmas 1 and 2.",
        "(Naturally, an algorithm for solving ViterbiTrain can easily be used to solve its decision problem.)",
        "Theorem 3.",
        "The decision version ofthe Viterbi-Train problem is NP-hard."
      ]
    },
    {
      "heading": "5. Hardness of Approximation",
      "text": [
        "A natural path of exploration following the hardness result we showed is determining whether an approximation of ViterbiTrain is also hard.",
        "Perhaps there is an efficient approximation algorithm for ViterbiTrain we could use instead of coordinate ascent algorithms such as Viterbi EM.",
        "Recall that such algorithms' main guarantee is identifying a local maximum; we know nothing about how far it will be from the global maximum.",
        "We next show that approximating the objective function of ViterbiTrain with a constant factor of p is hard for any p G (^, 1] (i.e., 1/2 + e approximation is hard for any e < 1/2).",
        "This means that, under the P = NP assumption, there is no efficient algorithm that, given a grammar G and a sample of sentences xi,..., xn, returns 6' and z' such that:",
        "We will continue to use the same reduction from §4.",
        "Let be the string from that reduction, and let (6, z) be the optimal solution for ViterbiTrain given and s^.",
        "We first note that if p(s^, z | 6) < 1 (implying that there is no satisfying assignment), then there must be a nonterminal which appears along with two different rules in z.",
        "This means that we have a nonterminal B G N with some rule B – a that appears k times, while the nonterminal appears in the parse r > k + 1 times.",
        "Given the tree z, the 6 that maximizes the objective function is the maximum likelihood estimate (MLE) for z (counting and normalizing the rules).",
        "We therefore know that the ViterbiTrain objective function, L(6, z), is at because it includes a factor equal where /b(z) is the number of times nonterminal B appears in z (hence /b (z) = r) and /b – a(z) is the number of times B – a appears in z (hence /b – a(z) = k).",
        "For any k > 1 , r > k + 1 :",
        "This means that if the value of the objective function of ViterbiTrain is not 1 using the reduction from §4, then it is at most 2.",
        "If we had an efficient approximate algorithm with approximation coefficient p > 2 (Eq.",
        "9 holds), then in order to solve 3-SAT for formula < , we could run the algorithm on G<< and s<< and check whether the assignment to (6, z) that the algorithm returns satisfies << or not, and return our response accordingly.",
        "If << were satisfiable, then the true maximal value of L would be 1, and the approximation algorithm would return (6, z) such that L(6, z) > p > 2. z would have to correspond to a satisfying assignment, and in fact p(z | 6) = 1, because in any other case, the probability of a derivation which does not represent a satisfying assignment is smaller than 2.",
        "If << were not satisfiable, then the approximation algorithm would never return a ( 6, z) that results in a satisfying assignment (because such a (6, z) does not exist).",
        "The conclusion is that an efficient algorithm for approximating the objective function of Viterbi-Train (Eq.",
        "4) within a factor of ^ + e is unlikely to exist.",
        "If there were such an algorithm, we could use it to solve 3-SAT using the reduction from §4."
      ]
    },
    {
      "heading": "6. Extensions of the Hardness Result",
      "text": [
        "An alternative problem to Problem 1, a variant of Viterbi-training, is the following (see, for example, Klein and Manning, 2001):",
        "Problem 3.",
        "ConditionalViterbiTrain Input: G context-free grammar, xi,..., xn training instances from L(G) Output: 6 and zi,..., zn such that",
        "Here, instead of maximizing the likelihood, we maximize the conditional likelihood.",
        "Note that there is a hidden assumption in this problem definition, that xi can be parsed using the grammar G. Otherwise, the quantity p(zi | 6, xi) is not well-defined.",
        "We can extend ConditionalViterbiTrain to return _L in the case of not having a parse for one of the xi – this can be efficiently checked using a run of a cubic-time parser on each of the strings xi with the grammar G.",
        "An approximate technique for this problem is similar to Viterbi EM, only modifying the M-step to maximize the conditional, rather than joint, likelihood.",
        "This new M-step will not have a closed form and may require auxiliary optimization techniques like gradient ascent.",
        "Our hardness result for ViterbiTrain applies to ConditionalViterbiTrain as well.",
        "The reason is that if p(z, s<< | 6<<) = 1 for a << with a satisfying assignment, then L(G) = {s<<} and D(G) = {z}.",
        "This implies that p(z | 6<<, s<<) = 1.",
        "If << is unsat-isfiable, then for the optimal 6 of ViterbiTrain we have z and z' such that 0 < p(z, s<< | 6<<) < 1 and 0 < p(z', s<< | 6<<) < 1, and therefore p(z | 6<£, s^) < 1, which means the conditional objective function will not obtain the value 1.",
        "(Note that there always exist some parameters 6< that generate s< .)",
        "So, again, given an algorithm for ConditionalViterbiTrain, we can discern between a satisfiable formula and an unsatisfiable formula, using the reduction from §4 with the given algorithm, and identify whether the value of the objective function is 1 or strictly less than 1.",
        "We get the result that:",
        "Theorem 4.",
        "The decision problem ofCondition-alViterbiTrain problem isNP-hard.",
        "where the decision problem of ConditionalViter-biTrain is defined analogously to the decision problem of ViterbiTrain.",
        "We can similarly show that finding the global maximum of the marginalized likelihood:",
        "is NP-hard.",
        "The reasoning follows.",
        "Using the reduction from before, if << is satisfiable, then Eq.",
        "12 gets value 0.",
        "If << is unsatisfiable, then we would still get value 0 only if L(G) = {s< }.",
        "If G<< generates a single derivation for (10)3m, then we actually do have a satisfying assignment from",
        "Lemma 1.",
        "Otherwise (more than a single derivation), the optimal 6 would have to give fractional probabilities to rules of the form V r – {0, 1} (or Vyr – {0,1}).",
        "In that case, it is no longer true that (10)3m is the only generated sentence, which is a contradiction.",
        "The quantity in Eq.",
        "12 can be maximized approximately using algorithms like EM, so this gives a hardness result for optimizing the objective function of EM for PCFGs.",
        "Day (1983) previously showed that maximizing the marginalized likelihood for hidden Markov models is NP-hard.",
        "We note that the grammar we use for all of our results is not recursive.",
        "Therefore, we can encode this grammar as a hidden Markov model, strengthening our result from PCFGs to HMMs."
      ]
    },
    {
      "heading": "7. Uniform-at-Random Initialization",
      "text": [
        "In the previous sections, we showed that solving Viterbi training is hard, and therefore requires an approximation algorithm.",
        "Viterbi EM, which is an example of such algorithm, is dependent on an initialization of either 6 to start with an E-step or z to start with an M-step.",
        "In the absence of a better-informed initializer, it is reasonable to initialize z using a uniform distribution over D(G, xi) for each i.",
        "If D(G, xi) is finite, it can be done efficiently by setting 6 = 1 (ignoring the normalization constraint), running the inside algorithm, and sampling from the (unnormalized) posterior given by the chart (Johnson et al., 2007).",
        "We turn next to an analysis of this initialization technique that suggests it is well-motivated.",
        "The sketch of our result is as follows: we first give an asymptotic upper bound for the log-likelihood of derivations and sentences.",
        "This bound, which has an information-theoretic interpretation, depends on a parameter A, which depends on the distribution from which the derivations were chosen.",
        "We then show that this bound is minimized when we pick A such that this distribution is (conditioned on the sentence) a uniform distribution over derivations.",
        "Let q(x) be any distribution over L(G) and 6 some parameters for G. Let /(z) be some feature function (such as the one that counts the number of appearances of a certain rule in a derivation), and then:",
        "x€L(G) z€D(G,x) We thank an anonymous reviewer for pointing this out.",
        "whichgives the expected value ofthe feature function /(z) under the distribution q(x) x p(z | 6, x).",
        "We will make the following assumption about G:",
        "Condition 1.",
        "There exists some 6j such that Vx G L(G),Vz G D(G,x), p(z | 6/,x) = 1/|D(G,x)|.",
        "This condition is satisfied, for example, when G is in Chomsky normal form and for all A, A' G N, |R(A)| = |R(A')|.",
        "Then, if we set Ba-* = 1/| R(A)| , we get that all derivations of x will have the same number of rules and hence the same probability.",
        "This condition does not hold for grammars with unary cycles because | D(G, x)| may be infinite for some derivations.",
        "Such grammars are not commonly used in NLP.",
        "Let us assume that some \"correct\" parameters 6* exist, and that our data were drawn from a distribution parametrized by 6*.",
        "The goal of this section is to motivate the following initialization for 6, which we call Uniformlnit:",
        "1.",
        "Initialize z by sampling from the uniform distribution over D(G, xi) for each xi.",
        "2.",
        "Update the grammar parameters using maximum likelihood estimation.",
        "To show our result, we require first the following definition due to Freund et al.",
        "(1997):",
        "Definition 5.",
        "A distribution pi is within A > 1 of a distribution p2 if for every event A, we have",
        "For any feature function /(z) and any two sets of parameters 62 and 6i for G and for any marginal q(x), if p(z | 6i,x) is within A of ( z | 6 2 , x) for all x then:",
        "Let 60 be a set ofparameters such that we perform the following procedure in initializing Viterbi EM: first, we sample from the posterior distribution p(z | 60, x), and then update the parameters with maximum likelihood estimate, in a regular M-step.",
        "Let A be such that p(z | 60,x) is within A of p(z | 6*,x) (for all x G L(G)).",
        "(Later we will show that UniformInit is a wise choice for making A small.",
        "Note that UniformInit is equivalent to the procedure mentioned above with 60 = 6/.)",
        "Consider pn(x), the empirical distribution over xi,..., xn.",
        "As n – to, we have that pn(x) – p*(x), almost surely, where p* is:",
        "We also know that for 60, from the consistency of MLE, for large enough samples:",
        "which means that we have the following as n grows (starting from the ViterbiTrain objective with initial state z = z0):",
        "n /EPn,ep",
        "We next use the fact that pn(x) œ p*(x) for large n, and apply Eq.",
        "14, noting again our assumption that p(z | 60, x) is within A of p(z | 6*, x).",
        "We also let B = | zi| , where | zi| is the number of nodes in the derivation zi.",
        "Note that FA(zi) < B.",
        "The above quantity (Eq.",
        "20) is approximately bounded above by",
        "Ep*,eo[fA^al .",
        ".",
        "where Eq.",
        "24 is the result of FA(z0) < B.",
        "For two series {an} and {bn}, let \"an « bn\" denote that limn – 00 an > limn – 00 bn.",
        "In other words, an is asymptotically larger than bn.",
        "Then, if we changed the representation of the objective function of the ViterbiTrain problem to log-likelihood, for 6' that maximizes Eq.",
        "18 (with some simple algebra) we have:",
        "is the entropy of the multinomial for nonterminal A. H(6*, A) can be thought of as the minimal number of bits required to encode a choice of a rule from A, if chosen independently from the other rules.",
        "All together, the quantity jN^ (XAeNH(6*,A)) is the average number of bits required to encode a tree in our sample using",
        "6*, while removing dependence among all rules and assuming that each node at the tree is chosen uniformly.",
        "This means that the log-likelihood, for large n, is bounded from above by a linear function of the (average) number of bits required to optimally encode n trees of total size B, while assuming independence among the rules in a tree.",
        "We note that the quantity B/n will tend toward the average size of a tree, which, under Condition 1, must be finite.",
        "Our final approximate bound from Eq.",
        "28 relates the choice of distribution, from which sample z0, to A.",
        "The lower bound in Eq.",
        "28 is a monotone-decreasing function of .",
        "We seek to make as small as possible to make the bound tight.",
        "We next show that the uniform distribution optimizes in that sense.",
        "Note that the optimal choice of , for a single x and for candidate initializer 6', is",
        "In order to avoid degenerate cases, we will add another condition on the true model, 6 :",
        "Condition 2.",
        "There exists t > 0 such that, for any x G L(G) and for any z G D(G, x), p(z | 6*,x) > t.",
        "This is a strong condition, forcing the cardinality of D(G) to be finite, but it is not unreasonable if natural language sentences are effectively bounded in length.",
        "Without further information about 6 (other than that it satisfies Condition 2), we may want to consider the worst-case scenario of possible , hence we seek initializer 60 such that and hence A opt(x, 6*; 6') > /xx/t, so A(x; 6') > /xx/t.",
        "So, to optimize for the worst-case scenario over true distributions with respect to , we are motivated to choose 60 = 6/ as defined in Condition 1.",
        "Indeed, UniformInit uses 6/ to initialize the state of Viterbi EM.",
        "We note that if 6/ was known for a specific grammar, then we could have used it as a direct initializer.",
        "However, Condition 1 only guarantees its existence, and does not give a practical way to identify it.",
        "In general, as mentioned above, 6 = 1 can be used to obtain a weighted CFG that satisfies p(z | 6,x) = 1/|D(G, x)|.",
        "Since we require a uniform posterior distribution, the number of derivations of a fixed length is finite.",
        "This means that we can converted the weighted CFG with 6 = 1 to a PCFG with the same posterior (Smith and Johnson, 2007), and identify the appropriate 6/."
      ]
    },
    {
      "heading": "8. Related Work",
      "text": [
        "Viterbi training is closely related to the k-means clustering problem, where the objective is to find k centroids for a given set of d-dimensional points such that the sum of distances between the points and the closest centroid is minimized.",
        "The analog for Viterbi EM for the k-means problem is the k-means clustering algorithm (Lloyd, 1982), a coordinate ascent algorithm for solving the k-means problem.",
        "It works by iterating between an E-like-step, in which each point is assigned the closest centroid, and an M-like-step, in which the centroids are set to be the center of each cluster.",
        "\"k\" in k-means corresponds, in a sense, to the size of our grammar.",
        "k-means has been shown to be NP-hard both when k varies and d is fixed and when d varies and k is fixed (Aloise et al., 2009; Mahajan et al., 2009).",
        "An open problem relating to our hardness result would be whether ViterbiTrain (or ConditionalViterbiTrain) is hard even if we do not permit grammars of arbitrarily large size, or at least, constrain the number of rules that do not rewrite to terminals (in our current reduction, the size of the grammar grows as the size of the 3-SAT formula grows).",
        "On a related note to §7, Arthur and Vassilvit-skii (2007) described a greedy initialization algorithm for initializing the centroids of k-means, called k-means++.",
        "They show that their initialization is O(log k)-competitive; i.e., it approximates the optimal clusters assignment by a factor of O(logk).",
        "In §7.1, we showed that uniform-at-random initialization is approximately O(|N|LA/n)-competitive (modulo an additive constant) for CNF grammars, where n is the number of sentences, L is the total length of sentences and is a measure for distance between the true distribution and the uniform distribution.",
        "Many combinatorial problems in NLP involving phrase-structure trees, alignments, and dependency graphs are hard (Sima'an, 1996; Goodman, 1998; Knight, 1999; Casacuberta and de la Higuera, 2000; Lyngs0 and Pederson, 2002; Udupa and Maji, 2006; McDonald and Satta, special relevance to this paper is Abe and Warmuth (1992), who showed that the problem of finding maximum likelihood model of probabilistic automata is hard even for a single string and an automaton with two states.",
        "Understanding the complexity of NLP problems, we believe, is crucial as we seek effective practical approximations when necessary."
      ]
    },
    {
      "heading": "9. Conclusion",
      "text": [
        "We described some properties of Viterbi training for probabilistic context-free grammars.",
        "We showed that Viterbi training is NP-hard and, in fact, NP-hard to approximate.",
        "We gave motivation for uniform-at-random initialization for derivations in the Viterbi EM algorithm."
      ]
    },
    {
      "heading": "Acknowledgments",
      "text": [
        "We acknowledge helpful comments by the anonymous reviewers.",
        "This research was supported by",
        "N. Abe and M. Warmuth.",
        "1992.",
        "On the computational complexity of approximating distributions by probabilistic automata.",
        "Machine Learning, 9(2-3):205-260.",
        "S. Abney.",
        "2007.",
        "Semisupervised Learning for Computational Linguistics.",
        "CRC Press.",
        "D. Aloise, A. Deshpande, P. Hansen, and P. Popat.",
        "2009.",
        "NP-hardness of Euclidean sum-of-squares clustering.",
        "Machine Learning, 75(2):245-248.",
        "D. Arthur and S. Vassilvitskii.",
        "2007. k-means++: The advantages of careful seeding.",
        "In Proc.",
        "ofACM-SIAM symposium on Discrete Algorithms.",
        "F. Casacuberta and C. de la Higuera.",
        "2000.",
        "Computational complexity of problems on probabilistic grammars and transducers.",
        "In Proc.",
        "ofICGI.",
        "E. Charniak.",
        "1997.",
        "Statistical parsing with a context-free grammar and word statistics.",
        "In Proc.",
        "ofAAAI.",
        "S. B. Cohen and N. A. Smith.",
        "2009.",
        "Shared logistic normal distributions for soft parameter tying in unsupervised grammar induction.",
        "In Proc.",
        "ofHLT-NAACL.",
        "M. Collins.",
        "2003.",
        "Head-driven statistical models for natural language processing.",
        "Computational Linguistics, 29(4):589-637.",
        "W. H. E. Day.",
        "1983.",
        "Computationally difficult parsimony problems in phylogenetic systematics.",
        "Journal ofTheoretical Biology, 103.",
        "J. DeNero and D. Klein.",
        "2008.",
        "The complexity of phrase alignment problems.",
        "In Proc.",
        "ofACL.",
        "Y. Freund, H. Seung, E. Shamir, and N. Tishby.",
        "1997.",
        "Selective sampling using the query by committee algorithm.",
        "Machine Learning, 28(2-3):133-168.",
        "S. Goldwater and M. Johnson.",
        "2005.",
        "Bias in learning syllable structure.",
        "In Proc.",
        "ofCoNLL.",
        "J. Goodman.",
        "1998.",
        "Parsing Inside-Out.",
        "Ph.D. thesis, Harvard University.",
        "U. Grenander.",
        "1967.",
        "Syntax-controlled probabilities.",
        "Technical report, Brown University, Division of Applied Mathematics.",
        "M. Johnson, T. L. Griffiths, and S. Goldwater.",
        "2006.",
        "Adaptor grammars: A framework for specifying compositional nonparameteric Bayesian models.",
        "In Advances in NIPS.",
        "M. Johnson, T. L. Griffiths, and S. Goldwater.",
        "2007.",
        "Bayesian inference for PCFGs via Markov chain",
        "Monte Carlo.",
        "In Proc.",
        "ofNAACL.",
        "D. Klein and C. Manning.",
        "2001.",
        "Natural language grammar induction using a constituent-context model.",
        "In Advances in NIPS.",
        "K. Knight.",
        "1999.",
        "Decoding complexity in word-replacement translation models.",
        "Computational Linguistics, 25(4):607-615.",
        "S. P. Lloyd.",
        "1982.",
        "Least squares quantization in PCM.",
        "In IEEE Transactions on Information Theory.",
        "R. B. Lyngs0 and C. N. S. Pederson.",
        "2002.",
        "The consensus string problem and the complexity of comparing hidden Markov models.",
        "Journal ofComput-ing and System Science, 65(3):545-569.",
        "M. Mahajan, P. Nimbhorkar, and K. Varadarajan.",
        "2009.",
        "The planar k-means problem is NP-hard.",
        "In Proc.",
        "of International Workshop on Algorithms and Computation.",
        "D. McClosky, E. Charniak, and M. Johnson.",
        "2006a.",
        "Effective self-training for parsing.",
        "In Proc.",
        "ofHLT- NAACL.",
        "D. McClosky, E. Charniak, and M. Johnson.",
        "2006b.",
        "Reranking and self-training for parser adaptation.",
        "In Proc.",
        "of COLING-ACL.",
        "R. McDonald and G. Satta.",
        "2007.",
        "On the complexity of non-projective data-driven dependency parsing.",
        "In Proc.",
        "ofIWPT.",
        "R. M. Neal and G. E. Hinton.",
        "1998.",
        "A view of the",
        "EM algorithm that justifies incremental, sparse, and other variants.",
        "In Learning and Graphical Models, pages 355-368.",
        "Kluwer Academic Publishers.",
        "K. Sima'an.",
        "1996.",
        "Computational complexity of probabilistic disambiguation by means of tree-grammars.",
        "In In Proc.",
        "ofCOLING.",
        "M. Sipser.",
        "2006.",
        "Introduction to the Theory ofCom-putation, Second Edition.",
        "Thomson Course Technology.",
        "N. A. Smith and M. Johnson.",
        "2007.",
        "Weighted and probabilistic context-free grammars are equally expressive.",
        "Computational Linguistics, 33(4):477491.",
        "V. I. Spitkovsky, H. Alshawi, D. Jurafsky, and C. D. Manning.",
        "2010.",
        "Viterbi training improves unsupervised dependency parsing.",
        "In Proc.",
        "ofCoNLL.",
        "R. Udupa and K. Maji.",
        "2006.",
        "Computational complexity of statistical machine translation.",
        "In Proc.",
        "of EACL.",
        "is the Jeopardy model?",
        "a quasi-synchronous grammar for question answering.",
        "In Proc.",
        "ofEMNLP.",
        "C. Yejin and C. Cardie.",
        "2007.",
        "Structured local training and biased potential functions for conditional random fields with application to coreference resolution.",
        "In Proc.",
        "ofHLT-NAACL."
      ]
    }
  ]
}
