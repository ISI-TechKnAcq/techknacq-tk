{
  "info": {
    "authors": [
      "Christoph Beierle",
      "Udo Pletat"
    ],
    "book": "International Conference on Computational Linguistics",
    "id": "acl-C88-1009",
    "title": "Feature Graphs and Abstract Data Types: A Unifying Approach",
    "url": "https://aclweb.org/anthology/C88-1009",
    "year": 1988
  },
  "references": [
    "acl-P84-1027",
    "acl-P86-1038"
  ],
  "sections": [
    {
      "text": [
        "First we introduce a notation!",
        "A term f(..(f,(t))...)T, ([xi) with I; 8 TA[x}),,,,,,f,E Features(X), and n le!",
        "0 will be written as p(t) where p = f,..f, e Features(X)*.",
        "Note that thenotation f,(..,(f.,(t))...) reflects tho.",
        "usual mathematical notation for function composition, whereasthe path notation employedfor feature graphs as sketchedSection 2 uses the reverse order Let SP =E> be a eg-specification.",
        "A <X, E>.-algebra A is constant consistent iff for all a, b 8 Atoms(X) with a 4: b we have:",
        "for all p, q t Features(X).",
        "1 lere exists an element o r A,o, with: (q.",
        "(1.",
        "(0)))q.",
        "(1.",
        "(0)) SP is constant consistent, constant/complex consistent, or acyclic iff there is at least one model of SP having the respective property.",
        "The above definition of consistency of a fg-specifieation SP suggests that one has to search through the entire class of models of Si' in order to determine whether SP is consistent or not.",
        "The following theorem shows the power of initial models in the sense of shrinking the search space: only the initial model has to be considered.",
        "Theorem: TheDIspecification SP is constant consistent, constant/complex consistent, or acyclic iff the initial.",
        "algebra T has the respective property.",
        "The above properties can be proven for the initial model by using the deductive closure E* of a set of equations E. Theorem: Theinitialalgebra Tof the fg-specification SP is constant consistent iff for all a, 1) e Atoms(X) with ab we have:a = b E* constant/complex consistent iff for all a, 11 r Atoms(X) and all pi, p2, qFeatures(X).",
        "we have",
        "The equivalences established by these two theorems show us that the consistency of a fg-specification E> can be tested by inspecting the deductive closure E* for the absence of certain equations, depending on which consistency aspects one is interested in.",
        "Since E* may be too large for performing these tests efficiently it would be desirable to be able to perform the consistency tests on E only.",
        "In the next section we develop a completion procedure for the set of equations F which transforms E into a normalized set E' such that it is sufficient to check E'.",
        "The completion.",
        "procedure thus provides a simple and fast decision procedure for our consistency constraints.",
        "5.",
        "The completion procedure Our completion procedure is a variant of the Knuth-Bendix algorithm ([KB 70]) which is a well-known method for testing properties of rewrite rule systems and for transforming equations into a set of rewrite rules, which then constitute a decision procedure for the equality.",
        "In general, there are some problems with the Knuth-Bendix algorithm: It may not terminate, or it may terminate with failure.",
        "However, we can show that due to the restricted form of equations these problems do not occur when dealing with fg-specifications.",
        "We first define an order relation IC, on the set L(fx)) of terms over an fg-signature Y.",
        "We assume that ATOMS (reap.",
        "FEATURES) is linearly ordered by .---AT.EA (reap.",
        "'51,EATURFE).",
        "Then we order T,(fx]) using the lexicographic ordering induced by .-ATOME and 5FEATURES: Let a, b e ATOMS, f g, e FEATURES, and t eT,(1x]).",
        "wa T bif a <,,,, b a <, f1 (t) t <, f, (t) <, ge(...(g,(t))...) if fl <FEATURES gl 5, is the reflexive and transitive closure of <,.",
        "Let SP = <Z,E> be a fg-specification.",
        "We assume that E does not contain any trivial.",
        "equations of the form t = t (otherwise we can just eliminate such equations from E).",
        "Lemma: For all 1 =reEwe have either 1r or /<, 1.",
        "Thus, without loss of generality, we assume that r < 1 for all 1rE (otherwise we can just exchange the lefthand and the righthand side of the equation).",
        "We call E a directed set of equations and we may write I.",
        "-> r instead of 1 = r.",
        "become a popular field of research.",
        "The subject has attracted the interest not only of (computer) linguists but also of computer scientists, especially in the area of logic programming, see e.g. [Pe 871.",
        "Due to the formality of grammars we also observe activities developing foundations for the formal semantics of various approaches on unification grammars, e.g. [PS 84], [KR 86], [PK 86], [Pe 87], [Jo 87].",
        "In this paper we investigate the relationship between feature graphs on the one hand and algebraic specifications of abstract data types (ADTs) on the other hand.",
        "There is a natural correlation between both these areas since a feature graph as well as an abstract data type defines a collection of objects together with functions relating the objects.",
        "We present a formal semantics for feature graphs by assigning to each feature graph G an equational ADT specification T(G), called fg-specification.",
        "This opens the rich world of mathematical foundations of ADT specifications (e.g [GTW 781, [EM 85]) in order to obtain a better - not only - formal understanding of the nature of feature graphs.",
        "In particular, we provide a model-theoretic characterization of various consistency conditions for feature graph specifications reflecting the consistency concepts usually imposed on feature graphs such as clash-freenessandacyclicity.These model-theoretic characterizations have proof-theoretic counterparts in terms of syntactic conditions on the deductive closure of the set of equations of T(G).",
        "Although the proof-theoretic consistency characterizations are of syntactic nature, a test of their validity requires to examine the deductive closure of the set of equations of a fg-specification.",
        "Our objective is to restrict consistency checks to equations explicitly mentioned in a fg-specification.",
        "In the ADT-world there is a well-known tool for such tasks: the Knuth-Bendix algorithm ([KB 70]).",
        "We present a Knuth-Bendix like completion procedure transforming any fg-specification into a reduced normal form.",
        "We show that the model-theoretic consistency characterizations for G are equivalent to the presence reap.",
        "absence of certain types of equations in this reduced normal form.",
        "These results are used for defining the semantics of the unification of two feature graphs G, and G, as the (set-theoretic componentwise) union of x(G1) and T(G,) followed by the normalization process using the completion algorithm and the consistency check on the resulting set of equations,",
        "syntactically different since CP(SP)) contains equations in a reduced normal form, the two graphs are equivalent in the sense of feature graph unification: they are unifiable with exactly the same feature graphs.",
        "Besides giving a basis for a simple consistency test and providing a normal form presentation for fg-specifications the completion procedure CF also provides the basis for a precise mathematical definition of feature graph unification.",
        "This is true regardless which consistency Concept for feature graphs one wants to apply, e.g. if one wants to allow cyclic graphs or only acyclic ones.",
        "Thus, let X-consistent be either \"constant consistent\", \"constant/complex consistent\", \"acyclic\", or any combination thereof.",
        "Let G, and G, be feature graphs."
      ]
    },
    {
      "heading": "7. Conclusions",
      "text": [
        "We have presented a mathematical semantics of feature graphs and feature graph unification in terms of ADT specifications.",
        "It supports various consistency concepts used for feature graphs.",
        "The important notion of partiality ([Pe 87]) in the sense that arbitrary new features may be unified into a feature graph is supported since any feature graph specification can be extended by arbitrary features, atoms, and equations; there exists no 'largest' feature graph specification (unless of course, one adds an artificial 'largest' element, e.g. as the $F$-specification in the STUF formalism as described in (BPU BS]).",
        "There are only constants (representing atomic values) and unary functions (representing the features) in the signature.",
        "We assume that ATOMS is the set of all atomic values and FEATURES is set of all features occuring in the feature graphs; both sets may be infinite in general.",
        "An equation s = t is given for paths having the same final node, or for paths ending at an atomic value.",
        "For instance, consider the feature graph Following e.g. Pereira and Shieber ([PS 84]) this feature graph can be described by the equations <f g > = < h > <g>a leaving the root symbol of the feature graph implicit and using the order for the attributes as in the examples of Section 2.",
        "However, in equational ADT specifications it is essential to state explicitly to which objects an equation can be applied.",
        "For simplicitly, we first assume that we have only one sort which we call 'universe', and that we have a variable x of sort 'universe'.",
        "By using a functional notation for the attributes and thus the reverse order of the attributes as compared to e.g. (PS 84], we would arrive at the specification sortsuniverse functionsa: -> universe f,g,h: universe -> universe equationsg(f(x)) = h(x) g(x) = a However, by simply introducing a universally quantified variable x of sort 'universe' we run into problems: From",
        "by using the usual rules of the equational calculus and substituting f(x) for x in equation (2).",
        "The problem is that x should be quantified only over all objects described by the original feature graph.",
        "But f(x) is not neccessarily in this set, so we must find a way of avoiding such a substitution.",
        "A simple way of achieving this is to switch to another signature with an additional sort, say 'soi', denoting the 'sort of interest' and comprising all objects described by a feature graph.",
        "The sort 'soi' is then a subsort of sort 'universe'.",
        "This could be expressed by extending the algebraic specifications to include also subsort relationships, thus moving from many-sorted specifications (as described in Section 3.1) to so-called order-sorted specifications (e.g. [GM 87]).",
        "Here, we want to stick to the simpler case of many-sorted specifications.",
        "A subsort relationship in a many-sorted setting is expressed by an inclusion function which we will denote by 1: soi -> universe in our case.",
        "In order to avoid problems with empty sorts ([GM 87], [EM 85]) we assume that there is a constant 'const' of sort 'soi'.",
        "For the rest of this paper we also assume that x is a variable of sort 'soi'.",
        "Thus, the feature graph above gives rise to the feature graph specification",
        "With the definitions aboveit shoud be obvious how to transform any feature graph G into a fg-specification t(C): The signature of t(G) contains all atoms and features occuring in 6 as constants reap.",
        "unary functions, and for any co-referring paths or any path ending with an atomic value there is an equation in t(G).",
        "Thus, we have a well-defined function T: Feature graphs -> fg-specifications making available the machinery that has been developed for algebraic specifications."
      ]
    },
    {
      "heading": "4. Consistency",
      "text": [
        "In [PS 841 the only inconsistency considered is an equation of the form a = b where a and b are distinct constants.",
        "Such a situation is called constant clash in [Pe 87] where additionally a constant L complex clash is considered.",
        "Such a clash is \"any set of two equations e, and e, in which e, equates some path p to some other path or atomic value and e, equates a strict prefix of p to a constant\" [Pe 871.",
        "Whereas [PS 84] also consider cyclic feature graphs, Kasper and Rounds ([KR 86]), some PATR-II implementations, and also the STUF formalism described in [Us 86], only allow for acyclic feature gralehs.",
        "We will show that the absence of cycles in a feature graph can also be expressed as a consistency condition on the corresponding fg-specification.",
        "Below we use the machinery of abstract data types in order to define several notions of semantical consistency for a feature graph.",
        "Another approachbringingtogetherinitial[PS84]Pereira,F.,Shieber,S.M.",
        ":The ADTspecificationsandfeaturegraphsis[RE86] semanticsofgrammarformalisms givenin [SA 87].It usesanorder-sorted[SA87] seen ascomputer languages.Proc.",
        "approachwhere the set of atoms and featuresCOLING-84, ACL,1984.",
        "must befixedinadvance,and where everyRounds,W.C.,Kasper,R.",
        ":A elementof a supersort must be in one of itscompletelogicalcalculusfor subsorts..Comparedtotheorder-sortedrecordstructuresrepresenting approach of[SA 87] a drawback oftheworklinguisticinformation.IEEE presented hereis the asymetric treatment ofSymposiumonLogicinComputer therootof a feature graph (giving rise toScience,1986.",
        "the'soisort)and the othernodes (beingSmolka,G.,Ait-Kaci,H.",
        "mappedtothe'universe'sort).WeareInheritance Hierarchies:Semantics currentlyextendingout workinordertoandUnification.MCCTechnical overcome this disadvantage ([BP88]).OtherReport AI-057-87,1987.",
        "areas offuturework are thetreatmentof",
        "where each value is either an atomic graph or again a complex one.",
        "Two paths starting at the root and ending at the same node are said to corefer.",
        "Feature graph unification is a binary operation taking two graphs and returning a graph containing exactly the information of both graphs if they are unifiable, and fails otherwise.",
        "An atomic graph is unifiable only with itself and the empty graph.",
        "A complex graph G, is unifiable with the empty graph, and G, is unifiable with a complex graph G, if for all features in both G, and 02 the respective values are unifiable.",
        "Several notations for feature graphs have been suggested.",
        "The graphical representation of"
      ]
    },
    {
      "heading": "NP",
      "text": [
        "could also be represented in matrix form: Inthe matrixnotation coreferenceis indicated by numbers enclosed in brackets.",
        "Another notation, which for instance is employed in PATR, uses special equations indicating coreference of paths and atomic values at the end of of paths, respectively:",
        "In thefollowingwe willdiscussan equationel representation of feature graphs in greater detail.",
        "This representation will be oriented towards the equational specificetion of abstract data types, thus making available the powerful machinery developed for such specifications.",
        "Above we did not make a clear distinction between the syntax for describing feature graphs and feature graphs as semantical objects.",
        "In fact, such a distinction has been omitted to a large extent in the literature.",
        "The situation changed with approaches that formalize the concepts of feature graphs since such a distinction is essential for a formal treatment (see e.g. [KR 86], [Jo 87]).",
        "In the area of ACT specifications the strict separation of the syntactic and the semantic level has always been a central aspect.",
        "Our ADT-based approach to feature graphs adopts this two-level view in a natural way: Feature graph specifications are the syntactical means to describe feature graphs which are the models (or structures) of such specifications."
      ]
    },
    {
      "heading": "3. Equational Specifications",
      "text": []
    },
    {
      "heading": "3.1 ADT Specifications: Syntax and Semantics",
      "text": [
        "We introduce the basic notions of abstract data type specifications.",
        "More detailed information can be gathered in [GTW 78] or [EM 85].",
        "A signature is a pair E = <S, 0> where S is a set of sorts and 0 = <0,, ,>, s*, , is a family of sets of operators w.r.t.",
        "S. We write op: s,...ss -> s for an operator whose i-th argument is of sort si and which delivers a result of sort s. The well-formed terms w.r.t.",
        "I and S-sorted variables V form an S-indexed family T, (V), and an equation over I and V is of the form 1 = r where 1 and r are terms of the same sort.",
        "An algebraic specification is a pair SP = <E, E> where is a signature and E is a set of equations over I and some family of variables V. Besides these syntactical concepts of ACT specifications we provide the basic semantical concepts of heterogenous algebras: Given a signature I = <S, 0>, a I-algebra A consists of a family of sets A = < A, >,s and for each operator op e 0,,there is a function op : A, ---> A,.",
        "A satisfies an equation 1 = r if for each assignment of values from A to the variables of 1 and r the evaluation of 1 and r in A yields the same element of A.",
        "A is a <E,E>-algebra if A satisfies every e e E. We saythat E semantically impliesan equation e if every <E,E>-algebra satisfies e. It is well-known that this model-theoretic notion of satisfaction coincides with the proof-theoretic notion of deduction (Birkhoff theorem) where e can be proved from E iff e can be deduced from E using the rules of the equational calculus (e.g. [EM 85]).",
        "We let E* denote the deductive closure of E. The following theorem is one of the central results of ADT theory and forms the basis for defining the semantics of a specification.",
        "Theorem: For each algebraic specification SP = <E, E> there is an initial algebra Ts, satisfying the equations in E. Ts, is the so-called quotient term algebra consisting of congruence classes - obtained by factorization according to the equations in E - of constant terms over E. The initial algebra T is the ADT specified by SP.",
        "It can be characterized informally by two conditions: all its elements are denoted by some ground term (\"no junk\"), and it satisfies a ground equation e iff every other <E,E>-algebra also satisfies e (\"no confusion\")."
      ]
    },
    {
      "heading": "3.2 Feature Graph Specifications",
      "text": [
        "Feature graphs can be seen as particular algebraic specifications (see also [Pe 87]):"
      ]
    }
  ]
}
