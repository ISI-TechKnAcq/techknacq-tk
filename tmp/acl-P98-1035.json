{
  "info": {
    "authors": [
      "Ciprian Chelba",
      "Frederick Jelinek"
    ],
    "book": "COLING-ACL",
    "id": "acl-P98-1035",
    "title": "Exploiting Syntactic Structure for Language Modeling",
    "url": "https://aclweb.org/anthology/P98-1035",
    "year": 1998
  },
  "references": [
    "acl-H94-1052",
    "acl-J93-2004",
    "acl-P96-1025"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "The paper presents a language model that develops syntactic structure and uses it to extract meaningful information from the word history, thus enabling the use of long distance dependencies.",
        "The model assigns probability to every joint sequence of words-binary-parse-structure with headword annotation and operates in a left-to-right manner – therefore usable for automatic speech recognition.",
        "The model, its probabilistic parameterization, and a set of experiments meant to evaluate its predictive power are presented; an improvement over standard trigram modeling is achieved."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "The main goal of the present work is to develop a language model that uses syntactic structure to model long-distance dependencies.",
        "During the summer96 DoD Workshop a similar attempt was made by the dependency modeling group.",
        "The model we present is closely related to the one investigated in (Chelba et al., 1997), however different in a few important aspects: • our model operates in a left-to-right manner, allowing the decoding of word lattices, as opposed to the one referred to previously, where only whole sentences could be processed, thus reducing its applicability to n-best list re-scoring; the syntactic structure is developed as a model component; • our model is a factored version of the one in (Chelba et al., 1997), thus enabling the calculation of the joint probability of words and parse structure; this was not possible in the previous case due to the huge computational complexity of the model.",
        "Our model develops syntactic structure incrementally while traversing the sentence from left to right.",
        "This is the main difference between our approach and other approaches to statistical natural language parsing.",
        "Our parsing strategy is similar to the incremental syntax ones proposed relatively recently in the linguistic community (Philips, 1996).",
        "The probabilistic model, its parameterization and a few experiments that are meant to evaluate its potential for speech recognition are presented."
      ]
    },
    {
      "heading": "2 The Basic Idea and Terminology",
      "text": [
        "Consider predicting the word after in the sentence: the contract ended with a loss of 7 cents after trading as low as 89 cents.",
        "A 3-gram approach would predict after from (7, cents) whereas it is intuitively clear that the strongest predictor would be ended which is outside the reach of even 7-grams.",
        "Our assumption is that what enables humans to make a good prediction of after is the syntactic structure in the past.",
        "The linguistically correct partial parse of the word history when predicting after is shown in Figure 1.",
        "The word ended is called the headword of the constituent (ended (with (...))) and ended is an exposed headword when predicting after – topmost headword in the largest constituent that contains it.",
        "The syntactic structure in the past filters out irrelevant words and points to the important ones, thus enabling the use of long distance information when predicting the next word.",
        "Our model will attempt to build the syntactic structure incrementally while traversing the sentence left-to-right.",
        "The model will assign a probability P(W,T) to every sentence W with every possible POStag assignment, binary branching parse, non-terminal label and headword annotation for every constituent of T. Let W be a sentence of length n words to which we have prepended <s> and appended </s> so that wo =<s> and w,,±1 =</s>.",
        "Let Wk be the word k-prefix wo wk of the sentence and Wk Tk",
        "the word-parse k-prefix.",
        "To stress this point, a word-parse k-prefix contains – for a given parse – only those binary subtrees whose span is completely included in the word k-prefix, excluding wo =<s>.",
        "Single words along with their POStag can be regarded as root-only trees.",
        "Figure 2 shows a word-parse k-prefix; h_O h_{-m} are the exposed heads, each head being a pair(headword, non-terminal label), or (word, POStag) in the case of a root-only tree.",
        "A complete parse – Figure 3 – is any binary parse of the",
        "restriction that (</s>, TOP') is the only allowed head.",
        "Note that ((wi, ti) .",
        "(w, t)) needn't be a constituent, but for the parses where it is, there is no restriction on which of its words is the headword or what is the non-terminal label that accompanies the headword.",
        "The model will operate by means of three modules:",
        "• WORD-PREDICTOR predicts the next word wk+1 given the word-parse k-prefix and then passes control to the TAGGER; • TAGGER predicts the POStag of the next word tk+1 given the word-parse k-prefix and the newly predicted word and then passes control to the PARSER; • PARSER grows the already existing binary branching structure by repeatedly generating the transitions:",
        "(unary, NTlabel), (adjoin-left, NTlabel) or (adj oin-right , NTlabel) until it passes control to the PREDICTOR by taking a null transition.",
        "NTlabel is the non-terminal label assigned to the newly built constituent and {left , right} specifies where the new headword is inherited from.",
        "The operations performed by the PARSER are illustrated in Figures 4-6 and they ensure that all possible binary branching parses with all possible",
        "headword and non-terminal label assignments for the w1 wk word sequence can be generated.",
        "The following algorithm formalizes the above description of the sequential generation of a sentence with a complete parse.",
        "The unary transition is allowed only when the most recent exposed head is a leaf of the tree – a regular word along with its POStag – hence it can be taken at most once at a given position in the",
        "input word string.",
        "The second subtree in Figure 2 provides an example of a unary transition followed by a null transition.",
        "It is easy to see that any given word sequence with a possible parse and headword annotation is generated by a unique sequence of model actions.",
        "This will prove very useful in initializing our model parameters from a treebank – see section 3.5."
      ]
    },
    {
      "heading": "3 Probabilistic Model",
      "text": [
        "The probability P(W,T) of a word sequence W and a complete parse T can be broken into:",
        "where:",
        "• Wk-171--1 is the word-parse (k - 1)-prefix • wk is the word predicted by WORD-PREDICTOR • tk is the tag assigned to wk by the TAGGER • Nk - 1 is the number of operations the PARSER executes before passing control to the WORD-PREDICTOR (the Nk-th operation at position k is the null transition); Nk is a function of T • pi denotes the i-th PARSER operation carried out at position k in the word string;",
        "As can be seen, (wk,tk,Wk--171-1, Pt • • • 14 1) is one of the Nk word-parse k-prefixes WkTk at position k in the sentence, i = I, Nk• To ensure a proper probabilistic model (1) we have to make sure that (2), (3) and (4) are well defined conditional probabilities and that the model halts with probability one.",
        "Consequently, certain PARSER and WORD-PREDICTOR probabilities must be given specific values:",
        "• P(nu111WkTk) = 1, if h_{-1}.word = <s> and h_{0} (</s>, TOP') – that is, before predicting </s> – ensures that (<s>, SB) is adjoined in the last step of the parsing process; • P((adjoin-right, TOP)/WkTk) = 1, if",
        "h_O = (</s>, TOP') and h_{-1} .word = <s> and P((adjoin-right, TOP')/WkTk) = 1, if h_O = (</s>, TOP') and h_{-1}.",
        "word 0 <s> ensure that the parse generated by our model is consistent with the definition of a complete parse;",
        "• P( (unary , NTlabel)/WkTk) = 0, if h_O.tag POStag ensures correct treatment of unary productions; • 3€ > 0, VWk-iTk-1, P(Wk=</ S> IWk-iTk-i) > ensures that the model halts with probability one.",
        "The word-predictor model (2) predicts the next word based on the preceding 2 exposed heads, thus making the following equivalence classification:",
        "After experimenting with several equivalence classifications of the word-parse prefix for the tagger model, the conditioning part of model (3) was reduced to using the word to be tagged and the tags of the two most recent exposed heads:",
        "Model (4) assigns probability to different parses of the word k-prefix by chaining the elementary operations described above.",
        "The workings of the parser module are similar to those of Spatter (Jelinek et al., 1994).",
        "The equivalence classification of the WkTk word-parse we used for the parser model (4) was the same as the one used in (Collins, 1996):",
        "It is worth noting that if the binary branching structure developed by the parser were always right-branching and we mapped the POStag and non-terminal label vocabularies to a single type then our model would be equivalent to a trigram language model."
      ]
    },
    {
      "heading": "3.1 Modeling Tools",
      "text": [
        "All model components – WORD-PREDICTOR, TAGGER, PARSER – are conditional probabilistic models of the type P(y/xi, x2, , x„,) where y,x1,x2,...,xn, belong to a mixed bag of words, POStags, non-terminal labels and parser operations (y only).",
        "For simplicity, the modeling method we chose was deleted interpolation among relative frequency estimates of different orders f„(.)",
        "using a",
        "As can be seen, the context mixing scheme discards items in the context in right-to-left order.",
        "The A coefficients are tied based on the range of the count C(xi, , xn).",
        "The approach is a standard one which doesn't require an extensive description given the literature available on it (Jelinek and Mercer, 1980)."
      ]
    },
    {
      "heading": "3.2 Search Strategy",
      "text": [
        "Since the number of parses for a given word prefix Wk grows exponentially with k,I{Tk}1 0(2k), the state space of our model is huge even for relatively short sentences so we had to use a search strategy that prunes it.",
        "Our choice was a synchronous multi-stack search algorithm which is very similar to a beam search.",
        "Each stack contains hypotheses – partial parses – that have been constructed by the same number of predictor and the same number of parser operations.",
        "The hypotheses in each stack are ranked according to the ln(P(W, T)) score, highest on top.",
        "The width of the search is controlled by two parameters:",
        "• the maximum stack depth – the maximum number of hypotheses the stack can contain at any given state; • log-probability threshold – the difference between the log-probability score of the topmost hypothesis and the bottommost hypothesis at any given state of the stack cannot be larger than a given threshold.",
        "above pruning strategy proved to be insufficient so we chose to also discard all hypotheses whose score is more than the log-probability threshold below the score of the topmost hypothesis.",
        "This additional pruning step is performed after all hypotheses in stage k' have been extended with the null parser transition and thus prepared for scanning a new word."
      ]
    },
    {
      "heading": "3.3 Word Level Perplexity",
      "text": [
        "The conditional perplexity calculated by assigning to a whole sentence the probability:",
        "where T* = argmaxTP(W,T), is not valid because it is not causal: when predicting wk+i we use T* which was determined by looking at the entire sentence.",
        "To be able to compare the perplexity of our",
        "model with that resulting from the standard trigram approach, we need to factor in the entropy of guessing the correct parse I': before predicting wk+i, based solely on the word prefix Wk.",
        "The probability assignment for the word at position k +1 in the input sentence is made using:",
        "which ensures a proper probability over strings W*, where Skis the set of all parses present in our stacks at the current stage k. Another possibility for evaluating the word level perplexity of our model is to approximate the probability of a whole sentence:",
        "where T(k) is one of the \"N-best\" – in the sense defined by our search – parses for W. This is a deficient probability assignment, however useful for justifying the model parameter re-estimation.",
        "The two estimates (8) and (10) are both consistent in the sense that if the sums are carried over all",
        "possible parses we get the correct value for the word level perplexity of our model."
      ]
    },
    {
      "heading": "3.4 Parameter Re-estimation",
      "text": [
        "The major problem we face when trying to reestimate the model parameters is the huge state space of the model and the fact that dynamic programming techniques similar to those used in HMM parameter re-estimation cannot be used with our model.",
        "Our solution is inspired by an HMM re-estimation technique that works on pruned – N-best – trel-lises(Byrne et al., 1998).",
        "Let (W, T(k)), k = 1 .. .",
        "N be the set of hypotheses that survived our pruning strategy until the end of the parsing process for sentence W. Each of them was produced by a sequence of model actions, chained together as described in section 2; let us call the sequence of model actions that produced a given (W, T) the derivation(W,T).",
        "Let an elementary event in the derivation(W,T)",
        "be (e'),4\"1')) where: • 1 is the index of the current model action; • mi is the model component – WORD-PREDICTOR, TAGGER, PARSER – that takes action number 1 in the derivation(W,T); • y ri) is the action taken at position 1 in the derivation:",
        "if mi = WORD-PREDICTOR, then ymI) is a word; if mi = TAGGER, then yrnt) is a POStag; if ml = PARSER, then e') is a parser-action; (nit) is • 14 s the context in which the above action was taken: if mi = WORD-PREDICTOR or PARSER, then (n') = (ho.tag, ho.word, h_ I Jag, h_i.word); if ml = TAGGER, then = (word-to-tag, ho.tag , h_1 .tag).",
        "The probability associated with each model action is determined as described in section 3.1, based on counts C(m)(y(m), x(m)), one set for each model component.",
        "Assuming that the deleted interpolation coefficients and the count ranges used for tying them stay fixed, these counts are the only parameters to be re-estimated in an eventual re-estimation procedure; indeed, once a set of counts C(m)(y(m), x(m)) is specified for a given model m, we can easily calculate:",
        "• the relative frequency estimates f(m)(„,(m)/„.",
        "(m)) • n ky 1 •un j for all context orders n = 0. .",
        ".maximum-order (mode/ (m)); • the count C(m)(44)) used for determining the A(47)) value to be used with the order-n context _(n)",
        ".un This is all we need for calculating the probability of an elementary event and then the probability of an entire derivation.",
        "One training iteration of the re-estimation procedure we propose is described by the following algorithm:",
        "and its derivation(W,T(k)).",
        "We then scan all the derivations in the \"development set\" and, for each occurrence of the elementary event (y(m), x(m)) in derivation(W,T(k)) we accumulate the value (W, T) in the Om) (y(m) , x(m)) counter to be used in the next iteration.",
        "The intuition behind this procedure is that 0(W, T(k)) is an approximation to the P(T(k)/W) probability which places all its mass on the parses that survived the parsing process; the above procedure simply accumulates the expected values of the counts Om) (y(m) , x(m)) under the 0(W, T(k)) conditional distribution.",
        "As explained previously, the Om) (y(m) , x(m)) counts are the parameters defining our model, making our procedure similar to a rigorous EM approach (Dempster et al., 1977).",
        "A particular – and very interesting – case is that of events which had count zero but get a non-zero count in the next iteration, caused by the \"N-best\" nature of the re-estimation process.",
        "Consider a given sentence in our \"development\" set.",
        "The \"N-best\" derivations for this sentence are trajectories through the state space of our model.",
        "They will change from one iteration to the other due to the smoothing involved in the probability estimation and the change of the parameters – event counts – defining our model, thus allowing new events to appear and discarding others through purging low probability events from the stacks.",
        "The higher the number of trajectories per sentence, the more dynamic this change is expected to be.",
        "The results we obtained are presented in the experiments section.",
        "All the perplexity evaluations were done using the left-to-right formula (8) (L2RPPL) for which the perplexity on the \"development set\" is not guaranteed to decrease from one iteration to another.",
        "However, we believe that our re-estimation method should not increase the approximation to perplexity based on (10) (SUM-PPL) – again, on the \"development set\"; we rely on the consistency property outlined at the end of section 3.3 to correlate the desired decrease in L2R-PPL with that in SUM-PPL.",
        "No claim can be made about the change in either L2R-PPL or SUM-PPL on test data."
      ]
    },
    {
      "heading": "3.5 Initial Parameters",
      "text": [
        "Each model component – WORD-PREDICTOR, TAGGER, PARSER – is trained initially from a set of parsed sentences, after each parse tree (W, T) undergoes:",
        "• headword percolation and binarization – see section 4; • decomposition into its derivation(W,T).",
        "Then, separately for each m model component, we: gather joint counts C(m)(y(m),x(m)) from the derivations that make up the \"development data\" using 0(W, T) = 1;",
        "• estimate the deleted interpolation coefficients on joint counts gathered from \"check data\" using the EM algorithm.",
        "These are the initial parameters used with the re-estimation procedure described in the previous section."
      ]
    },
    {
      "heading": "4 Headword Percolation and Binarization",
      "text": [
        "In order to get initial statistics for our model components we needed to binarize the UPenn Treebank (Marcus et al., 1995) parse trees and percolate headwords.",
        "The procedure we used was to first percolate headwords using a context-free (CF) rule-based approach and then binarize the parses by using a rule-based approach again.",
        "The headword of a phrase is the word that best represents the phrase, all the other words in the phrase being modifiers of the headword.",
        "Statistically speaking, we were satisfied with the output of an enhanced version of the procedure described in (Collins, 1996) – also known under the name \"Magerman Sz Black Headword Percolation Rules\".",
        "Once the position of the headword within a constituent – equivalent with a CF production of the type Z 4 Y1... Y,2 , where Z, Yr, are non-terminal labels or POStags (only for Yi) – is identified to be k, we binarize the constituent as follows: depending on the Z identity, a fixed rule is used to decide which of the two binarization schemes in Figure 8 to apply.",
        "The intermediate nodes created by the above binarization schemes receive the non-terminal label Z'."
      ]
    },
    {
      "heading": "5 Experiments",
      "text": [
        "Due to the low speed of the parser – 200 wds/min for stack depth 10 and log-probability threshold 6.91 nats (1/1000) – we could carry out the re-estimation technique described in section 3.4 on only 1 Mwds of training data.",
        "For convenience we chose to work on the UPenn Treebank corpus.",
        "The vocabulary sizes were:",
        "• word vocabulary: 10k, open – all words outside the vocabulary are mapped to the <unk> token; • POS tag vocabulary: 40, closed; • non-terminal tag vocabulary: 52, closed; • parser operation vocabulary: 107, closed;",
        "The training data was split into \"development\" set – 929,564wds (sections 00-20) – and \"check set\" – 73,760wds (sections 21-22); the test set size was 82,430wds (sections 23-24).",
        "The \"check\" set has been used for estimating the interpolation weights and tuning the search parameters; the \"development\" set has been used for gathering/estimating counts; the test set has been used strictly for evaluating model performance.",
        "Table 1 shows the results of the re-estimation technique presented in section 3.4.",
        "We achieved a reduction in test-data perplexity bringing an improvement over a deleted interpolation trigram model whose perplexity was 167.14 on the same training-test data; the reduction is statistically significant according to a sign test.",
        "Simple linear interpolation between our model and the trigram model:",
        "An overall relative reduction of 11% over the trigram model has been achieved."
      ]
    },
    {
      "heading": "6 Conclusions and Future Directions",
      "text": [
        "The large difference between the perplexity of our model calculated on the \"development\" set – used",
        "for model parameter estimation – and \"test\" set – unseen data – shows that the initial point we choose for the parameter values has already captured a lot of information from the training data.",
        "The same problem is encountered in standard n-gram language modeling; however, our approach has more flexibility in dealing with it due to the possibility of reestimating the model parameters.",
        "We believe that the above experiments show the potential of our approach for improved language models.",
        "Our future plans include:",
        "• experiment with other parameterizations than the two most recent exposed heads in the word predictor model and parser; • estimate a separate word predictor for left-to-right language modeling.",
        "Note that the corresponding model predictor was obtained via re-estimation aimed at increasing the probability of the \"N-best\" parses of the entire sentence; • reduce vocabulary of parser operations; extreme case: no non-terminal labels/POS tags, word only model; this will increase the speed of the parser thus rendering it usable on larger amounts of training data and allowing the use of deeper stacks – resulting in more \"N-best\" derivations per sentence during re-estimation; • relax – flatten – the initial statistics in the re-estimation of model parameters; this would allow the model parameters to converge to a different point that might yield a lower word-level perplexity; • evaluate model performance on n-best sentences output by an automatic speech recognizer."
      ]
    },
    {
      "heading": "7 Acknowledgments",
      "text": [
        "This research has been funded by the NSF IRI-19618874 grant (STIMULATE).",
        "The authors would like to thank Sanjeev Khu-danpur for his insightful suggestions.",
        "Also to Harry Printz, Eric Ristad, Andreas Stolcke, Dekai Wu and all the other members of the dependency modeling group at the summer96 DoD Workshop for useful comments on the model, programming support and an extremely creative environment.",
        "Also thanks to Eric Brill, Sanjeev Khudanpur, David Yarowsky, Radu Florian, Lidia Mangu and Jun Wu for useful input during the meetings of the people working on our STIMULATE grant."
      ]
    }
  ]
}
