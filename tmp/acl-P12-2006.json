{
  "info": {
    "authors": [
      "Joern Wuebker",
      "Hermann Ney",
      "Richard Zens"
    ],
    "book": "ACL",
    "id": "acl-P12-2006",
    "title": "Fast and Scalable Decoding with Language Model Look-Ahead for Phrase-based Statistical Machine Translation",
    "url": "https://aclweb.org/anthology/P12-2006",
    "year": 2012
  },
  "references": [
    "acl-N03-1017",
    "acl-N04-1033",
    "acl-P02-1040",
    "acl-P07-2045",
    "acl-W06-3109",
    "acl-W11-2123"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "In this work we present two extensions to the well-known dynamic programming beam search in phrase-based statistical machine translation (SMT), aiming at increased efficiency of decoding by minimizing the number of language model computations and hypothesis expansions.",
        "Our results show that language model based presorting yields a small improvement in translation quality and a speedup by a factor of 2.",
        "Two lookahead methods are shown to further increase translation speed by a factor of 2 without changing the search space and a factor of 4 with the side-effect of some additional search errors.",
        "We compare our approach with Moses and observe the same performance, but a substantially better trade-off between translation quality and speed.",
        "At a speed of roughly 70 words per second, Moses reaches 17.2% BLEU, whereas our approach yields 20.0% with identical models."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "Research efforts to increase search efficiency for phrase-based MT (Koehn et al., 2003) have explored several directions, ranging from generalizing the stack decoding algorithm (Ortiz et al., 2006) to additional early pruning techniques (Delaney et al., 2006), (Moore and Quirk, 2007) and more efficient language model (LM) querying (Heafield, 2011).",
        "This work extends the approach by (Zens and Ney, 2008) with two techniques to increase translation speed and scalability.",
        "We show that taking a heuristic LM score estimate for presorting the phrase translation candidates has a positive effect on both translation quality and speed.",
        "Further, we introduce two novel LM lookahead methods.",
        "The idea of LM lookahead is to incorporate the LM probabilities into the pruning process of the beam search as early as possible.",
        "In speech recognition it has been used for many years (Steinbiss et al., 1994; Ortmanns et al., 1998).",
        "First-word LM lookahead exploits the search structure to use the LM costs of the first word of a new phrase as a lower bound for the full LM costs of the phrase.",
        "Phrase-only LM lookahead makes use of a precomputed estimate of the full LM costs for each phrase.",
        "We detail the implementation of these methods and analyze their effect with respect to the number of LM computations and hypothesis expansions as well as on translation speed and quality.",
        "We also run comparisons with the Moses decoder (Koehn et al., 2007), which yields the same performance in BLEU, but is outperformed significantly in terms of scalability for faster translation.",
        "Our implementation is available under a non-commercial open source licence?."
      ]
    },
    {
      "heading": "2 Search Algorithm Extensions",
      "text": [
        "We apply the decoding algorithm described in (Zens and Ney, 2008).",
        "Hypotheses are scored by a weighted log-linear combination of models.",
        "A beam search strategy is used to find the best hypothesis.",
        "During search we perform pruning controlled by the parameters coverage histogram size?",
        "Nc and lexical ?Richard Zens's contribution was during his time at RWTH.",
        "?www-i6.informatik.rwth-aachen.de/jane ?number of hypothesized coverage vectors per cardinality",
        "histogram size?",
        "Nl ."
      ]
    },
    {
      "heading": "2.1 Phrase candidate pre-sorting",
      "text": [
        "In addition to the source sentence f J1 , the beam search algorithm takes a matrix E(?, ?)",
        "as input, where for each contiguous phrase f?",
        "= f j .",
        ".",
        ".",
        "f j?",
        "within the source sentence, E( j, j?)",
        "contains a list of all candidate translations for f?",
        ".",
        "The candidate lists are sorted according to their model score, which was observed to speed up translation by Delaney et al. (2006).",
        "In addition to sorting according to the purely phrase-internal scores, which is common practice, we compute an estimate qLME(e?)",
        "for the LM score of each target phrase e?.",
        "qLME(e?)",
        "is the weighted LM score we receive by assuming e?",
        "to be a complete sentence without using sentence start and end markers.",
        "We limit the number of translation options per source phrase to the No top scoring candidates (observation histogram pruning).",
        "The presorting during phrase matching has two effects on the search algorithm.",
        "Firstly, it defines the order in which the hypothesis expansions take place.",
        "As higher scoring phrases are considered first, it is less likely that already created partial hypotheses will have to be replaced, thus effectively reducing the expected number of hypothesis expansions.",
        "Secondly, due to the observation pruning the sorting affects the considered phrase candidates and consequently the search space.",
        "A better pre-selection can be expected to improve translation quality."
      ]
    },
    {
      "heading": "2.2 Language Model Look-Ahead",
      "text": [
        "LM score computations are among the most expensive in decoding.",
        "Delaney et al. (2006) report significant improvements in runtime by removing unnecessary LM lookups via early pruning.",
        "Here we describe an LM lookahead technique, which is aimed at further reducing the number of LM computations.",
        "The innermost loop of the search algorithm iterates over all translation options for a single source phrase to consider them for expanding the current hypothesis.",
        "We introduce an LM lookahead score qLMLA(e?|e??",
        "), which is computed for each of the translation options.",
        "This score is added to the overall hypothesis score, and if the pruning threshold is ?number of lexical hypotheses per coverage vector exceeded, we discard the expansion without computing the full LM score.",
        "First-word LM lookahead pruning defines the LM lookahead score qLMLA(e?|e??)",
        "= qLM(e?1|e??)",
        "to be the LM score of the first word of target phrase e?",
        "given history e??.",
        "As qLM(e?1|e??)",
        "is an upper bound for the full LM score, the technique does not introduce additional seach errors.",
        "The score can be reused, if the LM score of the full phrase e?",
        "needs to be computed afterwards.",
        "We can exploit the structure of the search to speed up the LM lookups for the first word.",
        "The LM probabilities are stored in a trie, where each node corresponds to a specific LM history.",
        "Usually, each LM lookup consists of first traversing the trie to find the node corresponding to the current LM history and then retrieving the probability for the next word.",
        "If the n-gram is not present, we have to repeat this procedure with the next lower-order history, until a probability is found.",
        "However, the LM history for the first words of all phrases within the innermost loop of the search algorithm is identical.",
        "Just before the loop we can therefore traverse the trie once for the current history and each of its lower order n-grams and store the pointers to the resulting nodes.",
        "To retrieve the LM lookahead scores, we can then directly access the nodes without the need to traverse the trie again.",
        "This implementational detail was confirmed to increase translation speed by roughly 20% in a short experiment.",
        "Phrase-only LM lookahead pruning defines the lookahead score qLMLA(e?|e??)",
        "= qLME(e?)",
        "to be the LM score of phrase e?, assuming e?",
        "to be the full sentence.",
        "It was already used for sorting the phrases, is therefore precomputed and does not require additional LM lookups.",
        "As it is not a lower bound for the real LM score, this pruning technique can introduce additional search errors.",
        "Our results show that it radically reduces the number of LM lookups."
      ]
    },
    {
      "heading": "3 Experimental Evaluation",
      "text": []
    },
    {
      "heading": "3.1 Setup",
      "text": [
        "sions per source word (#HYP) and LM computations per source word (#LM) with respect to LM pre-sorting, first-word LM lookahead and phrase-only LM lookahead on newstest2009.",
        "Speed is given in words per second.",
        "Results are given with (No = 100) and without (No = ?)",
        "observation pruning.",
        "The English language model is a 4-gram LM created with the SRILM toolkit (Stolcke, 2002) on all bilingual and parts of the provided monolingual data.",
        "newstest2008 is used for parameter optimization, newstest2009 as a blind test set.",
        "To confirm our results, we run the final set of experiments also on the English?French task of IWSLT 2011?.",
        "We evaluate with BLEU (Papineni et al., 2002) and TER (Snover et al., 2006).",
        "We use identical phrase tables and scaling factors for Moses and our decoder.",
        "The phrase table is pruned to a maximum of 400 target candidates per source phrase before decoding.",
        "The phrase table and LM are loaded into memory before translating and loading time is eliminated for speed measurements."
      ]
    },
    {
      "heading": "3.2 Methodological analysis",
      "text": [
        "To observe the effect of the proposed search algorithm extensions, we ran experiments with fixed pruning parameters, keeping track of the number of hypothesis expansions and LM computations.",
        "The LM score presorting affects both the set of phrase candidates due to observation histogram pruning and the order in which they are considered.",
        "To separate these effects, experiments were run both with histogram pruning (No = 100) and without.",
        "From Table 1 we can see that in terms of efficiency both cases show similar improvements over the baseline,",
        "newstest2009 set vs. speed on a logarithmic scale.",
        "We compare Moses with our approach without LM lookahead and LM score presorting (baseline), with added LM presorting and with either first-word or phrase-only LM lookahead on top of +pre-sort.",
        "Observation histogram size is fixed to No = 100 for both decoders.",
        "which performs presorting with respect to the translation model scores only.",
        "The number of hypothesis expansions is reduced by ?20% and the number of LM lookups by ?50%.",
        "When observation pruning is applied, we additionally observe a small increase by 0.2% in BLEU.",
        "Application of first-word LM lookahead further reduces the number of LM lookups by 23%, resulting in doubled translation speed, part of which derives from fewer trie node searches.",
        "The heuristic phrase-only LM lookahead method introduces additional search errors, resulting in a BLEU drop by 0.3%, but yields another 85% reduction in LM computations and increases throughput by a factor of 2.2."
      ]
    },
    {
      "heading": "3.3 Performance evaluation",
      "text": [
        "In this section we evaluate the proposed extensions to the original beam search algorithm in terms of scalability and their usefulness for different application constraints.",
        "We compare Moses and four different setups of our decoder: LM score presorting switched on or off without LM lookahead and both LM lookahead methods with LM score pre-sorting.",
        "We translated the test set with the beam sizes set to",
        "we used the beam sizes 2i, i ?",
        "{1, .",
        ".",
        ".",
        ",9}.",
        "Transla",
        "both the best and the fastest possible translation, as well as the fastest settings resulting in no more than 1% and 2% BLEU loss on the development set.",
        "Results are given on the test set (newstest2009).",
        "tion performance in BLEU is plotted against speed in Figure 1.",
        "Without the proposed extensions, Moses slightly outperforms our decoder in terms of BLEU.",
        "However, the latter already scales better for higher speed.",
        "With LM score pre-sorting, the best BLEU value is similar to Moses while further accelerating translation, yielding identical performance at 16 words/sec as Moses at 1.8 words/sec.",
        "Application of first-word LM lookahead shifts the graph to the right, now reaching the same performance at 31 words/sec.",
        "At a fixed translation speed of roughly 70 words/sec, our approach yields 20.0% BLEU, whereas Moses reaches 17.2%.",
        "For phrase-only LM lookahead the graph is somewhat flatter.",
        "It yields nearly the same top performance with an even better trade-off between translation quality and speed.",
        "The final set of experiments is performed on both the WMT and the IWSLT task.",
        "We directly compare our decoder with the two LM lookahead methods with Moses in four scenarios: the best possible translation, the fastest possible translation without performance constraint and the fastest possible translation with no more than 1% and 2% loss in BLEU on the dev set compared to the best value.",
        "Table 2 shows that on the WMT data, the top performance is similar for both decoders.",
        "However, if we allow for a small degradation in translation performance, our approaches clearly outperform Moses in terms of translation speed.",
        "With phrase-only LM look-ahead, our decoder is faster by a factor of 6 for no more than 1% BLEU loss, a factor of 11 for 2% BLEU loss and a factor of 22 in the fastest setting.",
        "The results on the IWSLT data are very similar.",
        "Here, the speed difference reaches a factor of 19 in the fastest setting."
      ]
    },
    {
      "heading": "4 Conclusions",
      "text": [
        "This work introduces two extensions to the well-known beam search algorithm for phrase-based machine translation.",
        "Both presorting the phrase translation candidates with an LM score estimate and LM lookahead during search are shown to have a positive effect on translation speed.",
        "We compare our decoder to Moses, reaching a similar highest BLEU score, but clearly outperforming it in terms of scalability with respect to the trade-off ratio between translation quality and speed.",
        "In our experiments, the fastest settings of our decoder and Moses differ in translation speed by a factor of 22 on the WMT data and a factor of 19 on the IWSLT data.",
        "Our software is part of the open source toolkit Jane."
      ]
    },
    {
      "heading": "Acknowledgments",
      "text": [
        "This work was partially realized as part of the Quaero Programme, funded by OSEO, French State agency for innovation."
      ]
    }
  ]
}
