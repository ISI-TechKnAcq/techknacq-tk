{
  "info": {
    "authors": [
      "Mark Hepple"
    ],
    "book": "International Conference on Computational Linguistics",
    "id": "acl-C90-2030",
    "title": "Normal Form Theorem Proving for the Lambek Calculus",
    "url": "https://aclweb.org/anthology/C90-2030",
    "year": 1990
  },
  "references": [
    "acl-E89-1002",
    "acl-P89-1033"
  ],
  "sections": [
    {
      "text": [
        "z:g z:g x/y:fg, y:i w/(w \\x):Aj.",
        "(j(fgi)) [/L) x/y/z:f, z:g, y:i w/(w\\x):Aj•(j(fgi)) [/R1 x/y/z:f, z:g w/(w \\x)/y:Ai..Xj.",
        "(j(fgi))"
      ]
    },
    {
      "heading": "Abstract",
      "text": [
        "The possibility of multiple equivalent proofs presents a problem for efficient parsing of a number of flexible categorial grammar (CC) frameworks.",
        "In this paper I outline a normal form system for a sequent formulation of the product-free associative Lambek Calculus.",
        "This leads to a simple parsing approach that yields only normal form proofs.",
        "This approach is both safe in that all distinct readings for a sentence will be returned, and optimal in that there is only one normal form proof yielding each distinct meaning."
      ]
    },
    {
      "heading": "1 The Lambek Calculus",
      "text": [
        "The (product-free) Lambek Calculus (Lambek, 1958) is a highly flexible CC framework that can be given a Gentzen-style sequent formulation with the following rules:23",
        "in this formulation, which we will call Ti, each type is associated with a lambda expression, corresponding to its meaning, and the rules specify how these are contracted.",
        "The left rules correspond semantically to functional application, the right rules to functional abstraction.",
        "The lambda expression for the succedent of the root sequent corresponds to its meaning as a combination of the meanings of the antecedent types.",
        "This will be loosely refered to as the 'meaning (or II am grateful to Guy Barry and Glyn Morrill for discussion of the ideas in this paper.",
        "Thanks also to Inge Bethke and Neil Leslie for comments on a draft.",
        "All errors are my own.",
        "This work was carried out under ESRC Postgraduate Award 000428722003.",
        "21n the notation used here, types 30, and x\\y both denote functions from y (the argument type) into x (the value type).",
        "3A sequent is an object of the form r x, where , the derivability relation, indicates that x can be derived from F. Specific to the Lambek Calculus, we require that each sequent has a non-empty antecedent sequence and precisely one succedent type.",
        "We call the bottommost sequent of any proof the root, and the inference that has the root as its conclusion the root inference.",
        "We call to the right hand premise of a left rule its major premise, its other the minor premise.",
        "In addition, we call the Plain branch of any proof that (unique) path si, through the proof such that al is the root sequent, si, corresponds to an axiom instance, and non of is the minor premise of a left inference.",
        "reading) assigned by the proof'.",
        "We assume that each antecedent type of the initial sequent is assigned a distinct variable for its semantics.",
        "The semantics of types will sometimes be omitted to save space.",
        "Lambek (1958) demonstrates that the cut rule is eliminable in the sense that all theorems of the calculus can be proven using just the remaining rules.",
        "These remaining rules provide a decision procedure for theoremhood (since each inference removes a connective, so that search for proofs is finite), and we consider only these in the rest of the paper.''"
      ]
    },
    {
      "heading": "2 The Problem of Multiple Equivalent Proofs",
      "text": [
        "The calculus L typically allows more than one proof assigning each possible reading for a sequent.",
        "We shall consider some illustrative examples.",
        "The following two proofs assign the same reading: y:gh y:gh x:fgh x:fgh z:h z:h x/y:f, y:gh x:fgh x/y:f, y/z:g, z:h =4, x:fgh Here we see that the operations involved in 'building' some argument type (here y) may be performed either before or after the left inference on the functor requiring that argument (here x/y).",
        "Another example of distinct proofs assigning the same meaning is the following (in both of which the subproof for the premise x/y, y w/(w\\x) is omitted):",
        "These show a case where a right inference can equally well be made either before or after some unrelated left",
        "Here we see that where the type instantiating an axiom is functional, it is also possible to 'unpack' the type and 'equate' subformulas of this in further axiom instances.",
        "The lambda expressions assigned by these two proofs are equivalent under n-reduction.",
        "The existence of multiple equivalent proofs presents a problem for efficient theorem proving based on the calculus L. Search for proofs must be exhaustive to ensure that all different 'readings' for a given sequent are found, and a naive theorem prover will expend considerable effort constructing proofs that assign the same meaning.",
        "This radically reduces the efficiency of Lambek Calculus theorem proving.",
        "Hepple and Morrill (1989), working with a somewhat different CG framework that also admits multiple equivalent proofs, suggest that this problem be dealt with by deriving a notion of normal form (NF) for proofs, and then adapting the parsing method such that this only returns NF proofs.",
        "Kiinig (1989) takes this kind approach to handling the problem of multiple equivalent proofs for Lambek sequent theorem proving, generating a notion of NF for such proofs, and deriving from this a parsing strategy intended to compute only NF proofs.",
        "However, KOnig's parsing algorithm fails to exclude all non-NF proofs when used with a standard propositional Lambek Calculus.",
        "In this paper I define a NF system for the sequent formulation of the (product-free) Lambek Calculus, which gives rise to a parsing approach that yields only normal proofs."
      ]
    },
    {
      "heading": "3 A New Approach",
      "text": []
    },
    {
      "heading": "3.1 Headed Proofs",
      "text": [
        "We begin by introducing the notion of head type, as this is crucial to the approach.",
        "We use symbols P, Q, 11, etc to designate proofs, and the notation P(S) to represent a proof P of the sequent S. Intuitively, the head type of a sequent S under some proof P (S) is the antecedent type of S that has widest scope semantically.",
        "The meaning assigned by a proof is always a lambda expression of the form:6",
        "(2) Avi..yn.",
        "(hUi..U,,,) (n, m 0)",
        "where h is some semantic variable.",
        "The head type of the sequent under the given proof is that antecedent whose meaning is the variable h. Consider (3):",
        "The head type here is the antecedent x\\y/z since it is the semantic variable g of this that has widest scope in the meaning assigned by the proof.",
        "Note the characteristic of this proof that a value subpart of the head type is 'equated' with a value subpart of the succedent type in the sense that these together instantiate opposite sides of an axiom instance, in particular that axiom instance at the top of the main branch (cf. footnote 3).",
        "This fact is the syntactic counterpart of the head type having the widest scope semantically.' More generally, for the head H of a sequent under some proof and the sole antecedent A of the proof's main branch axiom, it is always the case that A is a value subformula of H (or is H itself).",
        "Not all proofs have a head, as in (4), where the variable that has widest scope in the meaning assigned by the proof does not originate with an antecedent of the initial sequent, but rather with a type that is 'introduced' in a right inference: We use numerically subscripted proof symbols (e.g. P3, P„, Q,„„ etc) to refer to the headedness of proofs.",
        "In particular a proof P„, n > 1, is a headed proof, with the head being the nth member of the antecedent sequence of the root sequent.",
        "If n 0, then the proof is unheaded.",
        "Given the relation mentioned above between the head of a proof and the main branch axiom of this, we can give a recursive characterization of the form of subscripted proofs as in (5) (where superscripted Greek letters are used to indicate sequences of given numbers of types, i.e. nn corresponds to a sequence of n types): Each proof P. is of one of the forms:",
        "UR] or am k) & (n m)) Irk xiy 'Note the semantic significance of the main branch axiom in this.",
        "The semantics assigned by a proof P always corresponds to that of the succedent of the main branch axiom of P having undergone zero or more lambda abstractions.",
        "This follows from the semantics of the rules of L.",
        "The base case for the definition is where a subproof consists only of an axiom inference, in which case the head of the proof is the single antecedent member (and hence, n 1).",
        "From there, the position of the head can be kept track of by counting the number of antecedents added in beside the head as subproofs are combined.",
        "Note that every cut-free proof in L is a proof P„ for some value of n."
      ]
    },
    {
      "heading": "3.2 A Constructive Notion of Normal Form",
      "text": [
        "In (6), a recursive definition is given for a constructive notion of NF (CNF).",
        "For this definition, it is useful to distinguish two subtypes of proof: 7-1 and r.2.",
        "The set of Ti proofs is precisely the set of CNF proofs.",
        "The 7-2 proofs are a subset of the 71 proofs-those whose main branch includes no right inferences.",
        "Given (6a), CNF proofs only contain axiom leaves that are instantiated with atomic types.",
        "(6b) allows for the occurrence of left inferences in CNF proofs, and requires that these must be with respect to the head of the major premise's subproof ('major sub-proof').",
        "Given (6c), every 12 proof is a Ti proof also.",
        "Given (6d), only Ii proofs may have a right rule as the root inference – no 7-2 proof will be of this form.",
        "Since the major subproof of a left inference must be a r2 proof, a right inference may never occur above a left inference on the main branch of a CNF proof.",
        "Thus, the main branch of a CNF proof is always of the following form (starting at the root): zero or snore right inferences, followed by zero or more left inferences, terminating with an axiom inference.",
        "The minor subproofs of left inferences are and so are also",
        "of this general form.",
        "We will see later how we can ensure that the theorem prover generates all and only the CNF proofs of a sequent.",
        "However, for such a move to be useful, the notion of CNF must satisfy certain requirements.",
        "Most importantly, generating only CNF proofs should be safe in the sense that the theorem prover returns every distinct reading of a sequent that can be assigned.",
        "This will be the case if for every proof of a sequent, there exists a semantically equivalent CNF proof.",
        "To demonstrate this, a second notion of normal form will be defined, using the method of proof reduction, which is equivalent to the constructive notion of NF, and provably complete."
      ]
    },
    {
      "heading": "3.3 A Reductive Notion of Normal Form 3.3.1 Reduction and Normal Forms",
      "text": [
        "A standard approach to defining NFs involves defining a contraction relation ( pi) between terms.",
        "The contraction relation is stated as a number of contraction rules, each of the form X pi Y (in which the form on the left is termed a redex and the form on the right its contractum).",
        "Each contraction rule allows that any term containing an occurrence of a redex may be transformed into a term in which that occurrence is replaced by its contractum.",
        "A term is said to be in NF if and only if it contains no occurrences of any redex.",
        "The contraction relation generates a reduction relation ( i>) which is such that X reduces to Y (X i> Y) if and only if Y is obtained from X by a finite series (possibly zero) of contractions.",
        "A term Y is a NF of X if and only if Y is a NF and X r> Y.",
        "lus We shall next consider a set of contraction rules stated on proofs in L.8 These together define a reductive notion of NF.",
        "A total of eighteen contraction rules are required, which fall into four groups.",
        "An instance of the first group of contraction rules is shown in (7).",
        "This contraction rule expands an axiom leaf instantiated with a functional type to give a subproof containing two axiom leaves, each of which is instantiated with a 'simpler' type than the original axiom (under some metric of simplicity).",
        "There is a second rule in this group for which the functional type in the redex is leftward directional.",
        "An instance of the second group of contraction rules is shown in (8).",
        "In the redex, a right inference is applied to the major premise of left inference.",
        "In the contractum, the subproof has been restructured so",
        "that the right inference is applied to the root sequent, and the left inference to its sole premise.",
        "There are four contraction rules of this group which arise with the directionality of the connectives for the two inferences.",
        "An instance of the third group of contraction rules is shown in (9).",
        "Note that this makes use of the subscripted proof notation, allowing us to recognise where a left inference is with respect to the head of the stated subproof.",
        "In the subproof P„+3 UP, x, v, a z), the head is the type x.",
        "It follows that the type x/y is the head of the entire redex proof, and that v/w is not.",
        "Thus we can see that in the redex, a head left inference (i.e a left inference with respect to the head of the given subproof) is applied to the major premise of non-head left inference.",
        "In the contractum, the subproof has been restructured so that the head inference is applied to the root sequent, and the non-head inference to its major premise.",
        "There are eight contraction rules in this group, which arise with the directionality of the connectives involved, and whether the head functor occurs to the right or left of the non-head functor.",
        "An instance of the fourth group of contraction rules is shown in (10).",
        "In the redex, a head-left inference is applied to the major premise of a non-head left inference, where the latter can be seen to hi-part serve the purpose of 'building' the argument required by the head functor.",
        "In the contractum, the inferences have been reordered so that the head inference applies to the root sequent, and the non-head inference applies to the minor premise of this.",
        "We require four contraction rules of this pattern,",
        "which arise with the directionality of two functors (the left-right order of the two functors being determined by the head functor).",
        "We call any proof that contains no redexes (which is consequently a NF under the reduction system) an irreducible normal form (INF).",
        "It is easily verified that for each contraction rule, the contractum subproof assigns a lambda expression for the root sequent combination equivalent to that assigned by the redex.",
        "Thus, meaning is preserved under contraction, and also in turn under reduction.",
        "Hence, an INF of any proof P always assigns the same reading as P. We will next demonstrate that normalisation holds for the reductive NF system; that is, that every proof has an INF.",
        "This property follows provided that the following (stronger) property holds:",
        "(11) Strong Normalisation: Every reduction is finite.",
        "Thus, for every proof, a finite series of contractions always leads to an irreducible proof.",
        "To prove that every reduction is finite, it is sufficient to give a metric that assigns to each proof a finite non-negative integer score, and under which it can be shown that every application of a contraction rule reduces the score of a proof by a positive integer amount.",
        "The scoring system given in (12) satisfies these requirements.'",
        "c. if the root inference of P is a head left inference, with major subproof Q and minor subproof R then sc(P) = (sc(R) 1)sc(Q) + 1 d. if the root inference of P is a non-head left inference, with major subproof Q and minor subproof It then sc(P) = (sc(R) 1)sc(Q)"
      ]
    },
    {
      "heading": "3.4 Equivalence of the Two Systems",
      "text": [
        "We write CNF(P) and INF(P) to indicate that a proof is in NF under the respective systems.",
        "The two NF systems can be shown to be equivalent in that they designate precisely the same sets of proofs to be in i.e:",
        "(13) Lemma 1: for all P, CNF(P) 4-4 INF(P)",
        "This follows given Lemmas 2 and 3.",
        "(14) Lemma 2: for all P, -,C1s1F(P)",
        "It is easily checked that no redex subproof is in CNF.",
        "Hence, any reducible proof is not a CNF.",
        "This may be proven by induction on P Given the equivalence of the two NF systems, and the normalisation result for the reductive NF system, it follows that for every proof in L, there exists a CNF proof that assigns the same reading.",
        "Hence, generating all and only the CNF proofs of a given sequent is safe in the sense that we can be sure all possible readings for the combination will be returned."
      ]
    },
    {
      "heading": "3.5 The Uniqueness of Normal Forms",
      "text": [
        "The approach will be optimal if there is only a single CNF assigning each distinct reading.",
        "As we have already noted (footnote 6), the meaning assigned by any (cut-free) proof will be a lambda expression that is in )3-normal form.",
        "Extensional equivalence for the Lambda Calculus is given by the PI-reduction system.",
        "Since this system exhibits the Church-Rosser property, any two terms in /3-normal form will be equivalent just in case applying some sequence of 71- contractions (i.e. Ay\" v r>i f) to each yields the same term (modulo a-conversion).",
        "Let us consider two distinct CNF proofs P and Q of some sequent S. Assume that these differ in some regard along their main branches.",
        "The bottom part of each main branch will consist of a sequence of zero or more right inferences.",
        "The length and nature of this sequence of inferences is fully determined by the type of the succedent in the root sequent S, and so P and Q may not differ in this regard.",
        "Thus, the meanings assigned by P and Q will be lambda expressions of the following forms (in which the lambda abstractions ))vi..v„.",
        "correspond to the initial sequence of right inferences):",
        "The remainder of each main branch will consist of some sequence of head left inferences, terminating in an axiom instance.",
        "Consequently, the two CNF proofs may differ along their main branch only in two regards: (i) a different antecedent type is the functor for the first left inference (this determining the functor for the remaining left inferences on the main branch), (ii) even if the same type is chosen for the functor of the first left inference, at some point a different subsequence of antecedents is chosen to 'construct' the argument of the functor.",
        "In either case, the semantics assigned to the two proofs will be non-equivalent.",
        "Thus, for case (i) f and g will be distinct variables.",
        "In both cases, it may be that m k, and even if m = k, at least some of the Ui and will differ in the lambda variables that are put together to form these (i.e. the lambda expressions corresponding to antecedent semantics).",
        "It is evident that in any of these eventualities, no sequence of t?-contractions can yield a common term from two such terms and so the two proofs must assign distinct readings.",
        "If the two NF proofs are similar along their main branches, they must differ in the minor subproof for some left inference.",
        "The same arguments apply in turn that if these subproofs differ in form, then they must be non-equivalent.",
        "Hence, distinct CNF proofs always differ semantically, and so the uniqueness property holds.",
        "Since reduction preserves meaning, and distinct NFs are non-equivalent, it follows that every proof has a unique NF.1°"
      ]
    },
    {
      "heading": "3.6 Normal Form Theorem Proving",
      "text": [
        "For the purpose of theorem proving, we specify an amended version of the calculus, which we term the `parsing calculus' (PC), which is such as to only allow the construction of proofs that correspond to CNF proofs.",
        "To this end, we move from a system which uses a single notion of sequent, to one which distinguishes two different types of sequent Type 1 and Type 2 – this type being marked as a subscript on the derivability arrow =.",
        "The point of this distinction is to allow us to limit the form of the proof that may be given for some sequent merely by its type.",
        "The Type 1/Type 2 distinction essentially corresponds to the 1'1/T2 distinction in the definition of CNF.",
        "For Type 2 sequents we distinguish the antecedent element that must be the head of any proof of the sequent by dividing the antecedent sequence into three subparts, separated by as for example in 0-1-x+71 =>3z, of which the first and last parts are (possibly empty) sequences of types, and the middle part a single type that is required to be the head of any proof of this sequent.",
        "The following set of inference rules allow only proofs of the required form to be constructed: (16)Axiom: e-f-x:f+e ,>2x:f where x is an atomic type (and e denotes the",
        "Observe that the axiom inference specifies a Type 2 sequent, with the single antecedent type being the designated head of that sequent.",
        "This corresponds to clause (a) of the definition of CNF in (6).",
        "The left inference rules have Type 2 sequents for their conclusion and major premise and a Type 1 sequent for the minor premise.",
        "Note that the active type for the inference is the designated head of the conclusion and its value subformula is the designated head of the major premise.",
        "This corresponds to clause (b) of the CNF definition.",
        "The right rules have a Type 1",
        "premise and conclusion, in line with clause (d) of the CNF definition.",
        "In addition, there is a rule [21-4], corresponding to the clause (c) of the CNF definition.",
        "Note there is a condition on the rule which does not correspond to anything hi clause (c).",
        "It is easily shown that this condition is always fulfilled by r2 proofs, so its addition does not alter the set of proofs admitted by the PC.",
        "However, the condition will considerably limit the application of the [21--■1] rule in top-down search for proofs and so increase the efficiency of theorem proving.",
        "It is easily shown that PC and CNF proofs exist in 1-to-1 correspondence."
      ]
    },
    {
      "heading": "4 Discussion",
      "text": [
        "It can be seen that the form of any CNF proof is strongly tied to the form of the lambda expression it assigns as its meaning.",
        "As we have seen, the lambda term corresponding to the meaning of any (cut free) proof in L is always a P-NF term of the form: (n, m 0) where h is a variable, and the main branch of a CNF proof is always of the following form (starting at the root): zero or more right inferences, followed by zero or more left inferences, terminating with an axiom inference.",
        "The correspondence between the two is as follows: the initial sequence of right inferences corresponds to the lambda abstractions of the variables vi..vn, and the ensuing left inferences are just those required to apply the variable h (the semantics of the head) to each of its arguments in turn, with each of the subterms U1 being 'constructed' in the subproof for a minor premise.",
        "These observations provide the basis for relating this approach to that of KOnig (1989), mentioned earlier.",
        "Kanig uses a non-standard method for arriving at a notion of NF proof which involves firstly mapping proofs into objects called 'syntax trees', where proofs that yield the same syntax tree form an equivalence class, and then mapping from each syntax tree to a single NF proof.",
        "From the form of such NF proofs, Kiinig derives a set of 'nesting constraints' which are used to limit the operation of a top-down theorem prover, and which are such that they will never prevent the construction of any NF proof.",
        "As Ming points out, however, the 'nesting constraints' do not exclude the construction all non-NF proofs when used with a standard propositional formulation of the Lambek Calculus (though better results are obtained with a unification-based version of the Lambek Calculus that Kiinig describes).",
        "KOnig's syntax trees can be seen to bear a strong correspondence, in terms of their structure, to the lambda term for the meaning assigned by a proof (although the former include sufficient information, of types etc, to allow (re)construction of a complete proof for the initial sequent), and the relation of Kiinig's NFs to the syntax trees used to define them closely parallels the relation between CNF proofs in the present approach and their corresponding lambda terms.",
        "A further topic worthy of comment is the relation between the current approach and natural deduction approaches such as that of Prawitz (1965).",
        "As Prawitz observes, sequent calculi can be understood as meta-calculi for corresponding natural deduction systems.",
        "Introduction rules correspond to right rules and elimination rules to left rules.",
        "In Prawitz's an introduction rule may never apply to the major premise of an elimination rule (such a subproof being a redex) so that eliminations always appear above introductions on the main branch of a NF proof,\" which seems to parallel the form of CNF sequent proofs.",
        "However, the relation is not so straightforward.",
        "For a natural deduction formulation of the (product-free) Lambek Calculus,12 the occurrence of a relevant redex in a natural deduction proof (i.e. where an introduction rule applies to the major premise of an elimination) corresponds to the occurrence of a /3-redex in the corresponding proof term.",
        "For sequent proofs, however, the occurrence of a P-redex corresponds to a use of the cut rule in the proof – the lambda terms for cut-free proofs are always in fl-NF.",
        "Unfortunately, limitations of space prevent due discussion of this topic here."
      ]
    }
  ]
}
