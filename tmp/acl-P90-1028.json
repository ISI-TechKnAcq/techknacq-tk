{
  "info": {
    "authors": [
      "Erik-Jan Van Der Linden",
      "Guido Minnen"
    ],
    "book": "Annual Meeting of the Association for Computational Linguistics",
    "id": "acl-P90-1028",
    "title": "Algorithms for Generation in Lambek Theorem Proving",
    "url": "https://aclweb.org/anthology/P90-1028",
    "year": 1990
  },
  "references": [
    "acl-C88-2128",
    "acl-E89-1003",
    "acl-E89-1032",
    "acl-J85-4002",
    "acl-P89-1002",
    "acl-P89-1033",
    "acl-T87-1042"
  ],
  "sections": [
    {
      "heading": "ABSTRACT",
      "text": [
        "We discuss algorithms for generation within the Lambek Theorem Proving Framework.",
        "Efficient algorithms for generation in this framework take a semantics-driven strategy.",
        "This strategy can be modeled by means of rules in the calculus that are geared to generation, or by means of an algorithm for the Theorem Prover.",
        "The latter possibility enables processing of a bidirectional calculus.",
        "Therefore Lambek Theorem Proving is a natural candidate for a 'uniform' architecture for natural language parsing and generation."
      ]
    },
    {
      "heading": "1 INTRODUCTION",
      "text": [
        "Algorithms for tactical generation are becoming an increasingly important subject of research in computational linguistics (Shieber, 1988; Shieber et al., 1989; Calder et al., 1989).",
        "In this paper, we will discuss generation algorithms within the Lambek Theorem Proving (LTP) framework (Moortgat, 1988; Lambek, 1958; van Benthem, 1986).",
        "In section (2) we give an introduction to a categorial calculus that is extended towards bidi-rectionality.",
        "The naive top-down control strategy in this section does not suit the needs of efficient generation.",
        "Next, we discuss two ways to implement a semantics-driven strategy.",
        "Firstly, we add inference rules and cut rules geared to generation to the calculus (3).",
        "Secondly, since these changes in the calculus do not support bidirectionality, we 'We would like to thank Cosse Bou.ma, Wietske Siitsma and Marianne Sanders for their comments on an earlier draft of the paper.",
        "introduce a second implementation: a bottom-up algorithm for the theorem prover (4)."
      ]
    },
    {
      "heading": "2 EXTENDING THE CALCULUS",
      "text": [
        "Natural Language Processing as deduction The architectures in this paper resemble the uniform architecture in Shieber (1988) because language processing is viewed as logical deduction, in analysis and generation: \"The generation of strings matching some criteria can equally well be thought of as a deductive process, namely a process of constructive proof of the existence of a string that matches the crite-ria.\" (Shieber, 1988, p. 614).",
        "In the LTP framework a categorial reduction system is viewed as a logical calculus where parsing a syntagm is an attempt to show that it follows from a set of axioms and inference rules.",
        "These inference rules describe what the processor does in assembling a semantic representation (representational non-autonomy: Crain and Steedman, 1982; Ades and Steedman, 1982).",
        "Derivation trees represent a particular parse process (Bouma, 1989).",
        "These rules thus seem to be nondeclarative, and this raises the question whether they can be used for generation.",
        "The answer to this question will emerge throughout this paper.",
        "Lexical information As in any categorial grammar, linguistic information in LTP is for the larger part represented with the signs in the lexicon and not with the rules of the calculus (signs are denoted by prosody:syritax:semantics).",
        "A generator using a categorial grammar needs lexical information about the syntactic form of a functor that is connected to some semantic functor in order to syntactically correctly generate the semantic arguments of this functor.",
        "For a parser, the reverse is true.",
        "In order to fulfil both needs, lexical information is made available to the theorem prover in the form of instances of azioms.1 Axioms then truely represent what should be axiomatic in a lexicalist description of a language: the lexical items, the connections between form and meaning.3 Rules Whenever inference rules are applied, an attempt is made to axiomatize the functor that participates in the inference by the first subsequent of the elimination rules.",
        "This way, lexical information is retrieved from the lexicon.",
        "A prosodic operator connects prosodic elements.",
        "A prosodic identity element, id, is necessary because introduction rules are prosodically vacuous.",
        "In order to avoid unwanted matching between axioms and id-elements, one special axiom is added for id-elements.",
        "Meta-logical checks are included in the rules in order to avoid variables occuring in the final derivation.",
        "nogenvar recursively checks whether any part of an expression is a variable.",
        "A sequent in the calculus is denoted with P =7 T, where P, called the antecedent, and T, the succedent, are finite sequences of signs.",
        "The calculus is presented in (1) .",
        "In what follows, X and Y are categories; T and Z, are signs; R, U and V are possibly empty sequences of signs; denotes functional application, a caret denotes A-abstraction.3",
        "In order to initiate analysis, the theorem prover is presented with sequents like (2).",
        "Inference rules are applied recursively to the antecedent of the sequent until axioms are found.",
        "This regime can be called top-down from the point of view of problem solving and bottom-up from a \"parsing\" point of view.",
        "For generation, a sequent like (3) is presented to the theorem prover.",
        "Both analysis and generation result in a derivation like (4).",
        "Note that generation not only results in a sequence of lexical signs, but also in a prosodic phrasing that could be helpful for speech generation.",
        "[john:A:B,loves:C:D,mary:E:FJ => [Pros:s:Sem)"
      ]
    },
    {
      "heading": "U => [Pxos:szloveelmaryejohn]",
      "text": [
        "Although both (2) and (3) result in (4), in the Van der Linden and Nlinnen (submitted) contains a more elaborate comparison of the extended calculus with the original calculus as proposed in Moortgat (1988).",
        "'A suggestion similar to this proposal was made by IC:mil; (1989) who stated that lexical items are to be seen as axioms, but did not include them as such in her description of the L-calculus.",
        "exact proceedings of the theorem prover.",
        "It starts applying rules, matching them with the antecedent, without making use of the original semantic information, and thus resulting in an inefficient and nondeterministic generation process: all possible derivations including all lexical items are generated until some derivation is found that results in the succedent.4 We conclude that the algorithm normally used for parsing in LTP is inefficient with respect to generation."
      ]
    },
    {
      "heading": "3 CALCULI DESIGNED FOR GENERATION",
      "text": [
        "A solution to the efficiency problem raised in the previous section is to start from the original semantics.",
        "In this section we discuss calculi that make explicit use of the original semantics.",
        "Firstly, we present Lambek-like rules especially designed for generation.",
        "Secondly, we introduce a Cut-rule for generation with sets of categorial reduction rules.",
        "Both entail a variant of the crucial starting-point of the semantic-head-driven algorithms described in Calder et al.",
        "(198) and Shieber et al.",
        "(1989): if the functor of a semantic representation can be identified, and can be related to a lexical representation containing syntactic information, it is possible to generate the arguments syntactically.",
        "The efficiency of this strategy stems from the fact that it is guided by the known semantic and syntactic information, and lexical information is retrieved as soon as possible.",
        "In contrast to the semantic-head-driven approach, our semantic representations do not allow for immediate recognition of semantic heads: these can only be identified after all arguments",
        "Calder et al.",
        "conjecture that their algorithm \"(...) extends naturally to the rules of composition, division and permutation of Combinatory Categorial Grammar (Steedman, 1987) and the Lambek Calculus (1958)\" (Calder et al., 1989, p. 237).",
        "This conjecture should be handled with care.",
        "As we have stated before, inference rules in LTP describe how a processor operates, An important difference with the categorial reduction rules of Calder et al.",
        "is that inference-rules in LTP implicitly initiate the recursion of the parsing and generation process.",
        "Technically speaking, Lambek rules cannot be arguments of the rule-predicate of Calder et al.",
        "(1989, p. 237).",
        "The gist of our strategy is similar to theirs, but the algorithms differ.",
        "Lamb ek-like generation Rules are presented in (5) that explicitly start from the known information during generation: the syntax and semantics of the succedent.",
        "Literally, the inference rule states that a sequent consisting of an antecedent that unifies with two sequences of signs U and V, and a succedent that unifies with a sign with semantics Sern_ru0Sem_Arg is a theorem of the calculus if V reduces to a syntactic functor looking for an argument on its left side with the functor-meaning of the original semantics, and U reduces to its argument.",
        "This rule is an equivalent of the second elimination rule in (1)."
      ]
    },
    {
      "heading": "4 A COMBINED BOTTOM-UP/TOP-DOWN REGIME",
      "text": [
        "In this section, we describe an algorithm for the theorem prover that proceeds in a combined bottom-up/top-down fashion from the problem solving point of view.",
        "It maintains the same semantics-driven strategy, and enables efficient generation with the bidirectional calculus in (1).",
        "The algorithm results in derivations like (4), in the same theorem prover architecture, be it along another path.",
        "A Cut-rule for generation A Cut-rule is a structural rule that can be used within the L-calculus to include partial proofs derived with categorial reduction rules into other proofs.",
        "In (6) a generation Cut-rule is presented together with the AB-system.",
        "The generator regimes presented in this section are semantics-driven: they start from a semantic representation, assume that it is part of the uppermost serpent within a derivation, and work towards the lexical items, axioms, with the recursive application of inference rules.",
        "From the point of view of theorem proving, this process should be described as a top-down problem solving strategy.",
        "The rules in this section are, however, geared towards generation.",
        "Use of these rules for parsing would result in massive non-determinism.",
        "Efficient parsing and generation require different rules: the calculus is not bidirectional.",
        "223 Bidirectionality There are two reasons to avoid duplication of grammars for generation and interpretation.",
        "Firstly, it is theoretically more elegant and simple to make use of one grammar.",
        "Secondly, for any language processing system, human or machine, it is more economic (Bunt, 1987, p. 333).",
        "Scholars in the area of language generation have therefore pleaded in favour of the bidireetionality of linguistic descriptions (Appelt, 1987).",
        "Bidirectionality might in the first place be implemented by using one grammar and two separate algorithms for analysis and generation (Jacobs, 1985; Calder et al., 1989).",
        "However, apart from the desirability to make use of one and the same grammar for generation and analysis, it would be attractive to have one and the same processing architecture for both analysis and generation.",
        "Although attempts to find such architectures (Shieber, 1988) have been termed looking for the fountain of youth\" ,6 it is a stimulating question to what extent it is possible to use the same architecture for both tasks.",
        "Example An example will illustrate how our algorithm proceeds.",
        "In order to generate from a sign, the theorem prover assumes that it is the succedent of one of the subseguents of one of the inference rules (7-1/2).",
        "(In case of an introduction rule the sign is matched with the succedent of the headseguent; this implies a top-down step.)",
        "If unification with one of these subsequents can be established, the other subsequents and the headsequent can be partly instantiated.",
        "These sequents can then serve as starting points for further bottom-up processing.",
        "Firstly, the headsequent is subjected to bottom-up process"
      ]
    },
    {
      "heading": "7- Final derivation:",
      "text": [
        "ing (7-3), in order to axiomatize the head functor as soon as possible.",
        "Bottom-up processing stops when no more application operators can be elim-Mated from the head sequent (7-4).",
        "Secondly, working top-down, the other subsequents (7-4/5) are made subject to bottom-up processing, and at last the last subsequent (7-6).",
        "(7) presents generation of a nounphrase, the table.",
        "Non-determinism A source for non-determinism in the semantics-driven strategy is the fact that the theorem prover forms hypotheses about the direction a functor seeks its arguments, and then checks these against the lexicon.",
        "A possibility here would be to use a calculus where dominance and precedence are taken apart.",
        "We will pursue this suggestion in future research."
      ]
    },
    {
      "heading": "5 CONCLUDING REMARKS",
      "text": [
        "Conclusion Efficient, bidirectional use of categorial calculi is possible if extensions are made with respect to the calculus, and if a combined bottom-up/top-down algorithm is used for generation.",
        "Analysis and generation take place within the same processing architecture, with the same linguistics descriptions, be it with the use of different algorithms.",
        "LTP thus serves as a natural candidate for a uniform architecture of parsing and generation.",
        "Semantic non-monotonicity A constraint on grammar formalisms that can be dealt with in current generation systems is semantic monotonicity (Shieber, 1988; but cf. Shieber et aL, 1989).",
        "The algorithm in Calder et al.",
        "(1989) requires an even stricter constaint.",
        "Firstly, in van der Linden and Minnen (submitted) we describe how the addition of a unification-based semantics to the calculus described here enables processing of non-monotonic phenomena such as non-compositional verb particles and idioms.",
        "Identity semantics (cf. Calder et al.",
        "p. 235) should be no problem in this respect.",
        "Secondly, unary rules and type-raising (ibid.)",
        "are part of the Is-calculus, and are neither fundamental problems.",
        "Inverse 0-reduction A problem that exists for all generation systems that include some form of )-semantics is that generation necessitates the inverse operation of 0-reduction.",
        "Although we have implemented algorithms for inverse ,0-reduction, these are not computationally tractable.° A way out could be the inclusion of a unification based semantics.7 °Bunt (1987) states that an expression with n constants results in 2's – possible inverse 0-reductions.",
        "?As proposed in van der Linden and Minnen (submit-tell) for the calculus in (2).",
        "225 Implementation The algorithms and calculi presented here have been implemented with the use of modified versions of the cat egorial calculi interpreter described in Moortgat (1988)."
      ]
    },
    {
      "heading": "6 REFERENCES",
      "text": []
    }
  ]
}
