{
  "info": {
    "authors": [
      "Jiri Havelka"
    ],
    "book": "Human Language Technologies 2007: the Conference of the North American Chapter of the Association for Computational Linguistics; Companion Volume, Short Papers",
    "id": "acl-N07-2016",
    "title": "Relationship between Non-Projective Edges, Their Level Types, and Well-Nestedness",
    "url": "https://aclweb.org/anthology/N07-2016",
    "year": 2007
  },
  "references": [
    "acl-E06-1010",
    "acl-H05-1066",
    "acl-P06-2066"
  ],
  "sections": [
    {
      "text": [
        "Relationship between Non-Projective Edges, their Level Types,",
        "and Well-Nestedness",
        "Jiff Havelka",
        "Institute of Formal and Applied Linguistics Charles University in Prague, Czech Republic havelka@ufal.mff.cuni.cz",
        "Abstfact",
        "Dependency analysis of natural language gives rise to non-projective structures.",
        "The constraint of well-nestedness on dependency trees has been recently shown to give a good fit with empirical linguistic data.",
        "We present a reformulation of this constraint using properties of non-projective edges and show its formal relationship to level types of non-projective edges; we also derive a simple O(n) algorithm for checking well-nestedness."
      ]
    },
    {
      "heading": "1. Intfoduction",
      "text": [
        "Dependency analysis of natural language has been gaining an ever increasing interest thanks to its applicability in many tasks of NLP – a recent example is the dependency parsing work of McDonald et al.",
        "(2005), which introduces an approach based on the search for maximum spanning trees, capable of handling non-projective structures naturally.",
        "In this context, the issue of delimiting dependency structures permissible in natural language grows in importance (see e.g. Nivre (2006)).",
        "We would like to point out that since neither syntactic structures in dependency treebanks, nor structures arising in dependency parsing need a priori fall into any formal subclass of dependency trees, we need means of describing any non-projective structure.",
        "xThe importance of such means is evident from the asymptotically negligible proportion of projective trees to all dependency trees.",
        "(Unrestricted dep.",
        "trees (i.e. labelled rooted trees),",
        "Kuhlmann and Nivre (2006) compare several constraints on dependency structures and among the considered ones find well-nestedness to be in good accord with empirical data.",
        "However, they do not include level types of non-projective edges introduced by Havelka (2005), which present another means of characterizing any non-projective structure and have interesting formal properties.",
        "We link properties of non-projective edges and their level types to the constraint of well-nestedness and show that they provide a more fine-grained means capable of capturing it.",
        "The paper is organized as follows: Sect.",
        "2 contains formal preliminaries; Sect.",
        "3 and 4 review definitions and show the necessary properties of the constraint of well-nestedness and level types of non-projective edges; Sect.",
        "5 presents the main results concerning the relationship between non-projective edges (and their level types) and well-nestedness."
      ]
    },
    {
      "heading": "2. Fofmal pfeliminafies",
      "text": [
        "To make the paper as self-contained as possible, we provide a concise reference with definitions and simple properties used in subsequent sections.",
        "Definition 1 A dependency tree is a triple (V, :<), where V is a finite set of nodes, – a dependency relation on V, and ^ a total order on V.",
        "Relation – models linguistic dependency, and so represents a directed, rooted tree on V. There are many ways of characterizing rooted trees, we give here a characterization via the properties of – : there is a root r € V such that r – * v for all v € V and there is a unique edge p – v for all v € V, v = r. Relation – * is the reflexive transitive closure of – and is usually called subordination.",
        "The following definitions allow us to formulate our results succinctly.",
        "For each node i we define its level as the length of the path r – * i; we denote it level;.",
        "The symmetrization <-> = – U – -makes it possible to talk about edges (pairs of nodes i, j such that i – j) without explicitly specifying the parent (head etc.",
        "; i here) and the child (dependent etc.",
        "; j here); so – represents directed edges and <-> undirected edges.",
        "To retain the ability to talk about the direction of edges, we define",
        "Parent, .j (i fi – j and Child, „ (j fi 'j.",
        "Our notation for rooted subtrees is Subtreei = {v €",
        "V | i – * v}, Subtree^ j = {v € V | Parentis j – * v}, and for ancestors Anci = {v € V | v – * i}, Anc^j = {v € V | v – * Parent^-}.",
        "To be able to talk concisely about the total order on nodes we define open and closed intervals whose endpoints need not be in a prescribed order: (i, j) = {v € V | min^{i, j} -< v -< max^{i, j}} and [i, j] = {v € V | min^{i, j} ^ v ^ max^{i, j}}, resp.",
        "For any edge i ^ j we define its gap as follows Gap^j = {v € V | v € (i, j) & v € Subtree^j}.",
        "An edge with an empty gap is projective, an edge whose gap is nonempty is non-projective.",
        "(See e.g. (Havelka, 2005) for the characterization of projectivity via properties of edges and further references.)",
        "Pfopefty 2 Let a be a node and i <-> j any edge disjoint from a.",
        "Then i € Subtreea <^ j € Subtreea.",
        "PROOF.",
        "From the assumption i = a = j it follows that i, j e Subtreea <^ Parent^ e Subtreea.",
        "■ Proposition 3 Let i <-> j, u <-> v be disjoint edges.",
        "(i) Ifu, v € (i, j), then u € Gap^j v € Gap^j.",
        "(ii) Ifu € Gap^ j and v € Gap^ j, then v € [i, j}.",
        "Proof.",
        "(i) follows immediately from the definition of Gap^j and Property 2.",
        "To prove (ii), assume v € (i, j) and using (i) arrive at a contradiction.",
        "■"
      ]
    },
    {
      "heading": "3. Well-nestedness",
      "text": [
        "Kuhlmann and Nivre (2006) claim that the constraint of well-nestedness seems to approximate well dependency structures occurring in natural language.",
        "Definition 4 A dependency tree T is ill-nested if there are disjoint subtrees T1, T2 of T and nodes",
        "x\\,yi € T\\ and x2, y2 € T2 such that xi € (x2, y2) and x2 € (xi, y 1 ).",
        "A dependency tree T that is not ill-nested is well-nested.",
        "It is easy to express the constraint in terms of edges – it will prove crucial in Sect.",
        "5.",
        "Theorem 5 A dependency tree T is ill-nested iff there are edges i\\ <-> ji, i2 <-> j2 in disjoint subtrees T\\, T2 ofT, resp., such that i\\ € (i2, j2), i2 € (ii, ji).",
        "Proof.",
        "Direction <= is obvious.",
        "Direction ==: Let rt be the root of Ti.",
        "To find ii <-> ji, first suppose that ri € (x2,y2).",
        "Consider the first edge Vk – Vk+i on the downward path v0 = ri, vi,...,vm = yi, m > 0, such that Vk € (x2,y2) and Vk+i € [x2, y2].",
        "If ri € [x2, y2], consider the first edge Vk+i – Vk on the upward path vo = xi, vi,..., Vn = ri, n > 0, such that Vk € (X2,y2) and Vk+i € [x2,y2].",
        "Let us denote ii = Vk and ji = Vk+i, and possibly rename x2,y2 so that ii € (x2,y2) and x2 € (ii, ji).",
        "To find i'2 j2 such that ii € (i'2, j2), i'2 € (ii, ji ), proceed similarly as above.",
        "Obviously, edges ii <-> ji, h h are m disjoint subtrees.",
        "■"
      ]
    },
    {
      "heading": "4. Level types of non-projective edges",
      "text": [
        "Level types of non-projective edges allow their structural classification with interesting formal properties.",
        "They were introduced by Havelka (2005), who presents them in more detail.",
        "Definition 6 The level type (or just type) of a non-projective edge i <-> j is defined as follows",
        "Type;„j = levelchiidi„j - minn €Gapi„j leveln .",
        "The type of an edge is the distance of its child node and a node in its gap closest to the root (distance here means difference in levels) – for sample configurations see Figure i.",
        "Note that there may be more than one node witnessing an edge's type.",
        "The type of an edge is not bounded – it can take any integer value (depending on the height of a tree).",
        "Our definition of level type of non-projective edges extends naturally the original definition im-",
        "positive type type 0 negative type",
        "plicit in (Havelka, 2005), where classes corresponding to positive, zero and negative types are defined.",
        "We now show a relationship between edges of certain types that will allow us to derive a relationship between non-projective edges and well-nestedness.",
        "Theorem 7 For any non-projective edge i <-> j in a dependency tree T with Type^j < 0 (< 0) there is a non-projective edge v – uinT with Typeu^v > 0 (> 0) such that u € argminn €Gapi .",
        "Ieveln and either",
        "i € Gapu^v, or j€ Gap^^.",
        "Proof.",
        "Let u be any node in argminn€Gapi .",
        "Ieveln.",
        "From the assumption Type^j < 0 node u has a parent v € Gap^j.",
        "Obviously i <-> j, v – u are disjoint, thus from Proposition 3 we have v € [i, j], and so either i € (u, v), or j € (u, v).",
        "Since levelv > levelParentiMj, we have that Parent^j € Subtreev, and so either i € Gapu^v, or j € Gapu^v.",
        "Finally from",
        "Type^j < 0 (< 0) we get levelu - levelChildi^ (> 0), hence Typeu„v > 0 (> 0)."
      ]
    },
    {
      "heading": "5. Well-nestedness & non-projective edges",
      "text": [
        "We give characterizations of well-nestedness solely in terms of properties of non-projective edges and show some applications.",
        "5.l Characterization using pairs of edges",
        "First we give a characterization of pairs of edges in Theorem 5 in terms of their gaps.",
        "Theorem S Let i1 <-> j1, i2 <-> j2 be two edges in a dependency tree T. They are in disjoint subtrees T1 , T2, resp., and satisfy i1 G (i2, j2 ), i2 G (il, j1 ) iff the following condition holds",
        "(inp) il GGapi2„j2 & i2 GGap^j .",
        "1, 2.",
        "Condition (inp) obviously implies i1 (i2, j2), i2 €(i1, j1), which in turn implies that edges i1 <-> j1, i2 ^ j2 are disjoint.",
        "From Property 2 we get that both Parenti2^j2 € Subtreei1^j1 and Parenti1^j1 €",
        "Subtree^j2, hence subtrees T1, T2 are disjoint.",
        "Direction =>: Let us consider the edge i2 <-> j2and node i1.",
        "Since T1 is disjoint from T2, we have that i1 G Subtree^j2, and therefore i1 G Gapi2^j2.",
        "The proof that i2 € Gap^^ is analogous.",
        "■",
        "Condition (inp) allows us to talk about pairs of edges causing ill-nestedness and so characterize well-nestedness using properties of pairs of edges.",
        "Definition 9 We say that any two non-projective edges il <-> j1, i2 <-> j2 in a dependency tree T satisfying condition (inp) form an ill-nested pair of edges.",
        "Corollary lO A dependency tree T is ill-nested iff it",
        "contains an ill-nested pair ofedges.",
        "Proof.",
        "Follows from Theorems 5 and 8.",
        "■",
        "The results of Section 4 and previous subsection give the following relationship between types of non-projective edges and well-nestedness.",
        "Theorem ll If a dependency tree contains a non-proj.",
        "edge ofnonpositive type, then it is ill-nested.",
        "Proof.",
        "Follows from Theorems 7 and 10.",
        "■",
        "We see that types of non-projective edges and well-nestedness share a common ground; however, the statement of Theorem 11 cannot be strengthened to equivalence (it is easy to see that also two edges of positive type can satisfy (inp)).",
        "Now we show that well-nestedness can be characterized in terms of properties of single non-projective edges only.",
        "We define the ill-nested set of an edge and show that it gives the desired characterization.",
        "Definition l2 The ill-nested set of any edge i <-> j is defined as follows & u, v G Anc^j} .",
        "The next proposition exposes the relationship of edges in In^ j to the gap of i <-> j.",
        "Proposition l3 For any edge i <-> j In^j = {u <-> v j u G Gap^j & v G Gap^j & u, v G Anc^j}.",
        "Proof.",
        "The inclusion ç is obvious.",
        "The inclusion 5 follows from Proposition 3 (u G Gap^j and v G AnCi^j imply that edges i <-> j,u^v are disjoint).",
        "■",
        "We are ready to formulate the main result of this section, which gives as corollary a characterization of well-nestedness using properties of single edges.",
        "Theofem 14 Let i <-> j be an edge in a dependency tree T. The edges that form an ill-nested pair with the edge i <-> j are exactly the edges in In^j.",
        "Proof.",
        "Direction ==: Let u <-> v be an edge forming an ill-nested pair with the edge i <-> j, i.e. i € Gapu^vand u € Gap^j.",
        "This implies i € (u, v) and u € (i, j), which immediately gives v € [i, j].",
        "Supposing u € Anc^j or v € Anc^j we get i € Subtreeu^v, which is in contradiction with i € Gapu^v, and therefore u, v € Anc^j.",
        "Hence u <-> v € In^j.",
        "Direction <<=: Let u <-> v € In^j (i.e. u € Gap^j, v € [i, j], and u,v € Anc^j; without loss of generality assume i (u, v)).",
        "From the assumptions u € Gap^j and v € [i, j] we get that edges i <-> j, u <-> v are disjoint.",
        "Using Property 2, from the assumption u, v € Anc^j we get i € Subtreeu^v, thus i € GapM^v.",
        "Hence i <-> j,u^v satisfy (inp).",
        "■ Cofollafy 15 A dependency tree T is ill-nested iff Inj = 0for some non-projective edge i <-> jinT.",
        "Proof.",
        "Follows from Theorems 8 and 14.",
        "■",
        "Our characterization of well-nestedness gives also a novel way of checking it.",
        "Here is a pseudocode of an algorithm for fully determining all ill-nested sets:",
        "1: fof all edges i <^ j do",
        "Its time complexity is obviously O(n), since the check on line 3 can be implemented so as to take constant time (by precompuing – *, which can be done in O(n) time).",
        "The bound is the same as for the reported algorithms for checking well-nestedness (Mohl, 2006).",
        "However, the following theorem allows well-nestedness checking to be linear for projective trees, to be faster for random input, and to remain O(n).",
        "Theofem 16 In any ill-nested pair of edges, at least one of the edges is of nonnegative type (witnessed by an endpoint of the other edge).",
        "Proof.",
        "Let i1 <-> j1, i2 <-> j2 satisfy (inp).",
        "Let us suppose that levelChild^ > levelChild^.",
        "Since levelChildu^v > levelu for any edge u <-> v, we have that levelChildi j > leveli2, and hence Type^j1 > 0.",
        "If levelChildij^-j < levelChild,2„J2, it is analogously proved that ?2 <-> y2 is of nonnegative type.",
        "■",
        "Havelka (2005) presents a linear algorithm for finding all non-projective edges of nonnegative type.",
        "Thus well-nestedness can be checked as follows: first find all edges of nonnegative type, and then check their ill-nested sets for non-emptiness.",
        "Computing – * on demand for subtrees of the processed edges, we preserve worst-case quadratic complexity."
      ]
    },
    {
      "heading": "6. Conclusion",
      "text": [
        "We have presented new formal results linking properties of non-projective edges and their level types to well-nestedness.",
        "This work extends the current body of research on non-projective dependency structures in natural language.",
        "In particular, we offer new insights into formal properties of non-projective edges that, if possible, both provide adequate means for linguistic description and at the same time are useful as features in machine-learning approaches.",
        "Acknowledgement This work was supported by projects 1ET201120505 of the Ministry of Education of the Czech Republic and 374/2005/A-INF/MFF of Grant Agency of Charles University."
      ]
    }
  ]
}
