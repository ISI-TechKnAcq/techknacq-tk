{
  "info": {
    "authors": [
      "Alexander Clark",
      "Remi Eyraud",
      "Amaury Habrard"
    ],
    "book": "Proceedings of the EACL 2009 Workshop on Computational Linguistic Aspects of Grammatical Inference",
    "id": "acl-W09-1006",
    "title": "A Note on Contextual Binary Feature Grammars",
    "url": "https://aclweb.org/anthology/W09-1006",
    "year": 2009
  },
  "references": [],
  "sections": [
    {
      "text": [
        "Contextual Binary Feature Grammars were recently proposed by (Clark et al., 2008) as a learnable representation for richly structured context-free and context sensitive languages.",
        "In this paper we examine the representational power of the formalism, its relationship to other standard formalisms and language classes, and its appropriateness for modelling natural language."
      ]
    },
    {
      "heading": "1. Introduction",
      "text": [
        "An important issue that concerns both natural language processing and machine learning is the ability to learn suitable structures of a language from a finite sample.",
        "There are two major points that have to be taken into account in order to define a learning method useful for the two fields: first the method should rely on intrinsic properties of the language itself, rather than syntactic properties of the representation.",
        "Secondly, it must be possible to associate some semantics to the structural elements in a natural way.",
        "Grammatical inference is clearly an important technology for NLP as it will provide a foundation for theoretically well-founded unsupervised learning of syntax, and thus avoid the annotation bottleneck and the limitations of working with small hand-labelled treebanks.",
        "Recent advances in context-free grammatical inference have established that there are large learnable classes of context-free languages.",
        "In this paper, we focus on the basic representation used by the recent approach proposed in (Clark et al., 2008).",
        "The authors consider a formalism called Contextual Binary Feature Grammars (CBFG) which defines a class of grammars using contexts as features instead of classical non terminals.",
        "The use of features is interesting from an NLP point of view because we can associate some semantics to them, and because we can represent complex, structured syntactic categories.",
        "The notion of contexts is relevant from a grammatical inference standpoint since they are easily observable from a finite sample.",
        "In this paper we establish some basic language theoretic results about the class of exact Contextual Binary Feature Grammars (defined in Section 3), in particular their relationship to the Chomsky hierarchy: exact CBFGs are those where the contextual features are associated to all the possible strings that can appear in the corresponding contexts of the language defined by the grammar.",
        "The main results of this paper are proofs that the class of exact CBFGs:",
        "• properly includes the regular languages (Section 5),",
        "• does not include some context-free languages (Section 6),",
        "• and does include some non context-free languages (Section 7).",
        "Thus, this class of exact CBFGs is orthogonal to the classic Chomsky hierarchy but can represent a very large class of languages.",
        "Moreover, it has been shown that this class is efficiently learnable.",
        "This class is therefore an interesting candidate for modeling natural language and deserves further investigation."
      ]
    },
    {
      "heading": "2. Basic Notation",
      "text": [
        "We consider a finite alphabet E, and E* the free monoid generated by E. A is the empty string, and a language is a subset of E*.",
        "We will write the concatenation of u and v as uv, and similarly for sets of strings.",
        "u £ E* is a substring of v £ E* if there are strings l, r £ E* such that v = lur.",
        "A context is an element of E* x E*.",
        "For a string u and a context f = (l, r) we write f 0 u = lur; the insertion or wrapping operation.",
        "We extend this to sets of strings and contexts in the natural way.",
        "A context is also known in structuralist linguistics as an environment.",
        "The set of contexts, or distribution, of a string u of a language L is, CL(u) = {(l, r) £ E* x E*|lur £ L}.",
        "We will often drop the subscript where there is no ambiguity.",
        "We define the syntactic congruence as u =L v iff Cl(u) = CL (v).",
        "The equivalence classes under this relation are the congruence classes of the language.",
        "In general we will assume that A is not a member of any language."
      ]
    },
    {
      "heading": "3. Contextual Binary Feature Grammars",
      "text": [
        "Most definitions and lemmas of this section were first introduced in (Clark et al., 2008).",
        "Before the presentation of the formalism, we give some results about contexts to help to give an intuition of the representation.",
        "The basic insight behind CBFGs is that there is a relation between the contexts of a string w and the contexts of its substrings.",
        "This is given by the following trivial lemma:",
        "Lemma 1.",
        "For any language L and for any strings u,u',v,v' if C(u) = C(u) and C(v) = C(v'), then C(uv) = C(u'v').",
        "We can also consider a slightly stronger result:",
        "Lemma 2.",
        "For any language L and for any strings u,u',v,v' if C(u) C C(u') and C(v) C C(v'), then C(uv) C C(u'v').",
        "C(u) C C(u') means that we can replace any occurrence of u in a sentence, with a u', without afecting the grammaticality, but not necessarily vice versa.",
        "Note that none of these strings need to correspond to non-terminals: this is valid for any fragment of a sentence.",
        "We will give a simplified example from English syntax: the pronoun it can occur everywhere that the pronoun him can, but not vice versa.",
        "Thus given a sentence \"I gave him away\", we can substitute it for him, to get the grammatical sentence I gave it away, but we cannot reverse the process.",
        "For example, given the sentence it is raining, we cannot substitute him for it, as we will get the ungrammatical sentence him is raining.",
        "Thus we observe C(him) c C(it).",
        "Looking at Lemma 2 we can also say that, if we have some finite set of strings K, where we know the contexts, then:",
        "Corollary 1.",
        "This is the basis of the representation: a word w is characterised by its set of contexts.",
        "We can compute the representation of w, from the representation of its parts u', v', by looking at all of the other matching strings u and v where we understand how they combine (with subset inclusion).",
        "In order to illustrate this concept, we give here a simple example.",
        "Consider the language {anbnln > 0} and the set K = {aabb, ab, abb, aab, a, b}.",
        "Suppose we want to compute the set of contexts of aaabbb, Since C(abb) C C(aabbb), and vacuously C(a) C C(a), we know that C(aabb) C C(aaabbb).",
        "More generally, the contexts of ab can represent anbn, those of aab the strings an+bn and the ones of abb the strings anbn+1.",
        "The key relationships are given by context set inclusion.",
        "Contextual binary feature grammars allow a proper definition of the combination of context inclusion:",
        "Definition 1.",
        "A Contextual Binary Feature Grammar (CBFG) G is a tuple (F,P,PL, E).",
        "F is a finite set of contexts, called features, where we write C = 2F for the power set of F defining the categories of the grammar, P C C x C x C is a finite set of productions that we write x – yz where x,y,z £ C and PLC C x E is a set of lexical rules, written x – a.",
        "Normally Pl contains exactly one production for each letter in the alphabet (the lexicon).",
        "A CBFG G defines recursively a map fG fc(w) = |J U x iff |w| > 1.",
        "u,v:uv=w x – yzGP: yCfa(u)A zCfG(v)",
        "We give here more explanation about the map fG.",
        "It defines in fact the analysis of a string by a CBFG.",
        "A rule z – xy is applied to analyse a string w if there is a cut uv = w s.t.",
        "x C fc(u) and y C fG(v), recall that x and y are sets of contexts.",
        "Intuitively, the relation given by the production rule is linked with Lemma 2: z is included in the set of features of w = uv.",
        "From this relationship, for any (l, r) £ z we have lwr £ L(G).",
        "The complete computation of fG is then justified by Corollary 1: fG(w) defines all the possible features associated by G to w with all the possible cuts uv = w (i.e. all the possible derivations).",
        "Finally, the natural way to define the membership of a string w in L(G) is to have the context (A, A) £ fG(w) which implies that AuA = u £ L(G).",
        "Definition 2.",
        "The language defined by a CBFG G is the set of all strings that are assigned the empty context: L(G) = {u|(A, A) £ fG(u)}.",
        "As we saw before, we are interested in cases where there is a correspondence between the language theoretic interpretation of a context, and the occurrence of that context as a feature in the grammar.",
        "From the basic definition of a CBFG, we do not require any specific condition on the features of the grammar, except that a feature is associated to a string if the string appears in the context defined by the feature.",
        "However, we can also require that fGdefines exactly all the possible features that can be associated to a given string according to the underlying language.",
        "Definition 3.",
        "Given a finite set of contexts F = {(l1,r1), (ln,rn)} and a language L we can define the context feature map FL :",
        "E* – 2F which is just the map u – {(l, r) £ F^ur £ L} = Cl(u) n F.",
        "Using this definition, we now need a correspondence between the language theoretic context feature map FL and the representation in the CBFG fG.",
        "Definition 4.",
        "A CBFG G is exact if for all u £ E*, fG(u) = Fl(g)(u).",
        "Exact CBFGs are a more limited formalism than CBFGs themselves; without any limits on the interpretation of the features, we can define a class of formalisms that is equal to the class of Conjunctive Grammars (see Section 4).",
        "However, exactness is an important notion because it allows to associate intrinsic components of a language to strings.",
        "Contexts are easily observable from a sample and moreover it is only when the features correspond to the contexts that distributional learning algorithms can infer the structure of the language.",
        "A basic example of such a learning algorithm is given in (Clark et al., 2008).",
        "{{(A, A)} – {(A, b)}{(aab, A)}, {(A, A)} – {(A, abb)}{(a, A)}, {(A,b)} – {(A,abb)}{(A,A)}, {(a, A)} – {(A, A)}{(aab,A)}}.",
        "If we want to parse the string w = aabb the usual way is to have a bottom-up approach.",
        "This means that we recursively compute the fG map on the substrings of w in order to check whether (A, A) belongs to fG(w).",
        "The Figure 1 graphically gives the main steps of the computation of fG(aabb).",
        "Basically there are two ways to split aabb that allow the derivation of the empty context: aa^b and a|abb.",
        "The first one correspond to the top part of the figure while the second one is drawn at the bottom.",
        "We can see for instance that the empty context belongs to fG(ab) thanks to the rule {(A, A)} – {(A,abb)}{(a, A)}: {(A, abb)} C fG(a) and { (a, A)} C fG(b).",
        "But for symmetrical reasons from E* – C as follows:",
        "the result can also be obtained using the rule {(A, A)} – {(A, b)}{(aab, A)}.",
        "As we trivially have fG(aa) = fG(bb) = 0, since no right-hand side contains the concatenation of the same two features, an induction proof can be written to show that (A, A) £ fG(w) <^ w £ {anbn : n > 0}.",
        "This is a simple example that illustrates the parsing of a string given a CBFG.",
        "This example does not characterize the power of CBFG since no right handside part is composed of more than one context.",
        "A more interesting, example with a context-sensitive language, will be presented in Section 7."
      ]
    },
    {
      "heading": "4. Non exact CBFGs",
      "text": [
        "The aim here is to study the expressive power of CBFG compare to other formalism recently introduced.",
        "Though the inference can be done only for exact CBFG, where features are directly linked with observable contexts, it is still worth having a look at the more general characteristics of CBFG.",
        "For instance, it is interesting to note that several formalisms introduced with the aim of representing natural languages share strong links with CBFG.",
        "Range Concatenation Grammars",
        "Range Concatenation Grammars are a very powerful formalism (Boullier, 2000), that is a current area of research in NLP.",
        "Lemma 3.",
        "For every CBFG G, there is a non-erasing positive range concatenation grammar of arity one, in 2-var form that defines the same language.",
        "Proof.",
        "Suppose G = (F,P,Pl, E).",
        "Define a RCG with a set of predicates equal to F and the following clauses, and the two variables U, V. For each production x – yz in P, for each f £ x, where y = {g1,...gi}, z = {h1,.. .hj} add clauses f(UV) – g1 (U),...gi(U),h1(V),...hj(V).",
        "For each lexical production {f1 .",
        ".",
        ".",
        "fk} – a add clauses ft (a) – e. It is straightforward to verify that f (w) h e iff f £ fG(w).",
        "□ Conjunctive Grammar",
        "A more exact correspondence is to the class of Conjunctive Grammars (Okhotin, 2001), invented independently of RCGs.",
        "For every every language L generated by a conjunctive grammar there is a CBFG representing L# (where the special character # is not included in the original alphabet).",
        "Suppose we have a conjunctive grammar G = (E,N,P,S) in binary normal form (as defined in (Okhotin, 2003)).",
        "We construct the equivalent CBFG G' = (F,P',Pl, E) as followed:",
        "• For every letter a we add a context (la, ra) to F such that laara £ L;",
        "• For every rules X – a in P, we create a rule {(la, ra)} – a in PL.",
        "• For every non terminal X £ N, for every rule X – P1Q1& ... &PnQn we add distinct contexts {(Jp^,rpiQi)} to F, such that for all i it exists u», lpiQiu,irPiQi £ L and PiQi =4>g u^;",
        "^ Let FX,j = {(lPiQi ,rPiQi) : Vi} the",
        "set of contexts corresponding to the jth rule applicable to X.",
        "For all (IPiQi,rPiQi) £ FX,j, we add to P' the rules (JPiQi ,rPiQi) – FPi,k FQi,l (Vk,l).",
        "• For all j, we add to P' the rule (A, A) – FS,j {(w,A)}.",
        "It can be shown that this construction gives an equivalent CBFG."
      ]
    },
    {
      "heading": "5. Regular Languages",
      "text": [
        "Any regular language can be defined by an exact CBFG.",
        "In order to show this we will propose an approach defining a canonical form for representing any regular language.",
        "Suppose we have a regular language L, we consider the left and right residual languages:",
        "They define two congruencies: if £ u-1 L (resp.",
        "r, r' £ Lu-1) then for all w £ E*, Jw £ L if l'w £ L (resp.",
        "wr £ L if wr' £ L).",
        "For any u £ E*, let lmin(u) be the lexicographically shortest element such that lm-1inL = u-1L.",
        "The number of such lmin is finite by the Myhil-Nerode theorem, we denote by Lminthis set, i.e. {lmin(u)|u £ E*}.",
        "We define symmetrically Rmin for the right residuals",
        "(Lrm-1in = Lu-).",
        "We define the set of contexts as:",
        "F(L) is clearly finite by construction.",
        "If we consider the regular language defined by the deterministic finite automata of Figure 2, we obtain Lmin = {A, a, b} and Rmin = { A, b, ab} and thus F(L) = {(A, A), (a, A), (b, A), (A, b), (a, b), (b, b), (A, ab), (a, ab), (b, ab)}.",
        "By considering this set of features, we can prove (using arguments about congruence classes) that for any strings u, v such that Fl(u) D Fl(v), then Cl(u) D Cl(v).",
        "This means the set of feature F is sufficient to represent context inclusion, we call this property the fiduciality.",
        "Note that the number of congruence classes of a regular language is finite.",
        "Each congruence class is represented by a set of contexts",
        "Figure 2: Example of a DFA.",
        "The left residuals are defined by A-1L, a-1L, b-1L and the right ones by LA-1, Lb-1, Lab-1 (note here that La-1 = LA-1).",
        "FL(u).",
        "Let KL be finite set of strings formed by taking the lexicographically shortest string from each congruence class.",
        "The final grammar can be obtained by combining elements of KL.",
        "For every pair of strings u, v £ KL, we define a rule and we add lexical productions of the form FL(a) – a, a £ E.",
        "Lemma 4.",
        "For all w £ E*, fG(w) = FL(w).",
        "Proof.",
        "(Sketch) Proof in two steps: Vw £ E*,Fl(w) C fg(w) and fg(w) C Fl(w).",
        "Each step is made by induction on the length of w and uses the rules created to build the grammar, the derivation process of a CBFG and the fiduciality for the second step.",
        "The key point rely on the fact that when a string w is parsed by a CBFG G, there exists a cut of w in uv = w (u, v £ E*) and a rule z – xy in G such that x C fG(u) and y C fG(v).",
        "The rule z – xy is also obtained from a substring from the set used to build the grammar using the FL map.",
        "By inductive hypothesis you obtain inclusion between fG and FL on u and v. □",
        "The approach presented here gives a canonical form for representing a regular language by an exact CBFG.",
        "Moreover, this is is complete in the sense that every context of every substring will be represented by some element of F(L): this CBFG will completely model the relation between contexts and substrings."
      ]
    },
    {
      "heading": "6. Context-Free Languages",
      "text": [
        "We now consider the relationship between",
        "CFGs and CBFGs.",
        "Definition 5.",
        "A context-free grammar (CFG) is a quadruple G = (S,V,P,S).",
        "S is a finite alphabet, V is a set of non terminals (S n V = 0), P ç V x (V U S)+ is a finite set of productions, S G V is the start symbol.",
        "In the following, we will suppose that a CFG is represented in Chomsky Normal Form, i.e. every production is in the form N – UW with N,U,W G V or N – a with a G S. We will write uNv = G uav if there is a production N – a G P. == G is the reflexive transitive closure of =>g. The language defined by a CFG G is L(G) = {w G S*jS ==g w}.",
        "6.l A Simple Characterization",
        "A simple approach to try to represent a CFG by a CBFG is to define a bijection between the set of non terminals and the set of context features.",
        "Informally we define each non terminal by a single context and rewrite the productions of the grammar in the CBFG form.",
        "To build the set of contexts F, it is sufficient to choose j Vj contexts such that a bijection be can be defined between V and F with be (N) = (l, v) implies that S == lNv.",
        "Note that we fix bT(S) = (A, A).",
        "P ' = {bT(N) – aj N – a G P, a G S}.",
        "A similar proof showing that this construction produces an equivalent CBFG can be found in (Clark et al., 2008).",
        "If this approach allows a simple syntactical convertion of a CFG into a CBFG, it is not relevant from an NLP point of view.",
        "Though we associate a non-terminal to a context, this may not correspond to the intrinsic property of the underlying language.",
        "A context could be associated with many non-terminals and we choose only one.",
        "For example, the context (He is, A) allows both noun phrases and adjective phrases.",
        "In formal terms, the resulting CBFG is not exact.",
        "Then, with the bijection we introduced before, we are not able to characterize the non-terminals by the contexts in which they could appear.",
        "This is clearly what we don't want here and we are more interested in the relationship with exact CBFG.",
        "We will show here that the class of context-free grammars is not strictly included in the class of exact CBFGs.",
        "First, the grammar defined in Section 3.2 is an exact CBFG for the context-free and non regular language { anbn| n > 0}, showing the class of exact CBFG has some elements in the class ofCFGs.",
        "We give now a context-free language L that can not be defined by an exact CBFG:",
        "L = {anb|n > 0} U {amcn\\n >m> 0}.",
        "Suppose that there exists an exact CBFG that recognizes it and let N be the length of the biggest feature (i.e. the longuest left part of the feature).",
        "For any sufficiently large k > N, the sequences ck and ck+1 share the same features: Fl(cu) = Fl(cfc+1).",
        "Since the CBFG is exact we have FL(b) C FL(ck).",
        "Thus any derivation of ak+1b could be a derivation of ak+ck which does not belong to the language.",
        "However, this restriction does not mean that the class of exact CBFG is too restrictive for modelling natural languages.",
        "Indeed, the example we have given is highly unnatural and such phenomena appear not to occur in attested natural languages."
      ]
    },
    {
      "heading": "7. Context-Sensitive Languages",
      "text": [
        "We now show that there are some exact CBFGs that are not context-free.",
        "In particular, we define a language closely related to the MIX language (consisting of strings with an equal number of a's, b's and c's in any order) which is known to be non context-free, and indeed is conjectured to be outside the class of indexed grammars (Boullier, 2003).",
        "La6 = {wd|w G M, |w|a = |w|b}, Lac = {we|w G M, |w|a = |w|c}, Labc = {w/|w G M, |w|a = |w|b = |w|c}.",
        "In order to define a CBFG recognizing L, we have to select features (contexts) that can represent exactly the intrinsic components of the languages composing L. We propose to use the following set of features for each sublanguages:",
        "• For Lab: (A, d) and (A, ad), (A,bd).",
        "• For Lac: (A, e) and (A, ae), (A, ce).",
        "• For Labc: (A, /).",
        "• For the letters a', b', c', a, b, c we add: (A, a), (A,b), (A,c), (a', A), (b',A), (c',A).",
        "• For the letters d, e,/, d', e',/' we add; (A,d'), (A,e'), (A,/'), (d,A), (e, A), (/, A).",
        "Here, Lab will be represented by (A, d), but we will use (A, ad), (A,bd) to define the internal derivations of elements of Lab.",
        "The same idea holds for Lac with (A, e) and (A, ae), (A, ce).",
        "For the lexical rules and in order to have an exact CBFG, note the special case for a, b, c: {(A, bd), (A, ce), (a', A)} – a {(A, ad), (b,A)} – b {(A, ad), (A, ae), (c', A)} – c For the nine other letters, each one is defined with only one context like {(A, d')} – d.",
        "For the production rules, the most important one is: (A, A) – {(A, d), (A, e)}, {(A, /')}.",
        "Indeed, this rule, with the presence of two contexts in one of categories, means that an element of the language has to be derived so that it has a prefix u such that /G(u) 5 {(A,d), (A,e)}.",
        "This means u is both an element of Lab and Lac.",
        "This rule represents the language Labc since {(A, /')} can only represent the letter /.",
        "(A, A) – {(A,/')}, {(/,A)}.",
        "This set of rules is incomplete, since for representing Lab, the grammar must contain the rules ensuring to have the same number of a's and b's, and similarly for Lac.",
        "To lighten the presentation here, the complete grammar is presented in Annex.",
        "We claim this is an exact CBFG for a context-sensitive language.",
        "L is not context-free since if we intersect L with the regular language {X*d}, we get an instance of the non context-free MIX language (with d appended).",
        "The exactness comes from the fact that we chose the contexts in order to ensure that strings belonging to a sublanguage can not belong to another one and that the derivation of a substring will provide all the possible correct features with the help of the union of all the possible derivations.",
        "Note that the Mix language on its own is probably not definable by an exact CBFG: it is only when other parts of the language can distributionally define the appropriate partial structures that we can get context sensitive languages.",
        "Far from being a limitation of this formalism (a bug), we argue this is a feature: it is only in rather exceptional circumstances that we will get properly context sensitive languages.",
        "This formalism thus potentially accounts not just for the existence of non context free natural language but also for their rarity."
      ]
    },
    {
      "heading": "8. Conclusion",
      "text": [
        "The chart in Figure 3 summarises the different relationship shown in this paper.",
        "The substitutable languages (Clark and Eyraud, 2007) and the very simple ones (Yokomori, 2003) form two different learnable class of languages.",
        "There is an interesting relationship with Marcus External Contextual Grammars (Mitrana, 2005): if we defined the language of a CBFG to be the set {/G(u) 0 u : u G X*} we would be taking some steps towards contextual grammars.",
        "In this paper we have discussed the weak generative power of Exact Contextual Binary Feature Grammars; we conjecture that the class of natural language stringsets lie in this class.",
        "ECBFGs are efficiently learnable (see (Clark et al., 2008) for details) which is a compelling technical advantage of this formalism over other more traditional formalisms such as",
        "CFGs or TAGs.",
        "Annex",
        "(A, A) – ",
        "{(A, d), (A, e)}, {(A, /')}",
        "(A, A) – ",
        "{(A, d)}, {(A, d')}",
        "(A, A) – ",
        "{(A, e)}, {(A, e')}",
        "(A, A) – ",
        "{(A, a)}, {(A, bd), (A, ce), (a', A)}",
        "(A, A) – ",
        "{(A, b)}, {(A, ad), (b', A)}",
        "(A, A) – ",
        "{(A, c)}, {(A, ad), (A, ae), (c', A)}",
        "(A, A) – ",
        "{(A, d')}, {(d, A)}",
        "(A, A) – ",
        "{(A, e')}, {(e, A)}",
        "(A, A) – ",
        "{(A, /')}, {(/, A)}",
        "(A, d) – ",
        "{(A, d)}, {(A, d)}",
        "(A, d) – ",
        "{(A, ad)}, {(A, bd)}",
        "(A, d) – ",
        "{(A, bd)}, {(A, ad)}",
        "(A, d) – ",
        "{(A, d)}, {(A, ad), (A, ae), (c', A)}",
        "(A, d) – ",
        "{(A, ad), (A, ae), (c', A)}, {(A, d)}",
        "(A, ad) – ",
        "{(A, ad), (A, ae), (c', A)}, {(A, ad)}",
        "(A, ad) – ",
        "{(A, ad)}, {(A, ad), (A, ae), (c', A)}",
        "(A, ad) – ",
        "{(A, ad), (b', A)}, {(A, d)}",
        "(A, ad) – ",
        "{(A, d)}, {(A, ad), (b', A)}",
        "(A, bd) – ",
        "{(A, ad), (A, ae), (c', A)}, {(A, bd)}",
        "(A, bd) – ",
        "{(A, bd)}, {(A, ad), (A, ae), (c', A)}",
        "(A, bd) – ",
        "{(A, bd), (A, ce), (a', A)}, {(A, d)}",
        "(A, bd) – ",
        "{(A, d)}, {(A, bd), (A, ce), (a', A)}",
        "(A, e) – ",
        "{(A, e)}, {(A, e)}",
        "(A, e) – ",
        "{(A, ae)}, {(A, ce)}",
        "(A, e) – ",
        "{(A, ce)}, {(A, ae)}",
        "(A, e) – ",
        "{(A, e)}, {(A, ad), (b', A)}",
        "(A, e) – ",
        "{(A, ad), (b', A)}, {(A, e)}",
        "(A, ae) – ",
        "{(A, ad), (b', A)}, {(A, ae)}",
        "(A, ae) – ",
        "{(A, ae)}, {(A, ad), (b', A)}",
        "(A, ae) – ",
        "{(A, ad), (A, ae), (c', A)}, {(A, e)}",
        "(A, ae) – ",
        "{(A, e)}, {(A, ad), (A, ae), (c', A)}",
        "(A, ce) – ",
        "{(A, ad), (b', A)}, {(A, ce)}",
        "(A, ce) – ",
        "{(A, ce)}, {(A, ad), (b', A)}",
        "(A, ce) – ",
        "{(A, bd), (A, ce), (a', A)}, {(A, e)}",
        "(A, ce) – ",
        "{(A, e)}, {(A, bd), (A, ce), (a', A)}",
        "{(A, bd), (A, ce), (a', A)} – a",
        "{(a, ad), (b',A)} – b",
        "{(A, ad), (A, ae), (c', A)} – c",
        "{(A,d')}",
        " – d",
        "{(A,e')}",
        " – e",
        "{(A,/')}",
        " – /",
        "{(A, a)}",
        " – a'",
        "{(A, b)}",
        " – b'",
        "{(A, c)}",
        " – c'",
        "{(d,A)}",
        " – d'",
        "{(e,A)}",
        " – e'",
        "{(/,A)}",
        " – /'"
      ]
    }
  ]
}
