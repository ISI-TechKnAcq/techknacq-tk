{
  "info": {
    "authors": [
      "Carl G. De Marcken"
    ],
    "book": "Annual Meeting of the Association for Computational Linguistics",
    "id": "acl-P90-1031",
    "title": "Parsing the LOB Corpus",
    "url": "https://aclweb.org/anthology/P90-1031",
    "year": 1990
  },
  "references": [
    "acl-A88-1019",
    "acl-J88-1003"
  ],
  "sections": [
    {
      "heading": "ABSTRACT",
      "text": [
        "This paper l presents a rapid and robust parsing system currently used to learn from large bodies of unedited text.",
        "The system contains a multivalued part-of-speech disambiguator and a novel parser employing bottom-up recognition to find the constituent phrases of larger structures that might be too difficult to analyze.",
        "The results of applying the disarnbiguator and parser to large sections of the Lancaster/ Oslo-Bergen corpus are presented."
      ]
    },
    {
      "heading": "INTRODUCTION",
      "text": [
        "We have implemented and tested a parsing system which is rapid and robust enough to apply to large bodies of unedited text.",
        "We have used our system to gather data from the Lancaster/Oslo-Bergen (LOB) corpus, generating parses which conform to a version of current Government-Binding theory, and aim to use the system to parse 25 million words of text The system consists of an interface to the LOB corpus, a part of speech disarnbiguator, and a novel parser.",
        "The disambiguator uses multivaluedness to perform, in conjunction with the parser, substantially more accurately than current algorithms The parser employs bottom-up recognition to create rules which fire top-down, enabling it to rapidly parse the constituent phrases of a larger structure that might itself be difficult to analyze.",
        "The complexity of some of the free text in the LOB demands this, and we have not sought to parse sentences completely, but rather to ensure that our parses are accurate.",
        "The parser output can be modified to conform to any of a number of linguistic theories.",
        "This paper is divided into sections discussing the LOB corpus, statistical disambiguation, the parser, and our results.",
        "This paper reports work done at the MIT Artificial Intelligence Laboratory.",
        "Support for this research was provided in part by grants from the National Science Foundation (under a Presidential Young Investigator award to Prof. Robert C. Berwick); the Kapor Family Foundation; and the Siemens Corporation."
      ]
    },
    {
      "heading": "THE LOB CORPUS",
      "text": [
        "The Lancaster/Oslo-Bergen Corpus is an on-line collection of more than 1,000,000 words of English text taken from a variety of sources, broken up into sentences which are often 50 or more words long.",
        "Approximately 40,000 different words and 50,000 sentences appear in the corpus.",
        "We have used the LOB corpus in a standard way to build several statistical tables of part of speech usage.",
        "Foremost is a dictionary keying every word found in the corpus to the number of times it is used as a certain part of speech, which allows us to compute the probability that a word takes on a given part of speech.",
        "In addition, we recorded the number of times each part of speech occurred in the corpus, and built a cligram array, listing the number of times one part of speech was followed by another.",
        "These numbers can be used to compute the probability of one category preceding another.",
        "Some disambiguation schemes require knowing the number of trigrant occurrences (three specific categories in a row).",
        "Unfortunately, with a 132 category system and only one million words of tagged text, the statistical accuracy of LOB trigrams would be minimal Indeed, even in the &gram table we have built, fewer than 3100 of the 17,500 digrams occur more than 10 times.",
        "When using the digram table in statistical schemes, we treat each of the 10,500 digrams which never occur as if they occur once."
      ]
    },
    {
      "heading": "STATISTICAL DISAMBIGUATION",
      "text": [
        "Many different schemes have been proposed to disambiguate word categories before or during parsing.",
        "One common style of disambiguators, detailed in this paper, rely on statistical cooccurance information such as that discussed in the section above.",
        "Specific statistical disam-biguators are described in both DeRose 1988 and Church 1988.",
        "They can be thought of as algorithms which maximize a function over the possible selections of categories.",
        "For instance, for each word Az in a sentence, the DeRose algorithm takes a set of categories faf, (4, ...} as input.",
        "It outputs a particular category a such",
        "that the product of the probability that A.= is the category a;z and the probability that the category af: occurs before the category of,++1, is maximized.",
        "Although such an algorithm might seem to be exponential in sentence length since there are an exponential number of' combinations of categories, its limited leftward and rightward dependencies permit linear time dynamic programming method.",
        "Applying his algorithm to the Brown Corpus, DeRose claims the accuracy rate of 96%.",
        "Throughout this paper we will present accuracy figures in terms of how often words are incorrectly disambiguated.",
        "Thus, we write 96% correctness as an accuracy of 25 (words per error).",
        "We have applied the DeRose scheme and several variations to the LOB corpus in order to find an optimal disambiguation method, and display our findings below in Figure 1.",
        "First, we describe the four functions we maximize: Method A: Method A is also described in the DeRose paper.",
        "It maximizes the product of the probabilities of each category occurring before the next, or",
        "Method B: Method B is the other half of the DeRose scheme, maximizing the product of the probabilities of each category occurring for its word.",
        "Method B simply selects each word's most probable category, regardless of context.",
        "can perform perfectly if it only returns one part of speech per word, because there are words and sequences of words which can be truly ambiguous in certain contexts.",
        "Method D addresses this problem by on occasion returning more than one category per word.",
        "The DeRose algorithm moves from left to right assigning to each category cr; an optimal path of categories leading from the start of the sentence to ctE, and a corresponding probability.",
        "The Brown Corpus is a large, tagged text database quite similar to the LOB.",
        "It then extends each path with the categories of the word A'+1 and computes new probabilities for the new paths.",
        "Call the greatest new probability P. Method D assigns to the word A' those categories {eq.}",
        "which occur in those new paths which have a probability within a factor F of P. It remains a linear time algorithm.",
        "Naturally, Method D will return several categories for some words, and only one for others, depending on the particular sentence and the factor F. If F = 1, Method D will return only one category per word, but they are not necessarily the same categories as DeRose would return.",
        "A more obvious variation of DeRose, in which alternate categories are substituted into the DeRose disambiguation and accepted if they do not reduce the overall disambiguation probability significantly, would approach DeRose as F went to 1, but turns out not to perform as well as Method D.3 Disambiguator Results: Each method was applied to the same 64,000 words of the LOB corpus.",
        "The results were compared to the LOB part of speech pre-tags, and are listed in Figure 1.4 If a word was pre-tagged as being a proper noun, the proper noun category was included in the dictionary, but no special information such as capitalization was used to distinguish that category from others during disambiguation.",
        "For that reason, when judging accuracy, we provide two metrics: one simply comparing disa.mbiguator output with the pre-tags, and another that gives the disambiguator the benefit of the doubt on proper nouns, under the assumption that an \"oracle\" preprocessor could distinguish proper nouns from contextual or capitalization information.",
        "Since Method D can return several categories for each word, we provide the average number of categories per word returned, and we also note the setting of the parameter F, which determines how many categories, on average, are returned.",
        "The numbers in Figure 1 show that simple statistical schemes can accurately disambiguate parts of speech in normal text, confirming DeRose and others.",
        "The extraordinary To be more precise, for a given average number of parts of speech returned V, the \"substitution\" method is about 10% less accurate when 1 < V < 1.1 and is almost 50% less accurate for 1.1 < V < 1.2.",
        "accuracy one can achieve by accepting an additional category every several words indicates that disambiguators can predict when their answers are unreliable.",
        "Readers may worry about correlation resulting from using the same corpus to both learn from and disambiguate.",
        "We have run tests by first learning from half of the LOB (600,000 words) and then disambiguating 80,000 words of random text from the other half, The accuracy figures varied by less than 5% from the ones we present, which, given the size of the LOB, is to be expected.",
        "We have also applied each disambiguation method to several smaller (13,000 word) sets of sentences which were selected at complete random from throughout the LOB.",
        "Accuracy varied both up and down from the figures we present, by up to 20% in terms of words per error, but relative accuracy between methods remained constant.",
        "The fact the Method D with F -= 1 (with F = 1 Method D returns only one category per word) performs as well or even better on the LOB than DeRose's algorithm indicates that, with exceptions, disambiguation has very limited rightward dependence: Method D employs a one category lookaheacl, whereas DeRose's looks to the end of the sentence.",
        "This suggests that Church's strategy of using trigrams instead of cligrams may be wasteful.",
        "Church manages to achieve results similar or slightly better than DeRose's by defining the probability that a category A appears in a sequence ABC to be the number of times the sequence ABC appears divided by the number of times the sequence BC appears.",
        "In a 100 category system, this scheme requires an enormous table of data, which must be culled from tagged text_ If the rightward dependence of disambiguation is small, as the data suggests, then the extra effort may be for naught.",
        "Based on our results, it is more efficient to use digrams in general and only mark special cases for trigrams, which would reduce space and learning requirements substantially.",
        "Integrating Disambiguator and Parser: As the LOB corpus is pretagged, we could ignore disambiguation problems altogether, but to guarantee that our system can be applied to arbitrary texts, we have integrated a variation of disambiguation Method D with our parser.",
        "When a sentence is parsed, the parser is initially passed all categories returned by Method D with F = .01.",
        "The disambiguator substantially reduces the time and space the parser needs for a given parse, and increases the parser's accuracy.",
        "The parser introduces syntactic constraints that perform the remaining disambiguation well."
      ]
    },
    {
      "heading": "THE PARSER",
      "text": [
        "Introduction: The LOB corpus contains unedited English, some of which is quite complex and some of which is ungrammatical.",
        "No known parser could produce full parses of all the material, and even one powerful enough to do so would undoubtably take an impractical length of time.",
        "To facilitate the analysis of the LOB, we have implemented a simple parser which is capable of rapidly parsing simple constructs and of \"failing gracefully\" in more complicated situations.",
        "By trading completeness for accuracy, and by utilizing the statistical disambiguator, the parser can perform rapidly and correctly enough to usefully parse the entire LOB in a few hours.",
        "Figure 2 presents a sample parse from the LOB.",
        "The parser employs three methods to build phrases.",
        "CFG-like rules are used to recognize lengthy, less structured constructions such as NPs, names, dates, and verb systems Neigh-boring phrases can connect to build the higher level binary-branching structure found in English, and single phrases can he projected into new ones.",
        "The ability of neighboring phrase pairs to initiate the CFG-like rules permits context-sensitive parsing.",
        "And, to increase the efficiency of the parser, an innovative system of deterministically discarding certain phrases is used, called \"lowering\".",
        "Some Parser Details: Each word in an input sentence is tagged as starting and ending at a specific numerical location, hi the sentence \"I saw Mary.\" the parser would insert the locations 0-4, 0 I 1 SAW 2 MARY 3 .",
        "> (IP (NP (PROP (N MR) (NAME MICHAEL) (NAME FOOT)))",
        "4.",
        "A phrase consists of a category, starting and ending locations, and a collection of feature and tree information.",
        "A verb phrase extending from 1 to 3 would print as [VP 1 3].",
        "Rules consist of a state name and a location.",
        "If a verb phrase recognition rule was firing in location 1, it would get printed as MO at 1) where VP0 is the name of the rule state.",
        "Phrases and rules which have yet to be processed are placed on a queue.",
        "At parse initialization, phrases are created from each word and its category(ies), and placed on the queue along with an end-of-sentence marker.",
        "The parse proceeds by popping the top rule or phrase off the queue and performing actions on it.",
        "Figure 3 contains a detailed specification of the parser algorithm, along with parts of a grammar It should be comprehensible after the following overview and parse example.",
        "When a phrase is popped off the queue, rules are checked to see if they fire on it, a table is examined to see if the phrase automatically projects to another phrase or creates a rule, and neighboring phrases are examined in case they can pair with the popped phrase to either connect into a new phrase or create a rule.",
        "Thus the grammar consists of three tables, the \"rule-action-table\" which specifies what action a rule in a certain state should take if it encounters a phrase with a given category and features; a \"single- phrase-action-table\" which specifies whether a phrase with a given category and features should project or start a rule; and a \"paired-phrase-action-table\" which specifies possible actions to take if two certain phrases abut each other.",
        "For a rule to fire on a phrase, the rule must be at the starting position of the phrase.",
        "Possible actions that can be taken by the rule are: accepting the phrase (shift the dot in the rule); closing, or creating a phrase from all phrases accepted so far; or both, creating a phrase and continuing the rule to recognize a larger phrase should it exist.",
        "Interestingly, when an enqueued phrase is accepted, it is \"lowered\" to the bottom of the queue, and when a rule closes to create a phrase, all other phrases it may have already created are lowered also.",
        "As phrases are created, a call is made to a set of transducer functions which generate more principled interpretations of the phrases, with appropriate features and tree relations.",
        "The representations they build are only for output, and do not affect the parse.",
        "An exception is made to allow the functions to project and modify features, which eases handling of sub-categorization and agreement.",
        "The transducers can be used to generate a constant output syntax as the internal grammar varies, and vice versa.",
        "New phrases and rules are placed on the queue only after all actions resulting from a given pop of the queue have been taken.",
        "The ordering of their placement has a dramatic effect on how the parse proceeds.",
        "By varying the queuing placement and the definition of when a parse is finished, the efficiency and accuracy of the parser can be radically altered.",
        "The parser orders these new rules and phrases by placing rules first, and then pushes all of them onto the stack.",
        "This means that new rules will always have precedence over newly created phrases, and hence will fire in a successive \"rule chain\".",
        "If all items were eventually popped off the stack, the ordering would be irrelevant.",
        "However, since the parse is stopped at the end-of-sentence marker, all phrases which have been \"lowered\" past the marker are never examined.",
        "The part of speech disambiguator can pass in several categories for any one word, which are ordered on the stack by likelihood, most probable first.",
        "When any lexical phrase is lowered to the back of the queue (presumably because it was accepted by some rule) all other lexical phrases associated with the same word are also lowered.",
        "We have found that this both speeds up parsing and increases accuracy.",
        "That this speeds up parsing should be obvious.",
        "That it increases accuracy is much less so.",
        "Remember that disambiguation Method D is",
        "Let daughters= the set of all phrases which have been accepted in the rule chain which led to R. including the phrase P. Let 1 = the leftmost starting location of any phrase in daughters.",
        "Create new phrase.",
        "[new-cat 1 A ‘vil It daughters daughters.",
        "For all phrases p in daughters.",
        "perform lower (p).",
        "For all phrases p created (via accept-and-close) by the rule chain which led to perform lower (p).",
        "substantially more accurate the DeRose's algorithm only because it can return more than one category per word.",
        "One might guess that if the parser were to lower all extra categories on the queue that nothing would have been gained.",
        "But the top-down nature of the parser is sufficient in most cases to \"pick out\" the correct category from the several available (see Milne 1988 for a detailed exposition of this).",
        "A Parse in Detail: Figure 4 shows a parse of the sentence \"The pastry chef placed the pie in the oven.\" In the figure, items to the left of the vertical line are the phrases and rules popped off the stack.",
        "To the right of each item is a list of all new items created as a result of it being popped.",
        "At the start of the parse, phrases were created from each word and their corresponding categories, which were correctly (and uniquely) determined by the disambigua-t or.",
        "The first item is popped off the queue, this being the [DET 0 1] phrase corresponding to the word \"the\".",
        "The single-phrase action table indicates that a DETO rule should be started at location 0 and immediately fires on \"the\", which is accepted and the rule (DET1 at 1) is accordingly created and placed on the queue.",
        "This rule is then popped off the queue, and accepts the [N 1 2] corresponding to \"pastry\", also closing and creating the phrase ENP 0 2].",
        "When this phrase is created, all queued phrases which contributed to it are lowered in priority, i.e., \"pastry\".",
        "The rule (DET2 at 2) is created to recognize a possibly longer NP, and is popped off the queue in line 4.",
        "Here much the same thing happens as in line 3, except that the [NP 0 2] previously created is lowered as the phrase DIP 0 3] is created.",
        "In line 5, the rule chain keeps firing, but there are no phrases starting at location 3 which can be used by the rule state DET2.",
        "The next item on the queue is the newly created [NP 0 3], but it neither fires a rule (which would have to be in location 0), finds any action in the single-phrase table, or pairs with any neighboring phrase to fire an action in the paired-phrase table, so no new phrases or rules are created.",
        "Hence, the verb \"placed\" is popped and the single-phrase table indicates that it should create a rule which then immediately accepts \"placed\", creating a VP and placing the rule (VP4 at 4) in location 4.",
        "The VP is popped off the stack, but not attached to [NP 0 3] to form a sentence, because the paired-phrase table specifies that for those two phrases to connect to become an S, the verb phrase must have the feature (expect .",
        "nil), indi",
        "\"The pastry chef placed the pie in the oven\".",
        "Dictionary lookup and disambiguation were performed prior to the parse.",
        "eating that all of its argument positions have been filled.",
        "However when the VP was created, the VP transducer call gave it the feature (expect .",
        "NP), indicating that it is lacking an NP argument.",
        "In line 15, such an argument is popped from the stack and pairs with the VP as specified in the paired-phrase table, creating a new phrase, [VP 3 6].",
        "This new vp then pairs with the subject, forming Is 0 6].",
        "In line 18, the preposition \"in\" is popped, but it does not create any rules or phrases.",
        "Only when the NP \"the oven\" is popped does it pair to create [PP 6 9].",
        "Although it should be attached as an argument",
        "to the verb, the subcategorization frames (contained in the expect feature of the VP) do not allow for a prepositional phrase argument.",
        "After the period is popped in line 25, the end-of-sentence marker is popped and the parse stops.",
        "At this time, 5 phrases have been lowered and remain on the queue.",
        "To choose which phrases to output, the parser picks the longest phrase starting at location 0, and then the longest phrase starting where the first ended, etc."
      ]
    },
    {
      "heading": "The Reasoning behind the Details: The",
      "text": [
        "parser has a number of salient features to it, including the combination of top-down and bottom-up methods, the use of transducer functions to create tree structure, and the system of lowering phrases off the queue.",
        "Each was necessary to achieve sufficient flexibility and efficiency to parse the LOB corpus.",
        "As we have mentioned, it would be naive of us to believe that we could completely parse the more difficult sentences in the corpus.",
        "The next best thing is to recognize smaller phrases in these sentences.",
        "This requires some bottom-up capacity, which the parser achieves through the single-phrase and paired-phrase action tables.",
        "In order to avoid overgeneration of phrases, the rules (in conjunction with the \"lowering\" system and method of selecting output phrases) provide a top-down capability which can prevent some valid smaller phrases from being built.",
        "Although this can stifle some correct parses' we have not found it to do so often.",
        "Readers may notice that the use of special mechanisms to project single phrases and to connect neighboring phrases is unnecessary, since rules could perform the same task.",
        "However, since projection and binary attachment are so common, the parser's efficiency is greatly improved by the additional methods.",
        "The choice of transducer functions to create tree structure has roots in our previous experiences with principle-based structures.",
        "Modern linguistic theories have shown themselves to be valuable constraint systems when applied to sentence tree-structure, but do not necessarily provide efficient means of initially generating the structure.",
        "By using transducers to map For instance, the parser always generates the longest possible phrase it can from a sequence of words, a heuristic which can in some cases fail.",
        "We have found that the only situation in which this heuristic fails regularly is in verb argument attachment; with a more restrictive sub categorization system, it would not be much of a problem.",
        "between surface structure and more principled trees, we have eliminated much of the computational cost involved in principled representations.",
        "The mechanism of lowering phrases off the stack is also intended to reduce computational cost, by introducing determinism into the parser.",
        "The effectiveness of the method can be seen in the tables of Figure 5, which compare the parser's speed with and without lowering."
      ]
    },
    {
      "heading": "RESULTS",
      "text": [
        "We have used the parser, both with and without the lexical disambiguator, to analyze large portions of the LOB corpus.",
        "Our grammar is small; the three primary tables have a total of 134 actions, and the transducer functions are restricted to (outside of building tree structure) projecting categories from daughter phrases upward, checking agreement and case, and dealing with verb sub categorization features.",
        "Verb sub categorization information is obtained from the Oxford Advanced Learner's Dictionary of Contemporary English (Hornby et al. 1973), which often includes unusual verb aspects, and consequently the parser tends to accept too many verb arguments.",
        "The parser identifies phrase boundaries surprisingly well, and usually builds structures up to the point of major sentence breaks such as commas or conjunctions.",
        "Disambiguation failure is almost nonexistent.",
        "At the end of this paper is a sequence of parses of sentences from the corpus.",
        "The parses illustrate the need for a better sub categorization system and some method for dealing with conjunctions and parentheti-cals, which tend to break up sentences.",
        "Figure 5 presents some plots of parser speed on a random 624 sentence subset of the LOB, and compares parser performance with and without lowering, and with arid without disambiguation.",
        "Graphs 1 and 2 (2 is a zoom of 1) illustrate the speed of the parser, and Graph 3 plots the number of phrases the parser returns for a sentence of a given length, which is a measure of how much coverage the grammar has and how much the parser accomplishes.",
        "Graph 4 plots the number of phrases the parser builds during an entire parse, a good measure of the work it performs.",
        "Not surprisingly, there is a very smooth curve relating the number of phrases built and parse time.",
        "Graphs 5 and 6 are included to show the necessity of disambiguation and lowering, and indicate a substantial reduction in speed if either is absent.",
        "There is also a substantial reduction in accuracy.",
        "In the no disambiguation case, the parser is passed all cate",
        "gories every word can take, in random order.",
        "Parser accuracy is a difficult statistic to measure.",
        "We have carefully analyzed the parses .assigned to many hundreds of LOB sentences, and are quite pleased with the results.",
        "Al",
        "though there are many sentences where the parser is unable to build substantial structure, it rarely builds incorrect phrases.",
        "A pointed exception is the propensity for verbs to take too many arguments.",
        "To get a feel for the parser's ac",
        "curacy, examine the Appendix, which contains unedited parses from the LOB."
      ]
    },
    {
      "heading": "BIBLIOGRAPHY",
      "text": []
    },
    {
      "heading": "APPENDIX: Sample Parses",
      "text": [
        "The following are several sentences from the beginning of the LOB, parsed with our system.",
        "Because of space considerations, indenting does not necessarily reflect tree structure."
      ]
    },
    {
      "heading": "THOUGH THEY MAY GATHER SOME LEFT-WING SUPPORT i LARGE NAJORITY OF LABOUR MPS ARE LIKELY TO TURN DOWN THE FOOT-GRIFFITHS RESOLUTION .",
      "text": []
    },
    {
      "heading": "THE TWO RIVAL AFRICAN NATIONALIST PARTIES OF NORTHERN RHODESIA HAVE AGREED TO GET TOGETHER TO FACE THE CHALLENGE FROM SIR ROY WELENsKY THE FEDERAL PREMIER .",
      "text": [
        "• (Ip (NP (HP (DET THE) (NUM (CD TWO)) (JJ RIVAL) (JJ AFRICAN) (JJ NATIONALIST)"
      ]
    }
  ]
}
