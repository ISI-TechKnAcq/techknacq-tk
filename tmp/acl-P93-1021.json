{
  "info": {
    "authors": [
      "Chinatsu Aone",
      "Douglas McKee"
    ],
    "book": "Annual Meeting of the Association for Computational Linguistics",
    "id": "acl-P93-1021",
    "title": "A Language-Independent Anaphora Resolution System for Understanding Multilingual Texts",
    "url": "https://aclweb.org/anthology/P93-1021",
    "year": 1993
  },
  "references": [
    "acl-A88-1003",
    "acl-C88-1021",
    "acl-C90-3063",
    "acl-H93-1028",
    "acl-J86-3001",
    "acl-M92-1035",
    "acl-P83-1007",
    "acl-P86-1034",
    "acl-P87-1022",
    "acl-P89-1030",
    "acl-P89-1031",
    "acl-P89-1032",
    "acl-P92-1024"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "This paper describes a new discourse module within our multilingual NLP system.",
        "Because of its unique data-driven architecture, the discourse module is language-independent.",
        "Moreover, the use of hierarchically organized multiple knowledge sources makes the module robust and trainable using discourse-tagged corpora.",
        "Separating discourse phenomena from knowledge sources makes the discourse module easily extensible to additional phenomena."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "This paper describes a new discourse module within our multilingual natural language processing system which has been used for understanding texts in English, Spanish and Japanese (cf. [1, 2]).1 The following design principles underlie the discourse module:",
        "• Language-independence: No processing code depends on language-dependent facts.",
        "• Extensibility: It is easy to handle additional phenomena.",
        "• Robustness: The discourse module does its best even when its input is incomplete or wrong.",
        "• Trainability: The performance can be tuned for particular domains and applications.",
        "In the following, we first describe the architecture of the discourse module.",
        "Then, we discuss how its performance is evaluated and trained using discourse-tagged corpora.",
        "Finally, we compare our approach to other research.",
        "I Our system has been used in several data extraction tasks and a prototype machine translation system."
      ]
    },
    {
      "heading": "2 Discourse Architecture",
      "text": [
        "Our discourse module consists of two discourse processing submodules (the Discourse Administrator and the Resolution Engine), and three discourse knowledge bases (the Discourse Knowledge Source KB, the Discourse Phenomenon KB, and the Discourse Domain KB).",
        "The Discourse Administrator is a development-time tool for defining the three discourse KB's. The Resolution Engine, on the other hand, is the runtime processing module which actually performs anaphora resolution using these discourse KB's. The Resolution Engine also has access to an external discourse data structure called the global discourse world, which is created by the top-level text processing controller.",
        "The global discourse world holds syntactic, semantic, rhetorical, and other information about the input text derived by other parts of the system.",
        "The architecture is shown in Figure 1."
      ]
    },
    {
      "heading": "2.1 Discourse Data Structures",
      "text": [
        "There are four major discourse data types within the global discourse world: Discourse World (DW), [)is",
        "course Clause (DC), Discourse Marker (DM), and File Card (FC), as shown in Figure 2.",
        "The global discourse world corresponds to an entire text, and its sub-discourse worlds correspond to subcomponents of the text such as paragraphs.",
        "Discourse worlds form a tree representing a text's structure.",
        "A discourse clause is created for each syntactic structure of category S by the semantics module.",
        "It can correspond to either a full sentence or a part of a full sentence.",
        "Each discourse clause is typed according to its syntactic properties.",
        "A discourse marker (cf. Kamp [14], or \"discourse entity\" in Ayuso [3]) is created for each noun or verb in the input sentence during semantic interpretation.",
        "A discourse marker is static in that once it is introduced to the discourse world, the information within it is never changed.",
        "Unlike a discourse marker, a file card (cf. Heim [11], \"discourse referent\" in Karttunen [15], or \"discourse entity\" in Webber [19]) is dynamic in a sense that it is continually updated as the discourse processing proceeds.",
        "While an indefinite discourse marker starts a file card, a definite discourse marker updates an already existing file card corresponding to its antecedent.",
        "In this way, a file card keeps track of all its co-referring discourse markers, and accumulates semantic information within them."
      ]
    },
    {
      "heading": "2.2 Discourse Administrator",
      "text": [
        "Our discourse module is customized at development time by creating and modifying the three discourse KB's using the Discourse Administrator.",
        "First, a discourse domain is established for a particular NLP application.",
        "Next, a set of discourse phenomena which should be handled within that domain by the discourse module is chosen (e.g. definite NP, 3rd person pronoun, etc.)",
        "because some phenomena may not be necessary to handle for a particular application domain.",
        "Then, for each selected discourse phenomenon, a set of discourse knowledge sources are chosen which are applied during anaphora resolution, since different discourse phenomena require different sets of knowledge sources."
      ]
    },
    {
      "heading": "2.2.1 Discourse Knowledge Source KB",
      "text": [
        "The discourse knowledge source KB houses small well-defined anaphora resolution strategies.",
        "Each knowledge source (KS) is an object in the hierarchically organized KB, and information in a specific KS can be inherited from a more general KS.",
        "There are three kinds of KS's: a generator, a filter and an orderer.",
        "A generator is used to generate pos",
        "sible antecedent hypotheses from the global discourse world.",
        "Unlike other discourse systems, we have multiple generators because different discourse phenomena exhibit different antecedent distribution patterns (cf. Guindon et al.",
        "[10]).",
        "A filter is used to eliminate impossible hypotheses, while an orderer is used to rank possible hypotheses in a preference order.",
        "The KS tree is shown in Figure 3.",
        "Each KS contains three slots: ks-function, ks-data, and ks-language.",
        "The ks-function slot contains a functional definition of the KS.",
        "For example, the functional definition of the Syntactic-Gender filter defines when the syntactic gender of an anaphor is compatible with that of an antecedent hypothesis.",
        "A ks-data slot contains data used by ks-function.",
        "The separation of data from function is desirable because a parent KS can specify ks-function while its sub-KS's inherit the same ks-function but specify their own data.",
        "For example, in languages like English and Japanese, the syntactic gender of a pronoun imposes a semantic gender restriction on its antecedent.",
        "An English pronoun \"he\", for instance, can never refer to an NP whose semantic gender is female like \"Ms. Smith\".",
        "The top-level Semantic-Gender KS, then, defines only ks-function, while its sub-KS's for English and Japanese specify their own ks-data and inherit the same ks-function.",
        "A k.s-language slot specifies languages if a particular KS is applicable for specific languages.",
        "Most of the KS's are language-independent (e.g. all the generators and the semantic type filters), and even when they are language-specific, the function",
        "definitions are shared.",
        "In this way, much of the discourse knowledge source KB is sharable across different languages.",
        "The discourse phenomenon KB contains hierarchically organized discourse phenomenon objects as shown in Figure 4.",
        "Each discourse phenomenon object has four slots (dp-definition, dp-main-strategy, dp-backup-strategy, and dp-language) whose values can be inherited.",
        "The dp-definition of a discourse phenomenon object specifies a definition of the discourse phenomenon so that an anaphoric discourse marker can be classified as one of the discourse phenomena.",
        "The dp-main-strategy slot specifies, for each phenomenon, a set of KS's to apply to resolve this particular discourse phenomenon.",
        "The dp-backupstrategy slot, on the other hand, provides a set of backup strategies to use in case the main strategy fails to propose any antecedent hypothesis.",
        "The dp-language slot specifies languages when the discourse phenomenon is only applicable to certain languages (e.g. Japanese \"dou\" ellipsis).",
        "When different languages use different sets of KS's for main strategies or backup strategies for the same discourse phenomenon, language specific (11)-main-strategy or dp-backup-strategy values are specified.",
        "For example, when an anaphor is a 3rd person pronoun in a partitive construction (i.e. :3PRO-Partitive-Parent)2, Japanese uses a different generator for the main strategy (Current-and-Previous-DC) than English and Spanish (Current-and-Previous-Sentence).",
        "2e.g.",
        "\"three of them\" in English, \"tres de riles\" in Spanish, san-nin\" in Japanese Because the discourse KS's are independent of discourse phenomena, the same discourse KS can be shared by different discourse phenomena.",
        "For example, the Semantic-Superclass filter is used by both Definite-NP and Pronoun, and the Recency orderer is used by most discourse phenomena.",
        "The discourse domain KB contains discourse domain objects each of which defines a set of discourse phenomena to handle in a particular domain.",
        "Since texts in different domains exhibit different sets of discourse phenomena, and since different applications even within the same domain may not have to handle the same set of discourse phenomena, the discourse domain KB is a way to customize and constrain the workload of the discourse module."
      ]
    },
    {
      "heading": "2.3 Resolution Engine",
      "text": [
        "The Resolution Engine is the runtime processing module which finds the best antecedent hypothesis for a given anaphor by using data in both the global discourse world and the discourse KB's. The Resolution Engine's basic operations are shown in Figure 5.",
        "The Resolution Engine uses the discourse phenomenon KB to classify an anaphor as one of the discourse phenomena (using dp-definition values) and to determine a set of KS's to apply to the anaphor (using dp-main-strategy values).",
        "The Engine then applies the generator KS to get an initial set of hypotheses and removes those that do not pass the filter",
        "KS's. If only one hypothesis remains, it is returned as the anaphor's referent, but there may be more than one hypothesis or none at all.",
        "When there is more than one hypothesis, orderer KS's are invoked.",
        "However, when more than one orderer KS could apply to the anaphor, we face the problem of how to combine the preference values returned by these multiple orderers.",
        "Some anaphora resolution systems (cf. Carbonell and Brown [6], Rich and LuperFoy [16], Rimon et al.",
        "[17]) assign scores to antecedent hypotheses, and the hypotheses are ranked according to their scores.",
        "Deciding the scores output by the orderers as well as the way the scores are combined requires more research with larger data.",
        "In our current system, therefore, when there are multiple hypotheses left, the most \"promising\" orderer is chosen for each discourse phenomenon.",
        "In Section 3, we discuss how we choose stic.h an orderer for each discourse phenomenon by using statistical preference.",
        "In the future, we will experiment with ways for each orderer to assign \"meaningful\" scores to hypotheses.",
        "When there is no hypothesis left after the main strategy for a discourse phenomenon is performed, a series of backup strategies specified in the discourse phenomenon KB are invoked.",
        "Like the main strategy, a backup strategy specifies which generators, filters, and orderers to use.",
        "For example, a backup strategy may choose a new generator which generates more hypotheses, or it may turn off some of the filters used by the main strategy to accept previously rejected hypotheses.",
        "How to choose a new generator or how to use only a subset of filters can be determined by training the discourse module on a corpus tagged with discourse relations, which is discussed in Section 3.",
        "Thus, for example, in order to resolve a 3rd person pronoun in a partitive in an appositive (e.g. anaphor ID=102:3 in Figure 7), the phenomenon KB specifies the following main strategy for Japanese: generator = Head-NP, filters = {Semantic-Amount, Semantic-Cla.ss, Semantic-Supercla.ss}, orderer = Recency.",
        "This particular generator is chosen because in almost every example in 50 Japanese texts, this type of anaphora has its antecedent in its head NP.",
        "No syntactic filters are used because the anaphor has no useful syntactic information.",
        "As a backup strategy, a new generator, Adjacent-NP, is chosen in case the parse fails to create an appositive relation between the antecedent NP ID= 1022 and the anaphor."
      ]
    },
    {
      "heading": "2.3.2 Updating the Global Discourse World",
      "text": [
        "After each anaphor resolution, the global discourse world is updated as it would be in File Change Semantics (cf. Heim [11]), and as shown in Figure 6.",
        "First, the discourse marker for the anaphor is incorporated into the file card to which its antecedent discourse marker points so that the co-referring discourse markers point to the same file card.",
        "Then, the semantics information of the file card is updated so that it reflects the union of the information from all the co-referring discourse markers.",
        "In this way, a file card accumulates more information as the discourse processing proceeds.",
        "The motivation for having both discourse markers and file cards is to make the discourse processing a monotonic operation.",
        "Thus, the discourse processing does not replace an anaphoric discourse marker with its antecedent discourse marker, but only creates or updates file cards.",
        "This is both theoretically and computationally advantageous because the discourse processing can be redone by just retracting the file cards and reusing the same discourse markers."
      ]
    },
    {
      "heading": "2.4 Advantages of Our Approach",
      "text": [
        "Now that we have described the discourse module in detail, we summarize its unique advantages.",
        "First, it is the only working language-independent discourse system we are aware of.",
        "By \"language-independent,\" we mean that the discourse module can be used for different languages if discourse knowledge is added for a new language.",
        "Second, since the anaphora resolution algorithm is not hard-coded in the Resolution Engine, but is kept in the discourse KB's, the discourse module is extensible to a new discourse phenomenon by choosing existing discourse KS's or adding new discourse KS's which the new phenomenon requires.",
        "Making the discourse module robust is another important goal especially when dealing with real-world input, since by the time the input is processed and passed to the discourse module, the syntactic or semantic information of the input is often not as accurate as one would hope.",
        "The discourse module must be able to deal with partial information to make a decision.",
        "By dividing such decision-making into multiple discourse KS's and by letting just the applicable KS's fire, our discourse module handles partial information robustly.",
        "Robustness of the discourse module is also manifested when the imperfect discourse KB's or an inaccurate input cause initial anaphor resolution to fail.",
        "When the main strategy fails, a set of backup strategies specified in the discourse phenomenon KB provides alternative ways to get the best antecedent hypothesis.",
        "Thus, the system tolerates its own insufficiency in the discourse KB's as well as degraded input in a robust fashion."
      ]
    },
    {
      "heading": "3 Evaluating and Training the Discourse Module",
      "text": [
        "In order to choose the most effective KS's for a particular phenomenon, as well as to debug and track progress of the discourse module, we must be able to evaluate the performance of discourse processing.",
        "To perform objective evaluation, we compare the results of running our discourse module over a corpus with a set of manually created discourse tags.",
        "Examples of discourse-tagged text are shown in Figure 7.",
        "The metrics we use for evaluation are detailed in Figure 8."
      ]
    },
    {
      "heading": "3.1 Evaluating the Discourse Module",
      "text": [
        "We evaluate overall performance by calculating recall and precision of anaphora resolution results.",
        "The higher these measures are, the better the discourse module is working.",
        "In addition, we evaluate the discourse performance over new texts, using blackbox evaluation (e.g. scoring the results of a data extraction task.)",
        "To calculate a generator's failure rate, a filter's false positive rate, and an orderer's effectiveness, the algorithms in Figure 9 are used.'"
      ]
    },
    {
      "heading": "3.2 Choosing Main Strategies",
      "text": [
        "The uniqueness of our approach to discourse analysis is also shown by the fact that our discourse module can be trained for a particular domain, similar to the ways grammars have been trained (cf. Black",
        "For each discourse phenomenon, given anaphor and antecedent pairs in the corpus, calculate how often the generator fails to generate the antecedents.",
        "For each discourse phenomenon, given anaphor and antecedent pairs in the corpus, for each filter, calculate how often the filter incorrectly eliminates the antecedents.",
        "For each anaphor exhibiting a given discourse phenomenon in the corpus, given the remaining antecedent hypotheses for the anaphor, for each applicable orderer, test if the orderer chooses the correct antecedent as the best hypothesis.",
        "[4]).",
        "As Walker [18] reports, different discourse algorithms (i.e. Brennan, Friedman and Pollard's centering approach [5] vs. Hobbs' algorithm [12]) perform differently on different types of data.",
        "This suggests that different sets of KS's are suitable for different domains.",
        "In order to determine, for each discourse phenomenon, the most effective combination of generators, filters, and orderers, we evaluate overall performance of the discourse module (cf.",
        "Section 3.1) at different rate settings.",
        "We.",
        "measure particular generators, filters, and orders for different phenomena to identify promising strategies.",
        "We try to minimize the failure rate and the false positive rate while minimizing the average number of hypotheses that the generator suggests and maximizing the number of hypotheses that the filter eliminates.",
        "As for orderers, those with highest effectiveness measures are chosen for each phenomenon.",
        "The discourse module is \"trained\" until a set of rate settings at which the overall performance of the discourse module becomes highest is obtained.",
        "Our approach is more general than Dagan and Rai [7], which reports on training their anaphora resolution component so that \"it\" can be resolved to its correct antecedent using statistical data on lexical relations derived from large corpora.",
        "We will certainly incorporate such statistical data into our discourse KS's."
      ]
    },
    {
      "heading": "3.3 Determining Backup Strategies",
      "text": [
        "If the main strategy for resolving a particular anaphor fails, a backup strategy that includes either a new set of filters or a new generator is attempted.",
        "Since backup strategies are employed only when the main strategy does not return a hypothesis, a backup strategy will either contain fewer filters than the main strategy or it will employ a generator that returns more hypotheses.",
        "If the generator has a non-zero failure rate 4 , a new generator with more generating capability is chosen from the generator tree in the knowledge source KB as a backup strategy.",
        "Filters that occur in the main strategy but have false positive rates above a certain threshold are not included in the backup strategy."
      ]
    },
    {
      "heading": "4 Related Work",
      "text": [
        "Our discourse module is similar to Carbonell and Brown [6] and Rich and LuperFoy's [16] work in using multiple KS's rather than a monolithic approach (cf. Grosz, Joshi and Weinstein [9], Grosz and Sidner [8], Hobbs [12], Ingria and Stallard [13]) for anaphora resolution.",
        "However, the main difference is that our system can deal with multiple languages as well as multiple discourse phenomena' because of our more fine-grained and hierarchically organized KS's. Also, our system can be evaluated and tuned at a low level because each KS is independent of discourse phenomena and can be turned off and on for automatic evaluation.",
        "This feature is very important because we use our system to process real-world data in different domains for tasks involving text understanding."
      ]
    }
  ]
}
