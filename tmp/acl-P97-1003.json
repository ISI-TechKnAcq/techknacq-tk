{
  "info": {
    "authors": [
      "Michael John Collins"
    ],
    "book": "Annual Meeting of the Association for Computational Linguistics",
    "id": "acl-P97-1003",
    "title": "Three Generative, Lexicalized Models for Statistical Parsing",
    "url": "https://aclweb.org/anthology/P97-1003",
    "year": 1997
  },
  "references": [
    "acl-C96-1058",
    "acl-H91-1060",
    "acl-H94-1020",
    "acl-H94-1052",
    "acl-J93-2004",
    "acl-P95-1037",
    "acl-P96-1008",
    "acl-P96-1023",
    "acl-P96-1025",
    "acl-W96-0213"
  ],
  "sections": [
    {
      "heading": "Abstract",
      "text": [
        "In this paper we first propose a new statistical parsing model, which is a generative model of lexicalised context-free grammar.",
        "We then extend the model to include a probabilistic treatment of both sub-categorisation and wh-movement.",
        "Results on Wall Street Journal text show that the parser performs at 88.1/87.5% constituent precision/recall, an average improvement of 2.3% over (Collins 96)."
      ]
    },
    {
      "heading": "1 Introduction",
      "text": [
        "Generative models of syntax have been central in linguistics since they were introduced in (Chom-sky 57).",
        "Each sentence-tree pair (S, T) in a language has an associated top-down derivation consisting of a sequence of rule applications of a grammar.",
        "These models can be extended to be statistical by defining probability distributions at points of non-determinism in the derivations, thereby assigning a probability 'P(S,T) to each (S, T) pair.",
        "Probabilistic context free grammar (Booth and Thompson 73) was an early example of a statistical grammar.",
        "A PCFG can be lexicalised by associating a headword with each non-terminal in a parse tree; thus far, (Magerman 95; Jelinek et al.",
        "94) and (Collins 96), which both make heavy use of lexical information, have reported the best statistical parsing performance on Wall Street Journal text.",
        "Neither of these models is generative, instead they both estimate 'P(T 1 S) directly.",
        "This paper proposes three new parsing models.",
        "Model 1 is essentially a generative version of the model described in (Collins 96).",
        "In Model 2, we extend the parser to make the complement/adjunct distinction by adding probabilities over subcategori-sation frames for headwords.",
        "In Model 3 we give a probabilistic treatment of wh-movement, which",
        "is derived from the analysis given in Generalized Phrase Structure Grammar (Gazdar et al.",
        "95).",
        "The work makes two advances over previous models: First, Model 1 performs significantly better than (Collins 96), and Models 2 and 3 give further improvements – our final results are 88.1/87.5% constituent precision/recall, an average improvement of 2.3% over (Collins 96).",
        "Second, the parsers in (Collins 96) and (NIagerman 95; Jelinek et al.",
        "94) produce trees without information about wh-movement or subcategorisation.",
        "Most NLP applications will need this information to extract predicate-argument structure from parse trees.",
        "In the remainder of this paper we describe the 3 models in section 2, discuss practical issues in section 3, give results in section 4, and give conclusions in section 5."
      ]
    },
    {
      "heading": "2 The Three Parsing Models 2.1 Model 1",
      "text": [
        "In general, a statistical parsing model defines the conditional probability, P(T S), for each candidate parse tree T for a sentence S. The parser itself is an algorithm which searches for the tree, Tb„t, that maximises 'P(T 1 S).",
        "A generative model uses the observation that maximising P(T, S) is equivalent to maximising P(T I S): 1",
        "to a top-down derivation of the tree.",
        "In a PCFG, for a tree derived by n applications of context-free rewrite rules LH Si RH Si, 1 i n,",
        "The rewrite rules are either internal to the tree, where LH S is a non-terminal and RH S is a string",
        "of one or more non-terminals; or lexical, where LH S is a part of speech tag and RH S is a word.",
        "A PCFG can be lexicalised2 by associating a word w and a part-of-speech (POS) tag t with each non-terminal X in the tree.",
        "Thus we write a non-terminal as X(x), where x = (w,t), and X is a constituent label.",
        "Each rule now has the form3:",
        "H is the head-child of the phrase, which inherits the headword h from its parent P. L1...L„ and are left and right modifiers of H. Either n or m may be zero, and n = m = 0 for unary rules.",
        "Figure 1 shows a tree which will be used as an example throughout this paper.",
        "The addition of lexical heads leads to an enormous number of potential rules, making direct estimation of P (RH S I LH S) infeasible because of sparse data problems.",
        "We decompose the generation of the RHS of a rule such as (3), given the LHS, into three steps – first generating the head, then making the independence assumptions that the left and right modifiers are generated by separate 0th-order markov processes 4. .",
        "1.",
        "Generate the head constituent label of the phrase, with probability PH(H I P, h).",
        "2.",
        "Generate modifiers to the right of the head with probability Hz=1..,,±1 PR(R, (7-) I P, h, H).",
        "R„,44 (rn,..Fi) is defined as STOP – the STOP symbol is added to the vocabulary of non-terminals, and the model stops generating right modifiers when it is generated.",
        "2We find lexical heads in Penn treebank data using rules which are similar to those used by (Magerman 95; Jelinek et al.",
        "94).",
        "For example, the probability of the rule S (bought)",
        "but in general the probabilities could be conditioned on any of the preceding modifiers.",
        "In fact, if the derivation order is fixed to be depth-first – that is, each modifier recursively generates the sub-tree below it before the next modifier is generated – then the model can also condition on any structure below the preceding modifiers.",
        "For the moment we exploit this by making the approximations",
        "where distancei and distance,.",
        "are functions of the surface string from the head word to the edge of the constituent (see figure 2).",
        "The distance measure is the same as in (Collins 96), a vector with the following 3 elements: (1) is the string of zero length?",
        "(Allowing the model to learn a preference for right-branching structures); (2) does the string contain a",
        "verb?",
        "(Allowing the model to learn a preference for modification of the most recent verb).",
        "(3) Does the string contain 0, 1, 2 or > 2 commas?",
        "(where a comma is anything tagged as \",\" or",
        "word after h to the last word of R2, inclusive.",
        "In principle the model could condition on any structure dominated by H, R1 or R2."
      ]
    },
    {
      "heading": "2.2 Model 2: The complement/adjunct distinction and subcategorisation",
      "text": [
        "The tree in figure 1 is an example of the importance of the complement/adjunct distinction.",
        "It would be useful to identify \"Marks\" as a subject, and \"Last week\" as an adjunct (temporal modifier), but this distinction is not made in the tree, as both NPs are in the same position' (sisters to a VP under an S node).",
        "From here on we will identify complements by attaching a \"-C\" suffix to non-terminals – figure 3 gives an example tree.",
        "A post-processing stage could add this detail to the parser output, but we give two reasons for making the distinction while parsing: First, identifying complements is complex enough to warrant a probabilistic treatment.",
        "Lexical information is needed",
        " – for example, knowledge that \"week\" is likely to be a temporal modifier.",
        "Knowledge about subcategorisation preferences – for example that a verb takes exactly one subject – is also required.",
        "These problems are not restricted to NPs, compare \"The spokeswoman said (SBAR that the asbestos was dangerous)\" vs. \"Bonds beat short-term investments (SBAR because the market is down)\", where an SBAR headed by \"that\" is a complement, but an SBAR headed by \"because\" is an adjunct.",
        "The second reason for making the complement/adjunct distinction while parsing is that it may help parsing accuracy.",
        "The assumption that complements are generated independently of each other often leads to incorrect parses – see figure 4 for further explanation."
      ]
    },
    {
      "heading": "2.2.1 Identifying Complements and Adjuncts in the Penn Treebank",
      "text": [
        "We add the \"-C\" suffix to all non-terminals in training data which satisfy the following conditions:",
        "1.",
        "The non-terminal must be: (1) an NP, SBAR, or S whose parent is an S; (2) an NP, SBAR, S, or VP whose parent is a VP; or (3) an S whose parent is an SBAR.",
        "2.",
        "The non-terminal must not have one of the following semantic tags: ADV, VOC, BNF, DIR, EXT, LOG, MNR, TMP, CLR or PRP.",
        "See (Marcus et al.",
        "94) for an explanation of what these tags signify.",
        "For example, the NP \"Last week\" in figure 1 would have the TMP (temporal) tag; and the SBAR in \"(SBAR because the market is down)\", would have the ADV (adverbial) tag.",
        "In addition, the first child following the head of a prepositional phrase is marked as a complement."
      ]
    },
    {
      "heading": "2.2.2 Probabilities over Subcategorisation Frames",
      "text": [
        "The model could be retrained on training data with the enhanced set of non-terminals, and it might learn the lexical properties which distinguish complements and adjuncts (\"Marks\" vs -week\", or \"that\" vs. \"because\").",
        "However, it would still suffer from the bad independence assumptions illustrated in figure 4.",
        "To solve these kinds of problems, the generative process is extended to include a probabilistic choice of left and right subcategorisation frames:",
        "1.",
        "Choose a head H with probability PH (H IP, h).",
        "2.",
        "Choose left and right subcat frames, LC and RC, with probabilities Pic(LC I P, H, h) and",
        "Prc(RC I P,H,h).",
        "Each subcat frame is a multiset6 specifying the complements which the head requires in its left or right modifiers.",
        "3.",
        "Generate the left and right modifiers with probabilities Pi (Li, i I H, P, h, distancet(i – 1), LC) and Pr (Ri, ri I H, P, h, distancer(i – 1), RC) respectively.",
        "Thus the subcat requirements are added to the conditioning context.",
        "As complements are generated they are removed from the appropriate subcat multiset.",
        "Most importantly, the probability of generating the STOP symbol will be 0 when the subcat frame is non-empty, and the probability of generating a complement will be 0 when it is not in the subcat frame; thus all and only the required complements will be generated.",
        "The probability of the phrase S(bought) ->",
        "Here the head initially decides to take a single NP-C (subject) to its left, and no complements",
        "to its right.",
        "NP-C(Marks) is immediately generated as the required subject, and NP-C is removed from LC, leaving it empty when the next modifier, NP(week) is generated.",
        "The incorrect structures in figure 4 should now have low probability because Pic({NP-C , NP-C} I S , VP ,bought) and P„({NP-C ,VP-C} I VP , VB ,was) are small."
      ]
    },
    {
      "heading": "2.3 Model 3: Traces and Wh-Movement",
      "text": [
        "Another obstacle to extracting predicate-argument structure from parse trees is wh-movement.",
        "This section describes a probabilistic treatment of extraction from relative clauses.",
        "Noun phrases are most often extracted from subject position, object position, or from within PPs: Example 1 The store (SBAR which TRACE bought Brooks Brothers) Example 2 The store (SBAR which Marks bought TRACE) x Example 3 The store (SBAR which Marks bought Brooks Brothers from TRACE) It might be possible to write rule-based patterns which identify traces in a parse tree.",
        "However, we argue again that this task is best integrated into the parser: the task is complex enough to warrant a probabilistic treatment, and integration may help parsing accuracy.",
        "A couple of complexities are that modification by an SBAR does not always involve extraction (e.g., \"the fact (SBAR that besoboru is",
        "played with a ball and a bat)\"), and it is not uncommon for extraction to occur through several constituents, (e.g., \"The changes (SBAR that he said the government was prepared to make TRACE)\").",
        "The second reason for an integrated treatment of traces is to improve the parameterisation of the model.",
        "In particular, the subcategorisation probabilities are smeared by extraction.",
        "In examples 1, 2 and 3 above 'bought' is a transitive verb, but without knowledge of traces example 2 in training data will contribute to the probability of 'bought' being an intransitive verb.",
        "Formalisms similar to GPSG (Gazdar et al.",
        "95) handle NP extraction by adding a gap feature to each non-terminal in the tree, and propagating gaps through the tree until they are finally discharged as a trace complement (see figure 5).",
        "In extraction cases the Penn treebank annotation co-indexes a TRACE with the WHNP head of the SBAR, so it is straightforward to add this information to trees in training data.",
        "Given that the LHS of the rule has a gap, there are 3 ways that the gap can be passed down to the RHS: Head The gap is passed to the head of the phrase, as in rule (3) in figure 5.",
        "Left, Right The gap is passed on recursively to one of the left or right modifiers of the head, or is discharged as a trace argument to the left/right of the head.",
        "In rule (2) it is passed on to a right modifier, the S complement.",
        "In rule (4) a trace is generated to the right of the head VB.",
        "We specify a parameter PG(G I P, h, H) where G is either Head, Left or Right.",
        "The generative process is extended to choose between these cases after generating the head of the phrase.",
        "The rest of the phrase is then generated in different ways depending on how the gap is propagated: In the Head case the left and right modifiers are generated as normal.",
        "In the Left, Right cases a gap requirement is added to either the left or right SUBCAT variable.",
        "This requirement is fulfilled (and removed from the subcat list) when a trace or a modifier non-terminal which has the +gap feature is gener",
        "In rule (2) Right is chosen, so the +gap requirement is added to RC.",
        "Generation of SC (bought) (+gap)",
        ":ulfills both the SC and +gap requirements in RC.",
        "In rule (4) Right is chosen again.",
        "Note that generation of trace satisfies both the NP-C and +gap subcat requirements."
      ]
    },
    {
      "heading": "3 Practical Issues",
      "text": []
    },
    {
      "heading": "3.1 Smoothing and Unknown Words",
      "text": [
        "Table 1 shows the various levels of back-off for each type of parameter in the model.",
        "Note that we decompose PL(L,(1w2,1t2) I P, H, w, t, A, LC) (where tivi and /t, are the word and POS tag generated with non-terminal Lt, A is the distance measure) into the product 'PLI(Li(itz) I P,H,w,t,A,LC) x PL2(hoi I L2, ltz, P, H, w, t, A, LC), and then smooth these two probabilities separately (Jason Eisner, p.c.).",
        "In each case' the final estimate is",
        "where el, e2 and e3 are maximum likelihood estimates with the context at levels 1, 2 and 3 in the table, and A, A2 and A3 are smoothing parameters where 0 < Ai < 1.",
        "All words occurring less than 5 times in training data, and words in test data which",
        "have never been seen in training, are replaced with the \"UNKNOWN\" token.",
        "This allows the model to robustly handle the statistics for rare or new words."
      ]
    },
    {
      "heading": "3.2 Part of Speech Tagging and Parsing",
      "text": [
        "Part of speech tags are generated along with the words in this model.",
        "When parsing, the PUS tags allowed for each word are limited to those which have been seen in training data for that word.",
        "For unknown words, the output from the tagger described in (Ratnaparkhi 96) is used as the single possible tag for that word.",
        "A CKY style dynamic programming chart parser is used to find the maximum probability tree for each sentence (see figure 6)."
      ]
    },
    {
      "heading": "4 Results",
      "text": [
        "The parser was trained on sections 02 - 21 of the Wall Street Journal portion of the Penn Treebank (Marcus et al.",
        "93) (approximately 40,000 sentences), and tested on section 23 (2,416 sentences).",
        "We use the PARSEVAL measures (Black et al.",
        "91) to compare performance:"
      ]
    },
    {
      "heading": "Labeled Precision =",
      "text": [
        "number of correct constituents in proposed parse number of constituents in proposed parse"
      ]
    },
    {
      "heading": "Labeled Recall =",
      "text": [
        "number of correct constituents in proposed parse number of constituents in treebank parse Crossing Brackets = number of constituents which violate constituent boundaries with a constituent in the treebank parse.",
        "For a constituent to be 'correct' it must span the same set of words (ignoring punctuation, i.e. all tokens tagged as commas, colons or quotes) and have the same label' as a constituent in the treebank parse.",
        "Table 2 shows the results for Models 1, 2 and 3.",
        "The precision/recall of the traces found by Model 3 was 93.3%/90.1% (out of 436 cases in section 23 of the treebank), where three criteria must be met for a trace to be \"correct\": (1) it must be an argument to the correct head-word; (2) it must be in the correct position in relation to that head word (preceding or following); (3) it must be dominated by the correct non-terminal label.",
        "For example, in figure 5 the trace is an argument to bought, which it follows, and it is dominated by a VP.",
        "Of the 436 cases, 342 were string-vacuous extraction from subject position, recovered with 97.1%/98.2% precision/recall; and 94 were longer distance cases, recovered with 76%/60.6% precision/recall 9."
      ]
    },
    {
      "heading": "4.1 Comparison to previous work",
      "text": [
        "Model 1 is similar in structure to (Collins 96) - the major differences being that the \"score\" for each bigram dependency is Ps(Li,l,IH, P, h, distances) 8(Magerman 95) collapses ADVP and PRT to the same label, for comparison we also removed this distinction when calculating scores.",
        "9We exclude infinitival relative clauses from these figures, for example \"I called a plumber TRACE to fix the sink\" where 'plumber' is co-indexed with the trace subject of the infinitival.",
        "The algorithm scored 41%/18% precision/recall on the 60 cases in section 23 - but infinitival relatives are extremely difficult even for human annotators to distinguish from purpose clauses (in this case, the infinitival could be a purpose clause modifying 'called') (Ann Taylor, p.c.)",
        "rather than Ps(Li, P, H I li,h, distances), and that there are the additional probabilities of generating the head and the STOP symbols for each constituent.",
        "However, Model 1 has some advantages which may account for the improved performance.",
        "The model in (Collins 96) is deficient, that is for most sentences S, ET P(T I S) < 1, because probability mass is lost to dependency structures which violate the hard constraint that no links may cross.",
        "For reasons we do not have space to describe here, Model 1 has advantages in its treatment of unary rules and the distance measure.",
        "The generative model can condition on any structure that has been previously generated - we exploit this in models 2 and 3 - whereas (Collins 96) is restricted to conditioning on features of the surface string alone.",
        "(Charniak 95) also uses a lexicalised generative model.",
        "In our notation, he decomposes P(RHSi I LH Si) as P(R,,...R1HL1..L, I P,h) x (r,I P, Ri, h) X 11.1..m P(ii P, L, h).",
        "The Penn treebank annotation style leads to a very large number of context-free rules, so that directly estimating 'P(R7,...R1HL1..Lin I P, h) may lead to sparse data problems, or problems with coverage (a rule which has never been seen in training may be required for a test data sentence).",
        "The complement/adjunct distinction and traces increase the number of rules, compounding this problem.",
        "(Eisner 96) proposes 3 dependency models, and gives results that show that a generative model similar to Model 1 performs best of the three.",
        "However, a pure dependency model omits non-terminal information, which is important.",
        "For example, \"hope\" is likely to generate a VP (TO) modifier (e.g., I hope [VP to sleep]) whereas \"require\" is likely to generate an S(TO) modifier (e.g., I require [S Jim to sleep]), but omitting non-terminals conflates these two cases, giving high probability to incorrect structures such as \"I hope [Jim to sleep]\" or \"I require [to sleep]\".",
        "(Alshawi 96) extends a generative dependency model to include an additional state variable which is equivalent to having non-terminals - his",
        "suggestions may be close to our models 1 and 2, but he does not fully specify the details of his model, and doesn't give results for parsing accuracy.",
        "(Miller et al.",
        "96) describe a model where the RHS of a rule is generated by a Markov process, although the process is not head-centered.",
        "They increase the set of non-terminals by adding semantic labels rather than by adding lexical headwords.",
        "(Magerman 95; Jelinek et al.",
        "94) describe a history-based approach which uses decision trees to estimate P(TIS).",
        "Our models use much less sophisticated n-gram estimation methods, and might well benefit from methods such as decision-tree estimation which could condition on richer history than just surface distance.",
        "There has recently been interest in using dependency-based parsing models in speech recognition, for example (Stolcke 96).",
        "It is interesting to note that Models 1, 2 or 3 could be used as language models.",
        "The probability for any sentence can be estimated as P(S) = ET P(T, s), or (making a Viterbi approximation for efficiency reasons) as P(S) P(Tbest, S).",
        "We intend to perform experiments to compare the perplexity of the various models, and a structurally similar 'pure' PCFG1°."
      ]
    },
    {
      "heading": "5 Conclusions",
      "text": [
        "This paper has proposed a generative, lexicalised, probabilistic parsing model.",
        "We have shown that linguistically fundamental ideas, namely subcategorisation and wh-movement, can be given a statistical interpretation.",
        "This improves parsing performance, and, more importantly, adds useful information to the parser's output."
      ]
    },
    {
      "heading": "6 Acknowledgements",
      "text": [
        "I would like to thank Mitch Marcus, Jason Eisner, Dan Melamed and Adwait Ratnaparkhi for many useful discussions, and comments on earlier versions of this paper.",
        "This work has also benefited greatly from suggestions and advice from Scott Miller."
      ]
    }
  ]
}
