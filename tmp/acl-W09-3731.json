{
  "info": {
    "authors": [
      "Roussanka Loukanova"
    ],
    "book": "Proceedings of the Eight International Conference on Computational Semantics",
    "id": "acl-W09-3731",
    "title": "Formalisation of Intensionality as Algorithms (project abstract)",
    "url": "https://aclweb.org/anthology/W09-3731",
    "year": 2009
  },
  "references": [],
  "sections": [
    {
      "heading": null,
      "text": [
        "Formalisation of Intensionality as Algorithms",
        "Roussanka Loukanova Computational Linguistics, Uppsala University and TiLPS, Tilburg Universiy rloukanoQstp.lingfil.uu.se"
      ]
    },
    {
      "heading": "1 Background and Recent Development",
      "text": [
        "In a sequence of papers, Moschovakis developed a class of languages of recursion as a new approach to the mathematical notion of algorithm and development of computational semantics, e.g., see Moschovakis [ ], for FLR, and Moschovakis [8], for L^r.",
        "In particular, the language and theory of acyclic recursion L^r is intended for modeling the logical concepts of meaning and synonymy, from the perspective of the theory of computability, by targeting adequateness of computational semantics of NL.",
        "L^r is a higher order type theory, which is a proper extension of Gallin's TY2, Gallin [3], and, thus, of Montague's Intensional Logic (IL).",
        "L^r has a highly expressive language, an effective reduction calculus and strong mathematical properties.",
        "It models the notion of algorithm by abstract mathematical objects, which are tuple of functions defined by mutual recursion, called acyclic re-cursors.",
        "The referential intensions of the meaningful L^r terms are acyclic recursors defined by their canonical forms, which are recursion terms.",
        "For the construction of recursion terms (where-terms), the language L^r uses a recursion operator, denoted by the constant where that applies over a head term Aq and a set of assignments, called body, {p\\ := Ai,...,pn := An}, where each Ai is a term of the same type as the recursion variable pi (1 < i < n): Aq wherejpi := Ai,...,pn := An}.",
        "The where-terms represent recursive computations by designating functional recursors: intuitively, the denotation of the term Aq depends on the functions denoted by p\\,... ,pn that are computed recursively by the system of assignments {pi := Ai,...,pn := An}.",
        "In an acyclic system of assignments, the computations close-off.",
        "The formal syntax of L^r allows only recursion terms with acyclic systems of assignments, while the FLR allows cyclicity, but is limited with respect to its type system.",
        "The languages of recursion (e.g., FLR and L^r) have two semantic layers: denotational semantics and referential intensions.",
        "The recursion terms of L^r are essential for encoding that twofold semantic information.",
        "Denotational Semantics: For any given semantic structure 21, there is at most one, well-defined denotation function, den, from terms and variable assignments to objects in the domain of 21.",
        "Thus, for any variable assignment g, an L^r term A of type a denotes a uniquely defined object den(A)(g) of the subdomain 2lCT of 21.",
        "has a reduction calculus that reduces each term A to its canonical form cf(yl) = Ao where {p\\ := A\\,... ,pn := An} (unique modulo congruence, i.e., with respect to renaming bound variables and reordering of assignments).",
        "Intensional Semantics: The notion of intension in the languages of recursion covers the most essential, computational aspect of the concept of meaning.",
        "Intuitively, Int(A) is the algorithm for computing its denotation den(A).",
        "Formally, the referential intension, \\nt(A), of a meaningful expression A is the recursor that is defined by the canonical form cf(A) of A.",
        "Two meaningful expressions are synonymous iff their referential intensions are naturally isomorphic, i.e., they are the same algorithms.",
        "Thus, the algorithmic meaning of a well-formed expression (i.e., its sense) is the information for how to \"compute\" its denotation, i.e., expressions have sense by carrying instructions for acquiring what they denote in a structure (model).",
        "The canonical form cf(A) of a meaningful term A encodes its intension, i.e., the algorithm for computing its denotation, via: (1) the basic semantic facts, which consist of {p\\ := A\\, pn := An} and the \"head pattern\" Ao, that are needed for computing the denotational interpretation den (A), and (2) a rank order of the steps for incremental computation of the denotation den(A)(g), e.g., a terminating order of the recursive steps that compute each den(Ai)(g), for i e {0,..., n}.",
        "Thus, the languages of recursion offer a formalisation of central computational aspects of Frege's distinction between sense and denotation, with two semantic \"levels\":",
        "NL Syntax => => Referential Intensions (Algorithms) => Denotations",
        "ComputationalSemantics",
        "2 Open Problems for the Language of Acyclic Recursion as Semantic Theory of NL",
        "Relational Type Theory with Partiality Acyclic recursion terms and acyclic recursors model terminating algorithms for computing the denotations of meaningful expressions.",
        "The idea of restricting recursion languages to acyclicity, as in L^r, is that, for certain applications to NL semantics, partiality and self-reference are not needed.",
        "In 80's, Barwise and Perry (e.g., [1]) introduced Situation Theory with the ideas that partiality, factual content and situatedness are crucial features of the meaning concepts that involve mental states, incl.",
        "attitudes.",
        "Situation Theory models partiality and the inherent relational and situational nature of information, in general, not only linguistic, by diverging from the traditional type theoretic settings.",
        "Situation Semantics proceeds as a special case of application of Situation Theory to NL semantic information.",
        "By taking up the ideas of partiality, Muskens [9] realized the ideas of Situation Semantics by generalizing Gallin's TY2 with partial relations and building corresponding generalized Montague grammars, i.e., Partial Type-theoretic Grammars.",
        "The importance of partial relational structures to semantics of NL is well investigated by Situation Theory.",
        "Furthermore, Muskens [9] demonstrated that encoding relational type systems is not only inadequate in the case of partial relational structures, but needless.",
        "That opens a need of extending the language L^r to a full higher order type theory for modeling recursors with partial functions and relations.",
        "Factuality and State Variation L^r uses states (similar to indexes for possible worlds and times, situations, contexts) at all levels of its own syntax and semantics.",
        "However, the potential expressiveness of L^r for representation of state dependant semantic objects has not been fully developed.",
        "There is a need of more finely grained semantic concepts by a type theory of recursion that: (a) represents denotation functions with values that are partial, situated objects with factual content, and, (b) uses terms with internal variation of state constants and state variables that occur inside terms.",
        "Such terms are more adequate representation of information that depends on varying states.",
        "Work in the direction of representing locality of semantic facts in L^r, has been done (however without state variation in individual terms) by Kalyvianaki [5],[4].",
        "Denotation and Intention Muskens [10] refined the denotation function by a revision of Thomason's Intentional Logic.",
        "The result is a logical grammar that takes propositions as primitive objects, with a relation that associates propositions with sets of possible worlds.",
        "The techniques of Muskens [10] offer a possibility for refining the denotational semantics of recursion languages by splitting it into two sub-layers: (a) situated denotations (as above), and, (b) denotational intention:",
        "Denotational Intentions",
        "Underspecification Underspecified semantic representation became major effort of contemporary research, see Bunt [2] for a comprehensive overview of the field.",
        "Representing semantic underspecification of NL with languages of recursion needs to be developed.",
        "Initial work, see Loukanova [6], shows the unique expressiveness of L^r to accommodate its inherent facilities for representing semantic underspecification of NL expressions.",
        "Representation of Attitudes Semantics of attitudes, such as know, believe, etc., in the languages of recursion, is an open problem.",
        "Syntax-Semantics Interface A major work to be done is to define render relations from NL to languages of recursion.",
        "Initial work shows that that is a realistic task.",
        "A more demanding task, with potential applications, e.g., to machine translation, is a render relation with inverse to NL."
      ]
    }
  ]
}
