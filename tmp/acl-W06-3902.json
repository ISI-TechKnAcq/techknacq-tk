{
  "info": {
    "authors": [
      "Nikhil Dinesh",
      "Aravind K. Joshi",
      "Insup Lee"
    ],
    "book": "Proceedings of the Fifth International Workshop on Inference in Computational Semantics",
    "id": "acl-W06-3902",
    "title": "Extracting formal specifications from natural language regulatory documents",
    "url": "https://aclweb.org/anthology/W06-3902",
    "year": 2006
  },
  "references": [
    "acl-P99-1058"
  ],
  "sections": [
    {
      "text": [
        "Extracting Formal Specifications from Natural Language Regulatory Documents",
        "Nikhil Dinesh, Aravind Joshi, and Insup Lee",
        "upenn.",
        "edu",
        "Bonnie Webber",
        "ed.",
        "ac.",
        "uk",
        "Formal verification techniques provide a way to determine whether regulatory documents are consistent and whether implementations conform to them.",
        "To apply these techniques a formal description of the regulation needs to be extracted.",
        "We present a framework, under which NLP techniques can be brought to bear, to aid a requirements engineer in extracting the formal description."
      ]
    },
    {
      "heading": "1. Introduction",
      "text": [
        "Regulatory documents, which include the vast bodies of legislation, operating procedures and organizational policy, are meant to be accessible to the people affected by them.",
        "Hence, they have to be in natural language (NL).",
        "On the other hand, regulations are expected to be consistent, and the governed entities/events are expected to conform to the regulation.",
        "For example, the Food and Drug Administration's Code of Federal Regulations (FDA CFR) governs the bloodbanks in America.",
        "The bloodbanks perform safety-critical functions like the testing of blood for communicable disease agents (like HIV).",
        "It is highly desirable to determine whether (a) the CFR is consistent, and (b) a bloodbank's implementation of such a function conforms to the CFR.",
        "The problem of creating descriptions of regulation which can be checked for consistency has been explored by several authors [1,8], but the challenge of checking an implementation for conformance has not been addressed, and this is the main goal of our work.",
        "The conformance guarantees can be obtained if formal descriptions of regulation and implementations are available, and if verification techniques [4] can be applied to these descriptions.",
        "But extracting a formal description of regulation is expensive, as regulatory bases like the CFR are large (about a million words) and complex.",
        "Formal descriptions of regulation are usually extracted by an individual who has a background in logic, e.g., [1,8].",
        "We will call this individual the requirements engineer.",
        "In this paper, we describe a framework to assist a requirements engineer in extracting a formal description of regulation for use in conformance checking.",
        "An overview of the framework, the theoretical background and the various constraints that apply is given in Section 2.",
        "This lets us determine the nature of the description that needs to be extracted from the regulation.",
        "We then turn to the question of how these descriptions might be composed.",
        "In Section 3, we attempt to map the denotations of sentences assigned by Kratzer [12]to a form that can be used for the task at hand.",
        "Some difficulties arise in this mapping, mainly because notions of obligation (that which is required) and permission (that which is allowed) are not captured in the denotations.",
        "We argue that an account of these notions is essential to the task at hand.",
        "Section 4 describes a semantic representation, and composition procedure to assist the requirements engineer in extracting the required description.",
        "By treating obligations and permissions as different dimensions of the description computed, the difficulties encountered in Section 3 are addressed.",
        "The approach is motivated by our case study of the FDA CFR, and we use (1) and (2) as examples through the course of this paper.",
        "(1) conveys an obligation to perform a test for HIV and Hepatitis B, and (2) conveys a permission not to test source plasma (a blood component) for Hepatitis B.",
        "(1) Except as specified in (2), you must test each donation of human blood or blood component, for evidence of infection due to the Human immunodeficiency virus, and the Hepatitis B virus.",
        "(2) You are not required to test donations of Source Plasma for evidence of infection due to the Hepatitis B virus."
      ]
    },
    {
      "heading": "2. A Framework",
      "text": [
        "To determine whether an implementation (bloodbank) conforms to the regulation (CFR), we extract specifications in the Computation Tree Logic (CTL) from the CFR.",
        "Then, given a description of a bloodbank's procedure (as a finite transition system, or model) there is an efficient search procedure to determine if the model conforms to the CTL specification [3].",
        "This is known as temporal model checking [2,13].",
        "The problem of conformance checking is thus split into three steps:",
        "(1) Extract CTL specifications from the regulation - This is done by a requirements engineer, and our goal is to assist her.",
        "We use CTL as the specification language, because it allows for efficient model checking [3].",
        "(2) Obtain a model of an implementation - We assume the availability of models.",
        "There are tools that aid in extracting models from software [5], and in creating models if they cannot be extracted directly [11].",
        "(3) Apply model checking to determine if the model conforms to the CTL specification.",
        "Formally, a model can be defined as follows:",
        "Definition 2.1 A model M is the five-tuple (S,I,ô,n, n), where:",
        "(a) S is a set of states, I Ç S is a non-empty set of initial states, (c) n is a set of propositions (with power set 2n), and",
        "(d) n : S – 2n is a function from states to sets of propositions.",
        "n(s) for s G S can be thought of as the propositions true at s.",
        "Figure 1(a) and 1(b) show models of two different bloodbanks.",
        "The leftmost state is the initial state.",
        "Each state is labeled with n(s).",
        "The propositions have the following interpretation: dd is true (d' G n(s)) iff a donation of blood or blood component is being processed, sp' is true iff a donation of source plasma is being processed, thiv' is true iff a test for HIV has been performed, and thepb' is true iff a test for Hepatitis B has been performed.",
        "The use of the propositions deo (denoting deontic accessibility) and app1 (denoting the application of a permission) is explained in later sections.",
        "(a) A model of a bloodbank (b) A model of a bloodbank which tests all donations which does not test dona tions of source plasma for Hepatitis B",
        "Fig.",
        "1.",
        "Two models of bloodbanks",
        "Definition 2.2 Given a finite set of propositions n, CTL formulas are defined inductively as follows:",
        "(b) Boolean combinations and negations offormulas are formulas,",
        "(c) if <f>, and if are formulas, then AG(<fi) (on all paths, globally §), AX(</>) (on all paths, at the next state §), and f>AUip) (on all paths, f> until if) are formulas.",
        "The only temporal operator in CTL that we use is AG (for reasons that we describe below), and hence rather than define the interpretation formally, we will give some examples.",
        "Let M1 be the model in Figure 1(a), and M2 be the model in Figure 1(b).",
        "The CTL specification AG(deo – (d – thiv')) holds of both models, since on all paths (from the initial state, the leftmost one in Figures 1(a), and 1(b)), globally, in all deontically accessible states deo, if a donation of blood or blood component is being processed d', it is tested for HIV thiv'.",
        "Hence, we write M1 = AG(deo – (d' – thiv'j), and M2 = AG(deo – (d' – thiv')).",
        "Also, M1 = AG(deo – (sp' – thepb')).",
        "But, M2 = AG(deo – (sp' – thepb')) (since there is a state s with sp' g n(s), and thepb' G n(s)).",
        "The central problem we face is that CTL and other temporal logics that lend themselves to model checking are not expressive enough for a compositional semantic procedure to be defined for natural language.",
        "One reason is that CTL, like propositional logic, cannot express relations between entities.",
        "There are several routes one might take to address this problem, i.e., design more expressive logics that allow for tractable model checking, focus on a subset of NL from which an automatic translation is guaranteed, or make the procedure machine-assisted.",
        "While the design of more expressive logics makes the composition of specifications easier, using them for model checking needs the creation of more expressive models (which requires more effort).",
        "As a result, there is a trade-off between amount of effort spent in obtaining models, and that in obtaining the specifications.",
        "Our decision to work with less expressive models is motivated by the extensive tool support available for creating and extracting such models [5,11].",
        "Further, subsets of NL for which automatic translation is guaranteed, such as the one derived by Holt and Klein [10], assume (among other things) that references are resolved and hence cannot be directly applied to regulatory documents.",
        "We are thus left with the choice of making the procedure machine-assisted.",
        "There have been two kinds of machine-assisted approaches to extracting temporal logic specifications: (a) composing the semantics in a general semantic framework which is then mapped to temporal logic [7], and (b) attempting to compose the semantics in the temporal logic directly [6].",
        "In the latter approach, a human specifies denotations for a portion of the sentence, and the rest of the composition happens automatically.",
        "We attempt to compose the semantics in a temporal logic directly like [6], as it lends itself to defining semantic representations with which a requirements engineer can interact in well-defined ways.",
        "We apply two constraints to the CTL specifications:",
        "(i) The specifications extracted should hold of all and only the valid models.",
        "There may be several implementations that aim to conform to a single base of regulation.",
        "Given (1) and (2), the models in Figures 1(a) and 1(b) are both valid.",
        "This is an important difference from the NL sentences considered in previous approaches, which were elicited from appropriate users by presenting them with a single model.",
        "For example, Holt and Klein [10] obtained specifications by asking users to describe a particular timing diagram.",
        "(ii) To account for the variation between models, all temporal information about the governed entities/events is modelled through propositions.",
        "The only use of the temporal operators in CTL is to obtain a quantification over paths and states.",
        "A mapping will need to be performed so that the propositions used in the specifications can be evaluated at a states in different models, and the critical assumption is that this mapping will be very easy to specify."
      ]
    },
    {
      "heading": "3. From Sets of Worlds to Sets of Models",
      "text": [
        "Several approaches in formal semantics take sentences to denote sets of worlds.",
        "For normative statements, we assume (following Kratzer [12]) that worlds are connected by an accessibility relation.",
        "Consider (1) in Section 1 which among other things requires a test for Hepatitis B if no exceptions apply.",
        "A denotation of this requirement is given in (3), and is the set of worlds w0, such that for every deontically accessible world w, for every entity x such that x is a donation in that world dd(x,w), if no exception holds of that donation – e'(x,w), a test for Hepatitis B is carried out for that donation thepb'(x,w).",
        "We will assume that negation has the highest precedence.",
        "Therefore – a – b = ( – a) – b, and brackets are used to resolve other ambiguities.",
        "A difference between worlds in Kratzer's denotations and states in a model is that: in a state there is no notion of entities and relations between them.",
        "All that is available at a state s is the set of propositions which are true at that state n(s).",
        "To map (3) to a form that is useful for checking conformance, we need two assumptions.",
        "First, we assume that regulation denotes the set of models that conform to it.",
        "Intuitively speaking, wo in (3) can be thought of as a model in its entirety, and w G deo(w0) correspond to special states in the model.",
        "A universal quantification over accessible worlds can be replaced with the CTL AG operator.",
        "We then obtain the denotation in (4), read as : on every path in M, if a state is deontically accessible, for each donation x at that state, if no exception holds, a test is carried out.",
        "In a model, only special states (like when the bloodbank has finished processing all the donations it has received) need to conform to the regulation, and deo can be thought of as marking those states.",
        "(4) is still not in CTL because of the universal quantification over entities x at a state.",
        "The universal quantifier can be eliminated by assuming a",
        "serial processing model.",
        "This has the effect that at the deontically accessible states, exactly one donation is under consideration (e.g. the models in Figures 1(a) and 1(b)).",
        "In the sections of the CFR that we examined, a universal quantification over entities is absolutely essential when these entities correspond to inputs of an implemenation.",
        "This assumption lets us tie the inputs to states, and use the quantification over states to achieve the quantification over entities.",
        "Thus (4) can be reduced to (5).",
        "A problem that is encountered in taking this approach is that there is no distinction between obligations, and permissions (both of which stem from the Hohfeldian legal conceptions of right, duty, privilege, and no right [9]).",
        "While this did not cause a problem for the obligation in (1), if one were to follow the same procedure for the permission in (2), we would get the denotation in (6).",
        "A model satisfies (6) only if there is some path in which there is a state that is deontically accessible, and ifa donation ofsource plasma is being processed it is not tested.",
        "This is too strong a requirement, because an organization may choose not to do what it is permitted to do.",
        "The model in Figure 1(a) is a valid model, which would be declared invalid if (6) were required of it.",
        "Another problem is that it is not clear how one would use (6) in interpreting the exemption e' in (5).",
        "A reasonable candidate is e' = deo – (sp' – – thepb').",
        "But this is not the exemption because it is true in every deontically accessible state in which a donation ofsource plasma is not being processed.",
        "Consider a model that doesn't test any donation for Hepatitis B would conform to (5).",
        "We now turn to the task of addressing these problems by revising how the specifications are composed."
      ]
    },
    {
      "heading": "4. Extracting the specifications",
      "text": [
        "To aid the requirements engineer in extracting the specifications, the idea is to present her with intermediate semantic representations of the sentence with which she interacts.",
        "The intermediate representations that we use fall into the category of abstract syntax trees (ASTs).",
        "ASTs are generally used as intermediate representations in compiling code in a high-level programming language to machine dependant code.",
        "The internal nodes in ASTs are operators (predicates/meta-predicates), the subtrees they dominate are operands (arguments), and leaf nodes correspond to variables or constants (the requirements engineer specifies the denotation of the leaves).",
        "An AST encodes the resolution of scope ambiguities, i.e., if p1 dominates p2 in the AST, then p1 outscopes p2.",
        "Section 4.1 describes some phenomena in natural language that can be used in the construction of the ASTs, and how these ASTs can be interpreted.",
        "In Section 4.2, we describe how the ASTs and their interpretation for (1) and (2) (in Figures 3 and 4) address the problems described in Section 3.",
        "4-1 Abstract Syntax Trees (ASTs) and their interpretation",
        "To capture the distinction between obligations and permissions, the denotation of each node N in an AST is given by the 3-tuple: [[n]] = On , where ON is a set of propositional logic formulas which correspond to the obligations that have been satisfied, and PN is a set of propositional logic formulas that correspond to the permissions that have been taken, and 0N is a propositional logic formula which can be thought of as indicating whether N is true at a state.",
        "The set of obligations O obtained from the policy base is the union of the obligations obtained at the root of the AST for each sentence.",
        "The denotation of the policy base is then given by: am.",
        "m nag [deo – f\\ </> J .",
        "We now identify various linguistic constructions that can be used to obtain ASTs.",
        "Fig.",
        "2.",
        "Semantics of the Copy meta-predicate",
        "\\x] is a donation of human blood or blood component 4>{1)\\-^A",
        "except as specified you, test [x_\\, for evidence of infection due",
        "Fig.",
        "3.",
        "AST and its interpretation for (1)",
        "Distributive readings and the Copy meta-predicate: (1) is ambiguous between a collective reading (where there is a single test for both the",
        "is a donation of Source Plasma - ^2.1 are required you to test [äT[ for evidence of infection due to the Hepatitis B virus of this section - ^2.2",
        "Fig.",
        "4.",
        "AST and its interpretation for (2)",
        "diseases), and a distributive reading (where there are separate tests for each disease).",
        "However, (2) gives an exemption to a test for one of the diseases, and this suggests that a distributive reading may be more appropriate in the specifications extracted, and that the distributivity has scope over the exception.",
        "Hence Copy dominates except in Figure 3.",
        "The interpretation of the Copy meta-predicate is given in Figure 2.",
        "It is called a meta-predicate because it is a function from an AST to another AST, by simple variable substitution.",
        "For the AST for (1) shown in Figure 3, this results in an AST rooted with and with subtrees corresponding to each of the tests.",
        "The interpretation of and in this context is given by:",
        "The RHS of the equation corresponds to the denotation of the node labeled and in the AST (shaded in gray in Figure 3).",
        "Universally Quantified NPs correponding to inputs: As mentioned in Section 3, the universal quantification over inputs (donations) is achieved by associating states with unique inputs.",
        "The interpretation of the determiner each is designed with idea that the obligations will be evaluated at each state.",
        "The interpretation of the determiner no is similar to that of each/every, except that a negation needs to be applied to the nuclear scope.",
        "We discuss the interpretation of negation in what follows.",
        "Conditional and Exceptive constructions: There are several predicates that denote conditions and exceptions.",
        "For example, the subordinating conjunctions if, unless, and except as, coordinating conjunctions like except that or but.",
        "The interpretation of if is the same as that for every.",
        "The interpretation of predicates like except as, and unless are similar, the only difference being that is used instead of 0A in the RHS.",
        "Modals and Negation: The semantics of modals and negation are given below:",
        "must(A) results in the interpretation that 0A is an obligation.",
        "may (A) results in the interpretation that app^ A 0A is a permission, where app^ is a variable introduced which the implementation must set to true when the permission is applied (we discuss its use in Section 4.2).",
        "And intuitively, the interpretation of negation captures the idea that may( – A) = not (must (A)).",
        "4-2 Discussion",
        "There are two obligations obtained at the root of the AST for (1): (d.ia – ",
        "d' – ( – e'2 – thepb') , where dd is true iff the donation is one of blood or blood component, e[ and e'2 are the exceptions to the required test for each disease, and thiv' and thepb' are true iff tests for HIV and Hepatitis B respectively have been performed.",
        "The computation of the second obligation is not shown in Figure 3, and is obtained from the second child of and (in the AST shaded in gray).",
        "Note that the individual propositions like dd need to be specified by the requirements engineer at the leaf nodes of the AST.",
        "Figure 4 shows the AST and its interpretation for (2).",
        "The permission obtained at the root node is : </>(2p Aapp1 A-</>(2^2 = sp' Aapp1 a – thepb' where sp' is true iff a donation of source plasma is being processed, and thepb' is true iff a test for the Hepatitis B virus has been carried out.",
        "The use of the appi proposition is as follows.",
        "It is possible for the regulation to cancel the permission given in (2), but there may be several cases in which permission not to test a donation of source plasma for Hepatitis B is given.",
        "Suppose the case under consideration is one where the permission in (2) is cancelled, but the organization doesn't test a donation of source plasma for Hepatitis B because a different permission can be applied.",
        "Since the permission being applied sets thepb' to false, and sp' is true, the only way for the implementation to indicate that the permission in (2) is not being applied is by setting appi to false.",
        "Setting el = false, and e2 = sp' A app1 A -thepb':",
        "Considering just these obligations, the denotation of the regulatory document would be: XM.",
        "M = AG(deo – (4>oa a 4>o.2)) .",
        "Therefore, a bloodbank could decide not to test a donation of source plasma for Hepatitis B, but they would always have to test a donation for HIV."
      ]
    },
    {
      "heading": "5. Conclusions and Future Work",
      "text": [
        "We have described a framework to assist a requirements engineer in extracting CTL specifications from regulatory documents.",
        "An account of obligations and permissions turns out to be essential in composing the specifications.",
        "The composition procedure (defined in Section 4) was applied to a large part of the FDA CFR 610.40.",
        "While it does seem to scale well, providing tool support to extract and interact with the ASTs is vital.",
        "To this end, we plan to conduct a small scale annotation of ASTs which will let us determine the accuracy with which these representations can be computed.",
        "On the user interface side, we are working on ways of presenting the ASTs to the requirements engineer."
      ]
    }
  ]
}
